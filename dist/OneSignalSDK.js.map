{"version":3,"file":"OneSignalSDK.js","sources":["webpack:///webpack/bootstrap d5afbac36db98447b800","../../src/service-worker/ServiceWorker.ts","node_modules/tslib/tslib.es6.js","node_modules/loglevel/lib/loglevel.js","../../src/managers/SdkEnvironment.ts","../../src/utils.ts","../../src/models/WindowEnvironmentKind.ts","../../src/Event.ts","../../src/Environment.ts","node_modules/object-assign/index.js","../../src/errors/OneSignalError.js","../../src/helpers/SubscriptionHelper.ts","node_modules/bowser/src/bowser.js","../../src/services/Database.ts","../../src/helpers/MainHelper.ts","../../src/errors/PushPermissionNotGrantedError.ts","../../src/helpers/EventHelper.ts","../../src/errors/InvalidStateError.ts","../../src/OneSignalApi.ts","../../src/Postmam.ts","../../src/errors/InvalidArgumentError.ts","../../src/libraries/WorkerMessenger.ts","../../src/errors/NotImplementedError.ts","../../src/models/NotificationPermission.ts","../../src/LimitStore.ts","../../src/models/SubscriptionStateKind.ts","../../src/bell/Bell.ts","../../src/models/AppConfig.ts","../../src/models/IntegrationKind.ts","../../src/errors/SdkInitError.ts","../../src/models/BuildEnvironmentKind.ts","../../src/bell/ActiveAnimatedElement.ts","../../src/bell/AnimatedElement.ts","../../src/managers/ServiceWorkerManager.ts","../../src/modules/TimedLocalStorage.ts","../../src/models/PushDeviceRecord.ts","../../src/models/DeviceRecord.ts","../../src/modules/frames/RemoteFrame.ts","../../src/models/Context.ts","../../src/managers/ConfigManager.ts","../../src/models/TestEnvironmentKind.ts","webpack:///(webpack)/buildin/global.js","../../src/libraries/Emitter.ts","../../src/services/IndexedDb.ts","../../src/models/EmailProfile.ts","../../src/bell/Message.ts","../../src/models/PermissionPromptType.ts","../../src/models/Path.ts","../../src/OneSignal.ts","node_modules/heir/heir.js","node_modules/wolfy87-eventemitter/EventEmitter.js","../../src/errors/AlreadySubscribedError.ts","../../src/errors/PermissionMessageDismissedError.ts","../../src/managers/LegacyManager.ts","../../src/helpers/InitHelper.ts","../../src/services/DynamicResourceLoader.ts","../../src/models/EmailDeviceRecord.ts","../../src/helpers/TestHelper.ts","../../src/errors/SubscriptionError.ts","../../src/models/RawPushSubscription.ts","../../src/utils/Encoding.ts","../../src/managers/MetricsManager.ts","../../src/entry.ts","node_modules/es6-error/lib/index.js","webpack:///(webpack)/buildin/amd-define.js","../../src/errors/TimeoutError.ts","../../src/models/AppState.ts","../../src/models/ServiceWorkerState.ts","node_modules/jsonp/index.js","../../src/errors/OneSignalApiError.ts","../../src/bell/Badge.ts","../../src/bell/Button.ts","../../src/bell/Dialog.ts","../../src/bell/Launcher.ts","../../src/errors/NotSubscribedError.ts","../../src/helpers/HttpHelper.ts","../../src/modules/frames/ProxyFrame.ts","../../src/modules/frames/SubscriptionModalHost.ts","../../src/models/DeliveryPlatformKind.ts","../../src/models/DevicePlatformKind.ts","../../src/managers/SubscriptionManager.ts","../../src/modules/CookieSyncer.ts","../../src/managers/SessionManager.ts","../../src/managers/PermissionManager.ts","../../src/modules/frames/SubscriptionModal.ts","../../src/modules/frames/SubscriptionPopup.ts","../../src/managers/AltOriginManager.ts","../../src/modules/frames/ProxyFrameHost.ts","../../src/modules/frames/SubscriptionPopupHost.ts","../../src/popover/Popover.ts","../../src/services/Crypto.ts","../../src/utils/ValidatorUtils.ts","../../src/errors/DeprecatedApiError.ts","../../src/OneSignalStub.ts"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 61);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d5afbac36db98447b800","import * as Browser from 'bowser';\nimport * as log from 'loglevel';\nimport * as objectAssign from 'object-assign';\n\nimport Environment from '../Environment';\nimport { WorkerMessenger, WorkerMessengerCommand } from '../libraries/WorkerMessenger';\nimport SdkEnvironment from '../managers/SdkEnvironment';\nimport { SubscriptionManager } from '../managers/SubscriptionManager';\nimport { BuildEnvironmentKind } from '../models/BuildEnvironmentKind';\nimport Context from '../models/Context';\nimport OneSignalApi from '../OneSignalApi';\nimport Database from '../services/Database';\nimport { contains, getConsoleStyle, isValidUuid, trimUndefined } from '../utils';\n\nimport { AppConfig, deserializeAppConfig } from '../models/AppConfig';\nimport { UnsubscriptionStrategy } from \"../models/UnsubscriptionStrategy\";\nimport ConfigManager from '../managers/ConfigManager';\nimport { RawPushSubscription } from '../models/RawPushSubscription';\nimport { SubscriptionStateKind } from '../models/SubscriptionStateKind';\nimport { SubscriptionStrategyKind } from \"../models/SubscriptionStrategyKind\";\nimport { PushDeviceRecord } from '../models/PushDeviceRecord';\n\n///<reference path=\"../../typings/globals/service_worker_api/index.d.ts\"/>\ndeclare var self: ServiceWorkerGlobalScope;\n\n\n/**\n * The main service worker script fetching and displaying notifications to users in the background even when the client\n * site is not running. The worker is registered via the navigator.serviceWorker.register() call after the user first\n * allows notification permissions, and is a pre-requisite to subscribing for push notifications.\n *\n * For HTTPS sites, the service worker is registered site-wide at the top-level scope. For HTTP sites, the service\n * worker is registered to the iFrame pointing to subdomain.onesignal.com.\n */\nexport class ServiceWorker {\n  static UNSUBSCRIBED_FROM_NOTIFICATIONS;\n\n  /**\n   * An incrementing integer defined in package.json. Value doesn't matter as long as it's different from the\n   * previous version.\n   */\n  static get VERSION() {\n    return Environment.version();\n  }\n\n  /**\n   * Describes what context the JavaScript code is running in and whether we're running in local development mode.\n   */\n  static get environment() {\n    return Environment;\n  }\n\n  static get log() {\n    return log;\n  }\n\n  /**\n   * An interface to the browser's IndexedDB.\n   */\n  static get database() {\n    return Database;\n  }\n\n  static get sdkEnvironment() {\n    return SdkEnvironment;\n  }\n\n  /**\n   * Describes the current browser name and version.\n   */\n  static get browser() {\n    return Browser;\n  }\n\n  /**\n   * Allows message passing between this service worker and its controlled clients, or webpages. Controlled\n   * clients include any HTTPS site page, or the nested iFrame pointing to OneSignal on any HTTP site. This allows\n   * events like notification dismissed, clicked, and displayed to be fired on the clients. It also allows the\n   * clients to communicate with the service worker to close all active notifications.\n   */\n  static get workerMessenger(): WorkerMessenger {\n    if (!(self as any).workerMessenger) {\n      (self as any).workerMessenger = new WorkerMessenger(null);\n    }\n    return (self as any).workerMessenger;\n  }\n\n  /**\n   * Service worker entry point.\n   */\n  static run() {\n    self.addEventListener('push', ServiceWorker.onPushReceived);\n    self.addEventListener('notificationclose', ServiceWorker.onNotificationClosed);\n    self.addEventListener('notificationclick', event => event.waitUntil(ServiceWorker.onNotificationClicked(event)));\n    self.addEventListener('install', ServiceWorker.onServiceWorkerInstalled);\n    self.addEventListener('activate', ServiceWorker.onServiceWorkerActivated);\n    self.addEventListener('pushsubscriptionchange', (event: PushSubscriptionChangeEvent) => {\n      event.waitUntil(ServiceWorker.onPushSubscriptionChange(event))\n    });\n    /*\n      According to\n      https://w3c.github.io/ServiceWorker/#run-service-worker-algorithm:\n\n      \"user agents are encouraged to show a warning that the event listeners\n      must be added on the very first evaluation of the worker script.\"\n\n      We have to register our event handler statically (not within an\n      asynchronous method) so that the browser can optimize not waking up the\n      service worker for events that aren't known for sure to be listened for.\n\n      Also see: https://github.com/w3c/ServiceWorker/issues/1156\n    */\n    log.debug('Setting up message listeners.');\n    // self.addEventListener('message') is statically added inside the listen() method\n    ServiceWorker.workerMessenger.listen();\n    // Install messaging event handlers for page <-> service worker communication\n    ServiceWorker.setupMessageListeners();\n  }\n\n  static async getAppId(): Promise<string> {\n    if (self.location.search) {\n      // Successful regex matches are at position 1\n      const appId = self.location.search.match(/appId=([0-9a-z-]+)&?/i)[1];\n      return appId;\n    } else {\n      const { appId } = await Database.getAppConfig();\n      return appId;\n    }\n  }\n\n  static async setupMessageListeners() {\n    ServiceWorker.workerMessenger.on(WorkerMessengerCommand.WorkerVersion, _ => {\n      log.debug('[Service Worker] Received worker version message.');\n      ServiceWorker.workerMessenger.broadcast(WorkerMessengerCommand.WorkerVersion, Environment.version());\n    });\n    ServiceWorker.workerMessenger.on(WorkerMessengerCommand.Subscribe, async (appConfigBundle: any) => {\n      const appConfig = deserializeAppConfig(appConfigBundle);\n      log.debug('[Service Worker] Received subscribe message.');\n      const context = new Context(appConfig);\n      const rawSubscription = await context.subscriptionManager.subscribe(SubscriptionStrategyKind.ResubscribeExisting);\n      const subscription = await context.subscriptionManager.registerSubscription(rawSubscription);\n      ServiceWorker.workerMessenger.broadcast(WorkerMessengerCommand.Subscribe, subscription.serialize());\n    });\n    ServiceWorker.workerMessenger.on(WorkerMessengerCommand.SubscribeNew, async (appConfigBundle: any) => {\n      const appConfig = deserializeAppConfig(appConfigBundle);\n      log.debug('[Service Worker] Received subscribe new message.');\n      const context = new Context(appConfig);\n      const rawSubscription = await context.subscriptionManager.subscribe(SubscriptionStrategyKind.SubscribeNew);\n      const subscription = await context.subscriptionManager.registerSubscription(rawSubscription);\n      ServiceWorker.workerMessenger.broadcast(WorkerMessengerCommand.SubscribeNew, subscription.serialize());\n    });\n    ServiceWorker.workerMessenger.on(WorkerMessengerCommand.AmpSubscriptionState, async (appConfigBundle: any) => {\n      log.debug('[Service Worker] Received AMP subscription state message.');\n      const pushSubscription = await self.registration.pushManager.getSubscription();\n      if (!pushSubscription) {\n        ServiceWorker.workerMessenger.broadcast(WorkerMessengerCommand.AmpSubscriptionState, false);\n      } else {\n        const permission = await self.registration.pushManager.permissionState(pushSubscription.options);\n        const { optedOut } = await Database.getSubscription();\n        const isSubscribed = !!pushSubscription && permission === \"granted\" && optedOut !== true;\n        ServiceWorker.workerMessenger.broadcast(WorkerMessengerCommand.AmpSubscriptionState, isSubscribed);\n      }\n    });\n    ServiceWorker.workerMessenger.on(WorkerMessengerCommand.AmpSubscribe, async () => {\n      log.debug('[Service Worker] Received AMP subscribe message.');\n      const appId = await ServiceWorker.getAppId();\n      const appConfig = await new ConfigManager().getAppConfig({\n        appId: appId.value\n      });\n      const context = new Context(appConfig);\n      const rawSubscription = await context.subscriptionManager.subscribe(SubscriptionStrategyKind.ResubscribeExisting);\n      const subscription = await context.subscriptionManager.registerSubscription(rawSubscription);\n      ServiceWorker.workerMessenger.broadcast(WorkerMessengerCommand.AmpSubscribe, subscription.deviceId);\n    });\n    ServiceWorker.workerMessenger.on(WorkerMessengerCommand.AmpUnsubscribe, async () => {\n      log.debug('[Service Worker] Received AMP unsubscribe message.');\n      const appId = await ServiceWorker.getAppId();\n      const appConfig = await new ConfigManager().getAppConfig({\n        appId: appId.value\n      });\n      const context = new Context(appConfig);\n      await context.subscriptionManager.unsubscribe(UnsubscriptionStrategy.MarkUnsubscribed);\n      ServiceWorker.workerMessenger.broadcast(WorkerMessengerCommand.AmpUnsubscribe, null);\n    });\n  }\n\n  /**\n   * Occurs when a push message is received.\n   * This method handles the receipt of a push signal on all web browsers except Safari, which uses the OS to handle\n   * notifications.\n   */\n  static onPushReceived(event) {\n    log.debug(`Called %conPushReceived(${JSON.stringify(event, null, 4)}):`, getConsoleStyle('code'), event);\n\n    event.waitUntil(\n        ServiceWorker.parseOrFetchNotifications(event)\n            .then((notifications: any) => {\n              if (!notifications || notifications.length == 0) {\n                log.debug(\"Because no notifications were retrieved, we'll display the last known notification, so\" +\n                          \" long as it isn't the welcome notification.\");\n                return ServiceWorker.displayBackupNotification();\n              }\n\n              //Display push notifications in the order we received them\n              let notificationEventPromiseFns = [];\n\n              for (let rawNotification of notifications) {\n                log.debug('Raw Notification from OneSignal:', rawNotification);\n                let notification = ServiceWorker.buildStructuredNotificationObject(rawNotification);\n\n                // Never nest the following line in a callback from the point of entering from retrieveNotifications\n                notificationEventPromiseFns.push((notif => {\n                  return ServiceWorker.displayNotification(notif)\n                      .then(() => ServiceWorker.updateBackupNotification(notif).catch(e => log.error(e)))\n                      .then(() => {\n                        return ServiceWorker.workerMessenger.broadcast(WorkerMessengerCommand.NotificationDisplayed, notif).catch(e => log.error(e))\n                      })\n                      .then(() => ServiceWorker.executeWebhooks('notification.displayed', notif).catch(e => log.error(e)))\n                }).bind(null, notification));\n              }\n\n              return notificationEventPromiseFns.reduce((p, fn) => {\n                return p = p.then(fn);\n               }, Promise.resolve());\n            })\n            .catch(e => {\n              log.debug('Failed to display a notification:', e);\n              if (ServiceWorker.UNSUBSCRIBED_FROM_NOTIFICATIONS) {\n                log.debug('Because we have just unsubscribed from notifications, we will not show anything.');\n                return undefined;\n              } else {\n                log.debug(\n                    \"Because a notification failed to display, we'll display the last known notification, so long as it isn't the welcome notification.\");\n                return ServiceWorker.displayBackupNotification();\n              }\n            })\n    )\n  }\n\n  /**\n   * Makes a POST call to a specified URL to forward certain events.\n   * @param event The name of the webhook event. Affects the DB key pulled for settings and the final event the user\n   *              consumes.\n   * @param notification A JSON object containing notification details the user consumes.\n   * @returns {Promise}\n   */\n  static async executeWebhooks(event, notification) {\n    const {deviceId} = await Database.getSubscription();\n    const isServerCorsEnabled = await Database.get<boolean>('Options', 'webhooks.cors');\n    const webhookTargetUrl = await Database.get('Options', `webhooks.${event}`);\n\n    if (webhookTargetUrl) {\n      // JSON.stringify() does not include undefined values\n      // Our response will not contain those fields here which have undefined values\n      let postData = {\n        event: event,\n        id: notification.id,\n        userId: deviceId,\n        action: notification.action,\n        buttons: notification.buttons,\n        heading: notification.heading,\n        content: notification.content,\n        url: notification.url,\n        icon: notification.icon,\n        data: notification.data\n      };\n      let fetchOptions: any = {\n        method: 'post',\n        mode: 'no-cors',\n        body: JSON.stringify(postData),\n\n      };\n      if (isServerCorsEnabled) {\n        fetchOptions.mode = 'cors';\n        fetchOptions.headers = {\n          'X-OneSignal-Event': event,\n          'Content-Type': 'application/json'\n        };\n      }\n      log.debug(`Executing ${event} webhook ${isServerCorsEnabled ? 'with' : 'without'} CORS %cPOST ${webhookTargetUrl}`, getConsoleStyle('code'), ':', postData);\n      return await fetch(webhookTargetUrl, fetchOptions);\n    }\n  }\n\n  /**\n   * Gets an array of active window clients along with whether each window client is the HTTP site's iFrame or an\n   * HTTPS site page.\n   * An active window client is a browser tab that is controlled by the service worker.\n   * Technically, this list should only ever contain clients that are iFrames, or clients that are HTTPS site pages,\n   * and not both. This doesn't really matter though.\n   * @returns {Promise}\n   */\n  static async getActiveClients(): Promise<Array<WindowClient>> {\n    const windowClients: Array<WindowClient> = await self.clients.matchAll({ type: 'window', includeUncontrolled: true })\n    let activeClients: Array<WindowClient> = [];\n\n    for (let client of windowClients) {\n      // Test if this window client is the HTTP subdomain iFrame pointing to subdomain.onesignal.com\n      if (client.frameType && client.frameType === 'nested') {\n        // Subdomain iFrames point to 'https://subdomain.onesignal.com...'\n        if (!contains(client.url, SdkEnvironment.getOneSignalApiUrl().host) &&\n            !contains(client.url, '.os.tc')) {\n          continue;\n        }\n        // Indicates this window client is an HTTP subdomain iFrame\n        (client as any).isSubdomainIframe = true;\n      }\n      activeClients.push(client);\n    }\n\n    return activeClients;\n  }\n\n  /**\n   * Constructs a structured notification object from the raw notification fetched from OneSignal's server. This\n   * object is passed around from event to event, and is also returned to the host page for notification event details.\n   * Constructed in onPushReceived, and passed along to other event handlers.\n   * @param rawNotification The raw notification JSON returned from OneSignal's server.\n   */\n  static buildStructuredNotificationObject(rawNotification) {\n    let notification: any = {\n      id: rawNotification.custom.i,\n      heading: rawNotification.title,\n      content: rawNotification.alert,\n      data: rawNotification.custom.a,\n      url: rawNotification.custom.u,\n      icon: rawNotification.icon,\n      image: rawNotification.image,\n      tag: rawNotification.tag,\n      badge: rawNotification.badge,\n      vibrate: rawNotification.vibrate\n    };\n\n    // Add action buttons\n    if (rawNotification.o) {\n      notification.buttons = [];\n      for (let rawButton of rawNotification.o) {\n        notification.buttons.push({\n                                    action: rawButton.i,\n                                    title: rawButton.n,\n                                    icon: rawButton.p,\n                                    url: rawButton.u\n                                  });\n      }\n    }\n    return trimUndefined(notification);\n  }\n\n  /**\n   * Given an image URL, returns a proxied HTTPS image using the https://images.weserv.nl service.\n   * For a null image, returns null so that no icon is displayed.\n   * If the image protocol is HTTPS, or origin contains localhost or starts with 192.168.*.*, we do not proxy the image.\n   * @param imageUrl An HTTP or HTTPS image URL.\n   */\n  static ensureImageResourceHttps(imageUrl) {\n    if (imageUrl) {\n      try {\n        let parsedImageUrl = new URL(imageUrl);\n        if (parsedImageUrl.hostname === 'localhost' ||\n            parsedImageUrl.hostname.indexOf('192.168') !== -1 ||\n            parsedImageUrl.hostname === '127.0.0.1' ||\n            parsedImageUrl.protocol === 'https:') {\n          return imageUrl;\n        }\n        if (parsedImageUrl.hostname === 'i0.wp.com' ||\n            parsedImageUrl.hostname === 'i1.wp.com' ||\n            parsedImageUrl.hostname === 'i2.wp.com' ||\n            parsedImageUrl.hostname === 'i3.wp.com') {\n          /* Their site already uses Jetpack, just make sure Jetpack is HTTPS */\n          return `https://${parsedImageUrl.hostname}${parsedImageUrl.pathname}`\n        }\n        /* HTTPS origin hosts can be used by prefixing the hostname with ssl: */\n        let replacedImageUrl = parsedImageUrl.host + parsedImageUrl.pathname;\n        return `https://i0.wp.com/${replacedImageUrl}`;\n      } catch (e) { }\n    } else return null;\n  }\n\n  /**\n   * Given a structured notification object, HTTPS-ifies the notification icons and action button icons, if they exist.\n   */\n  static ensureNotificationResourcesHttps(notification) {\n    if (notification) {\n      if (notification.icon) {\n        notification.icon = ServiceWorker.ensureImageResourceHttps(notification.icon);\n      }\n      if (notification.image) {\n        notification.image = ServiceWorker.ensureImageResourceHttps(notification.image);\n      }\n      if (notification.buttons && notification.buttons.length > 0) {\n        for (let button of notification.buttons) {\n          if (button.icon) {\n            button.icon = ServiceWorker.ensureImageResourceHttps(button.icon);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Actually displays a visible notification to the user.\n   * Any event needing to display a notification calls this so that all the display options can be centralized here.\n   * @param notification A structured notification object.\n   */\n  static async displayNotification(notification, overrides?) {\n    log.debug(`Called %cdisplayNotification(${JSON.stringify(notification, null, 4)}):`, getConsoleStyle('code'), notification);\n\n    // Use the default title if one isn't provided\n    const defaultTitle = await ServiceWorker._getTitle();\n    // Use the default icon if one isn't provided\n    const defaultIcon = await Database.get('Options', 'defaultIcon');\n    // Get option of whether we should leave notification displaying indefinitely\n    const persistNotification = await Database.get('Options', 'persistNotification');\n    // Get app ID for tag value\n    const appId = await ServiceWorker.getAppId();\n\n    notification.heading = notification.heading ? notification.heading : defaultTitle;\n    notification.icon = notification.icon ? notification.icon : (defaultIcon ? defaultIcon : undefined);\n    var extra: any = {};\n    extra.tag = notification.tag || appId.toString();\n    if (persistNotification === 'force') {\n      extra.persistNotification = true;\n    } else {\n      extra.persistNotification = persistNotification;\n    }\n\n    // Allow overriding some values\n    if (!overrides)\n      overrides = {};\n    notification = objectAssign(notification, overrides);\n\n    ServiceWorker.ensureNotificationResourcesHttps(notification);\n\n    let notificationOptions = {\n      body: notification.content,\n      icon: notification.icon,\n      /*\n       On Chrome 56, a large image can be displayed:\n       https://bugs.chromium.org/p/chromium/issues/detail?id=614456\n       */\n      image: notification.image,\n      /*\n       On Chrome 44+, use this property to store extra information which\n       you can read back when the notification gets invoked from a\n       notification click or dismissed event. We serialize the\n       notification in the 'data' field and read it back in other events.\n       See:\n       https://developers.google.com/web/updates/2015/05/notifying-you-of-changes-to-notifications?hl=en\n       */\n      data: notification,\n      /*\n       On Chrome 48+, action buttons show below the message body of the\n       notification. Clicking either button takes the user to a link. See:\n       https://developers.google.com/web/updates/2016/01/notification-actions\n       */\n      actions: notification.buttons,\n      /*\n       Tags are any string value that groups notifications together. Two\n       or notifications sharing a tag replace each other.\n       */\n      tag: extra.tag,\n      /*\n       On Chrome 47+ (desktop), notifications will be dismissed after 20\n       seconds unless requireInteraction is set to true. See:\n       https://developers.google.com/web/updates/2015/10/notification-requireInteractiom\n       */\n      requireInteraction: extra.persistNotification,\n      /*\n       On Chrome 50+, by default notifications replacing\n       identically-tagged notifications no longer vibrate/signal the user\n       that a new notification has come in. This flag allows subsequent\n       notifications to re-alert the user. See:\n       https://developers.google.com/web/updates/2016/03/notifications\n       */\n      renotify: true,\n      /*\n       On Chrome 53+, returns the URL of the image used to represent the\n       notification when there is not enough space to display the\n       notification itself.\n\n       The URL of an image to represent the notification when there is not\n       enough space to display the notification itself such as, for\n       example, the Android Notification Bar. On Android devices, the\n       badge should accommodate devices up to 4x resolution, about 96 by\n       96 px, and the image will be automatically masked.\n       */\n      badge: notification.badge,\n      /*\n      A vibration pattern to run with the display of the notification. A\n      vibration pattern can be an array with as few as one member. The\n      values are times in milliseconds where the even indices (0, 2, 4,\n      etc.) indicate how long to vibrate and the odd indices indicate how\n      long to pause. For example [300, 100, 400] would vibrate 300ms,\n      pause 100ms, then vibrate 400ms.\n       */\n      vibrate: notification.vibrate\n    };\n\n    notificationOptions = ServiceWorker.filterNotificationOptions(notificationOptions, persistNotification === 'force');\n    return self.registration.showNotification(notification.heading, notificationOptions);\n  }\n\n  static filterNotificationOptions(options: any, forcePersistNotifications?: boolean): any {\n    /**\n     * Due to Chrome 59+ notifications on Mac OS X using the native toast style\n     * which limits the number of characters available to display the subdomain\n     * to 14 with requireInteraction and 28 without, we force Mac OS X Chrome\n     * notifications to be transient.\n     */\n    if (typeof options !== \"object\") {\n      return options;\n    } else {\n      const clone = objectAssign({}, options);\n\n      if (Browser.name === '' && Browser.version === '') {\n        var browser = (Browser as any)._detect(navigator.userAgent);\n      } else {\n        var browser: any = Browser;\n      }\n\n      if (browser.chrome &&\n        browser.mac &&\n        clone) {\n        clone.requireInteraction = false;\n      }\n      if (forcePersistNotifications) {\n        clone.requireInteraction = true;\n      }\n      return clone;\n    }\n  }\n\n  /**\n   * Stores the most recent notification into IndexedDB so that it can be shown as a backup if a notification fails\n   * to be displayed. This is to avoid Chrome's forced \"This site has been updated in the background\" message. See\n   * this post for more details: http://stackoverflow.com/a/35045513/555547.\n   * This is called every time is a push message is received so that the most recent message can be used as the\n   * backup notification.\n   * @param notification The most recent notification as a structured notification object.\n   */\n  static async updateBackupNotification(notification): Promise<void> {\n    let isWelcomeNotification = notification.data && notification.data.__isOneSignalWelcomeNotification;\n    // Don't save the welcome notification, that just looks broken\n    if (isWelcomeNotification)\n      return;\n    await Database.put('Ids', {type: 'backupNotification', id: notification});\n  }\n\n  /**\n   * Displays a fail-safe notification during a push event in case notification contents could not be retrieved.\n   * This is to avoid Chrome's forced \"This site has been updated in the background\" message. See this post for\n   * more details: http://stackoverflow.com/a/35045513/555547.\n   */\n  static displayBackupNotification() {\n    return Database.get('Ids', 'backupNotification')\n        .then(backupNotification => {\n          let overrides = {\n            // Don't persist our backup notification; users should ideally not see them\n            persistNotification: false,\n            data: {__isOneSignalBackupNotification: true}\n          };\n          if (backupNotification) {\n            return ServiceWorker.displayNotification(backupNotification, overrides);\n          } else {\n            return ServiceWorker.displayNotification({\n              content: 'You have new updates.'\n            }, overrides);\n          }\n        });\n  }\n\n  /**\n   * Returns false if the given URL matches a few special URLs designed to skip opening a URL when clicking a\n   * notification. Otherwise returns true and the link will be opened.\n   * @param url\n     */\n  static shouldOpenNotificationUrl(url) {\n    return (url !== 'javascript:void(0);' &&\n            url !== 'do_not_open' &&\n            !contains(url, '_osp=do_not_open'));\n  }\n\n  /**\n   * Occurs when a notification is dismissed by the user (clicking the 'X') or all notifications are cleared.\n   * Supported on: Chrome 50+ only\n   */\n  static onNotificationClosed(event) {\n    log.debug(`Called %conNotificationClosed(${JSON.stringify(event, null, 4)}):`, getConsoleStyle('code'), event);\n    let notification = event.notification.data;\n\n    ServiceWorker.workerMessenger.broadcast(WorkerMessengerCommand.NotificationDismissed, notification).catch(e => log.error(e))\n    event.waitUntil(\n        ServiceWorker.executeWebhooks('notification.dismissed', notification)\n    );\n  }\n\n  /**\n   * After clicking a notification, determines the URL to open based on whether an action button was clicked or the\n   * notification body was clicked.\n   */\n  static async getNotificationUrlToOpen(notification): Promise<string> {\n    // Defaults to the URL the service worker was registered\n    // TODO: This should be fixed for HTTP sites\n    let launchUrl = self.registration.scope;\n\n    // Use the user-provided default URL if one exists\n    const { defaultNotificationUrl: dbDefaultNotificationUrl } = await Database.getAppState();\n    if (dbDefaultNotificationUrl)\n      launchUrl = dbDefaultNotificationUrl;\n\n    // If the user clicked an action button, use the URL provided by the action button\n    // Unless the action button URL is null\n    if (notification.action) {\n      // Find the URL tied to the action button that was clicked\n      for (let button of notification.buttons) {\n        if (button.action === notification.action &&\n            button.url &&\n            button.url !== '') {\n          launchUrl = button.url;\n        }\n      }\n    } else if (notification.url &&\n               notification.url !== '') {\n      // The user clicked the notification body instead of an action button\n      launchUrl = notification.url;\n    }\n\n    return launchUrl;\n  }\n\n  /**\n   * Occurs when the notification's body or action buttons are clicked. Does not occur if the notification is\n   * dismissed by clicking the 'X' icon. See the notification close event for the dismissal event.\n   */\n  static async onNotificationClicked(event) {\n    log.debug(`Called %conNotificationClicked(${JSON.stringify(event, null, 4)}):`, getConsoleStyle('code'), event);\n\n    // Close the notification first here, before we do anything that might fail\n    event.notification.close();\n\n    const notification = event.notification.data;\n\n    // Chrome 48+: Get the action button that was clicked\n    if (event.action)\n      notification.action = event.action;\n\n    let notificationClickHandlerMatch = 'exact';\n    let notificationClickHandlerAction = 'navigate';\n\n    const matchPreference = await Database.get<string>('Options', 'notificationClickHandlerMatch');\n    if (matchPreference)\n      notificationClickHandlerMatch = matchPreference;\n\n    const actionPreference = await this.database.get<string>('Options', 'notificationClickHandlerAction');\n    if (actionPreference)\n      notificationClickHandlerAction = actionPreference;\n\n    const activeClients = await ServiceWorker.getActiveClients();\n\n    let launchUrl = await ServiceWorker.getNotificationUrlToOpen(notification);\n    let notificationOpensLink = ServiceWorker.shouldOpenNotificationUrl(launchUrl);\n\n    /*\n     Check if we can focus on an existing tab instead of opening a new url.\n     If an existing tab with exactly the same URL already exists, then this existing tab is focused instead of\n     an identical new tab being created. With a special setting, any existing tab matching the origin will\n     be focused instead of an identical new tab being created.\n     */\n    let doNotOpenLink = false;\n    for (let client of activeClients) {\n      let clientUrl = client.url;\n      if ((client as any).isSubdomainIframe) {\n        const lastKnownHostUrl = await Database.get<string>('Options', 'lastKnownHostUrl');\n        clientUrl = lastKnownHostUrl;\n        if (!lastKnownHostUrl) {\n          clientUrl = await Database.get<string>('Options', 'defaultUrl');\n        }\n      }\n      let clientOrigin = '';\n      try {\n        clientOrigin = new URL(clientUrl).origin;\n      } catch (e) {\n        log.error(`Failed to get the HTTP site's actual origin:`, e);\n      }\n      let launchOrigin = null;\n      try {\n        // Check if the launchUrl is valid; it can be null\n        launchOrigin = new URL(launchUrl).origin;\n      } catch (e) {\n      }\n\n      if ((notificationClickHandlerMatch === 'exact' && clientUrl === launchUrl) ||\n        (notificationClickHandlerMatch === 'origin' && clientOrigin === launchOrigin)) {\n        if ((client['isSubdomainIframe'] && clientUrl === launchUrl) ||\n            (!client['isSubdomainIframe'] && client.url === launchUrl) ||\n          (notificationClickHandlerAction === 'focus' && clientOrigin === launchOrigin)) {\n          ServiceWorker.workerMessenger.unicast(WorkerMessengerCommand.NotificationClicked, notification, client);\n            try {\n              await client.focus();\n            } catch (e) {\n              log.error(\"Failed to focus:\", client, e);\n            }\n        } else {\n          /*\n          We must focus first; once the client navigates away, it may not be to a service worker-controlled page, and\n          the client ID may change, making it unable to focus.\n\n          client.navigate() is available on Chrome 49+ and Firefox 50+.\n           */\n          if (client['isSubdomainIframe']) {\n            try {\n              log.debug('Client is subdomain iFrame. Attempting to focus() client.')\n              await client.focus();\n            } catch (e) {\n              log.error(\"Failed to focus:\", client, e);\n            }\n            if (notificationOpensLink) {\n              log.debug(`Redirecting HTTP site to ${launchUrl}.`);\n              await Database.put(\"NotificationOpened\", { url: launchUrl, data: notification, timestamp: Date.now() });\n              ServiceWorker.workerMessenger.unicast(WorkerMessengerCommand.RedirectPage, launchUrl, client);\n            } else {\n              log.debug('Not navigating because link is special.')\n            }\n          }\n          else if (client.navigate) {\n            try {\n              log.debug('Client is standard HTTPS site. Attempting to focus() client.')\n              await client.focus();\n            } catch (e) {\n              log.error(\"Failed to focus:\", client, e);\n            }\n            try {\n              if (notificationOpensLink) {\n                log.debug(`Redirecting HTTPS site to (${launchUrl}).`)\n                await Database.put(\"NotificationOpened\", { url: launchUrl, data: notification, timestamp: Date.now() });\n                await client.navigate(launchUrl);\n              } else {\n                log.debug('Not navigating because link is special.')\n              }\n            } catch (e) {\n              log.error(\"Failed to navigate:\", client, launchUrl, e);\n            }\n          } else {\n            /*\n            If client.navigate() isn't available, we have no other option but to open a new tab to the URL.\n             */\n            await Database.put(\"NotificationOpened\", { url: launchUrl, data: notification, timestamp: Date.now() });\n            await ServiceWorker.openUrl(launchUrl);\n          }\n        }\n        doNotOpenLink = true;\n        break;\n      }\n    }\n\n    if (notificationOpensLink && !doNotOpenLink) {\n      await Database.put(\"NotificationOpened\", { url: launchUrl, data: notification, timestamp: Date.now() });\n      await ServiceWorker.openUrl(launchUrl);\n    }\n\n    const { appId } = await Database.getAppConfig();\n    const { deviceId } = await Database.getSubscription();\n    if (appId && deviceId) {\n      await OneSignalApi.put('notifications/' + notification.id, {\n        app_id: appId.toString(),\n        player_id: deviceId.toString(),\n        opened: true\n      });\n    }\n    return await ServiceWorker.executeWebhooks('notification.clicked', notification);\n  }\n\n  /**\n   * Attempts to open the given url in a new browser tab. Called when a notification is clicked.\n   * @param url May not be well-formed.\n   */\n  static async openUrl(url): Promise<WindowClient> {\n    log.debug('Opening notification URL:', url);\n    try {\n      return await self.clients.openWindow(url);\n    } catch (e) {\n      log.warn(`Failed to open the URL '${url}':`, e);\n      return undefined;\n    }\n  }\n\n  static onServiceWorkerInstalled(event) {\n    // At this point, the old service worker is still in control\n    event.waitUntil(self.skipWaiting());\n  }\n\n  /*\n   1/11/16: Enable the waiting service worker to immediately become the active service worker: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/skipWaiting\n   */\n  static onServiceWorkerActivated(event) {\n    // The old service worker is gone now\n    log.info(`%cOneSignal Service Worker activated (version ${Environment.version()}, ${SdkEnvironment.getWindowEnv().toString()} environment).`, getConsoleStyle('bold'));\n    event.waitUntil(self.clients.claim());\n  }\n\n  static async onPushSubscriptionChange(event: PushSubscriptionChangeEvent) {\n    log.debug(`Called %conPushSubscriptionChange(${JSON.stringify(event, null, 4)}):`, getConsoleStyle('code'), event);\n\n    const appId = await ServiceWorker.getAppId();\n    if (!appId || !appId.value) {\n      // Without an app ID, we can't make any calls\n      return;\n    }\n    const appConfig = await new ConfigManager().getAppConfig({\n      appId: appId.value\n    });\n    if (!appConfig) {\n      // Without a valid app config (e.g. deleted app), we can't make any calls\n      return;\n    }\n    const context = new Context(appConfig);\n\n    // Get our current device ID\n    let deviceIdExists: boolean;\n    {\n      let { deviceId } = await Database.getSubscription();\n      deviceIdExists = !!(deviceId && deviceId.value);\n      if (!deviceIdExists && event.oldSubscription) {\n        // We don't have the device ID stored, but we can look it up from our old subscription\n        deviceId = await OneSignalApi.getUserIdFromSubscriptionIdentifier(\n          appId.value,\n          PushDeviceRecord.prototype.getDeliveryPlatform(),\n          event.oldSubscription.endpoint\n        );\n\n        // Store the device ID, so it can be looked up when subscribing\n        const subscription = await Database.getSubscription();\n        subscription.deviceId = deviceId;\n        await Database.setSubscription(subscription);\n      }\n      deviceIdExists = !!(deviceId && deviceId.value);\n    }\n\n    // Get our new push subscription\n    let rawPushSubscription: RawPushSubscription;\n\n    // Set it initially by the provided new push subscription\n    const providedNewSubscription = event.newSubscription;\n    if (providedNewSubscription) {\n      rawPushSubscription = RawPushSubscription.setFromW3cSubscription(providedNewSubscription);\n    } else {\n      // Otherwise set our push registration by resubscribing\n      try {\n        rawPushSubscription = await context.subscriptionManager.subscribe(SubscriptionStrategyKind.SubscribeNew);\n      } catch (e) {\n        // Let rawPushSubscription be null\n      }\n    }\n    const hasNewSubscription = !!rawPushSubscription;\n\n    if (!deviceIdExists && !hasNewSubscription) {\n      await Database.remove('Ids', 'userId');\n      await Database.remove('Ids', 'registrationId');\n    } else {\n      /*\n        Determine subscription state we should set new record to.\n\n        If the permission is revoked, we should set the subscription state to permission revoked.\n       */\n      let subscriptionState: null | SubscriptionStateKind = null;\n      const pushPermission = await navigator.permissions.query({name:'push', userVisibleOnly:true});\n      if (pushPermission !== \"granted\") {\n        subscriptionState = SubscriptionStateKind.PermissionRevoked;\n      } else if (!rawPushSubscription) {\n        /*\n          If it's not a permission revoked issue, the subscription expired or was revoked by the\n          push server.\n         */\n        subscriptionState = SubscriptionStateKind.PushSubscriptionRevoked;\n      }\n\n      // rawPushSubscription may be null if no push subscription was retrieved\n      await context.subscriptionManager.registerSubscription(\n        rawPushSubscription,\n        subscriptionState\n      );\n    }\n  }\n\n  /**\n   * Returns a promise that is fulfilled with either the default title from the database (first priority) or the page title from the database (alternate result).\n   */\n  static _getTitle() {\n    return new Promise(resolve => {\n      Promise.all([Database.get('Options', 'defaultTitle'), Database.get('Options', 'pageTitle')])\n        .then(([defaultTitle, pageTitle]) => {\n          if (defaultTitle !== null) {\n            resolve(defaultTitle);\n          }\n          else if (pageTitle != null) {\n            resolve(pageTitle);\n          }\n          else {\n            resolve('');\n          }\n        });\n    });\n  }\n\n  /**\n   * Returns an array of raw notification objects, either fetched from the server (as from legacy GCM push), or read\n   * from the event.data.payload property (as from the new web push protocol).\n   * @param event\n   * @returns An array of notifications. The new web push protocol will only ever contain one notification, however\n   * an array is returned for backwards compatibility with the rest of the service worker plumbing.\n     */\n  static parseOrFetchNotifications(event) {\n    if (event.data) {\n      const isValidPayload = ServiceWorker.isValidPushPayload(event.data);\n      if (isValidPayload) {\n        log.debug('Received a valid encrypted push payload.');\n        return Promise.resolve([event.data.json()]);\n      } else {\n        return Promise.reject('Unexpected push message payload received: ' + event.data.text());\n        /*\n         We received a push message payload from another service provider or a malformed\n         payload. The last received notification will be displayed.\n         */\n      }\n    }\n    else return ServiceWorker.retrieveNotifications();\n  }\n\n  /**\n   * Returns true if the raw data payload is a OneSignal push message in the format of the new web push protocol.\n   * Otherwise returns false.\n   * @param rawData The raw PushMessageData from the push event's event.data, not already parsed to JSON.\n   */\n  static isValidPushPayload(rawData) {\n    try {\n      const payload = rawData.json();\n      if (payload &&\n          payload.custom &&\n          payload.custom.i &&\n          isValidUuid(payload.custom.i)) {\n        return true;\n      } else {\n        log.debug('isValidPushPayload: Valid JSON but missing notification UUID:', payload);\n        return false;\n      }\n    } catch (e) {\n      log.debug('isValidPushPayload: Parsing to JSON failed with:', e);\n      return false;\n    }\n  }\n\n  /**\n   * Retrieves unread notifications from OneSignal's servers. For Chrome and Firefox's legacy web push protocol,\n   * a push signal is sent to the service worker without any message contents, and the service worker must retrieve\n   * the contents from OneSignal's servers. In Chrome and Firefox's new web push protocols involving payloads, the\n   * notification contents will arrive with the push signal. The legacy format must be supported for a while.\n   */\n  static retrieveNotifications() {\n    return new Promise(resolve => {\n      var notifications = [];\n      // Each entry is like:\n      /*\n       Object {custom: Object, icon: \"https://onesignal.com/images/notification_logo.png\", alert: \"asd\", title: \"ss\"}\n       alert: \"asd\"\n       custom: Object\n       i: \"6d7ec82f-bc56-494f-b73a-3a3b48baa2d8\"\n       __proto__: Object\n       icon: \"https://onesignal.com/images/notification_logo.png\"\n       title: \"ss\"\n       __proto__: Object\n       */\n      Database.get('Ids', 'userId')\n        .then(userId => {\n          if (userId) {\n            log.debug(`Legacy push signal received, retrieving contents from players/${userId}/chromeweb_notification`);\n            return OneSignalApi.get(`players/${userId}/chromeweb_notification`);\n          }\n          else {\n            log.debug('Tried to get notification contents, but IndexedDB is missing user ID info.');\n            return Promise.all([\n                    ServiceWorker.getAppId(),\n                    self.registration.pushManager.getSubscription().then(subscription => subscription.endpoint)\n                  ])\n                .then(([appId, identifier]) => {\n                  let deviceType = PushDeviceRecord.prototype.getDeliveryPlatform();\n                  // Get the user ID from OneSignal\n                  return OneSignalApi.getUserIdFromSubscriptionIdentifier(appId.toString(), deviceType, identifier).then(recoveredUserId => {\n                    if (recoveredUserId) {\n                      log.debug('Recovered OneSignal user ID:', recoveredUserId);\n                      // We now have our OneSignal user ID again\n                      return Promise.all([\n                        Database.put('Ids', {type: 'userId', id: recoveredUserId}),\n                        Database.put('Ids', {\n                          type: 'registrationId',\n                          id: (identifier as string).replace(new RegExp(\"^(https://android.googleapis.com/gcm/send/|https://updates.push.services.mozilla.com/push/)\"), \"\")\n                        }),\n                      ]).then(() => {\n                        // Try getting the notification again\n                        log.debug('Attempting to retrieve the notification again now with a recovered user ID.');\n                        return OneSignalApi.get(`players/${recoveredUserId}/chromeweb_notification`);\n                      });\n                    } else {\n                      return Promise.reject('Recovered user ID was null. Unsubscribing from push notifications.');\n                    }\n                  });\n                })\n                .catch(error => {\n                  log.debug('Unsuccessfully attempted to recover OneSignal user ID:', error);\n                  // Actually unsubscribe from push so this user doesn't get bothered again\n                  return self.registration.pushManager.getSubscription()\n                      .then(subscription => {\n                        return subscription.unsubscribe()\n                      })\n                      .then (unsubscriptionResult => {\n                        log.debug('Unsubscribed from push notifications result:', unsubscriptionResult);\n                        ServiceWorker.UNSUBSCRIBED_FROM_NOTIFICATIONS = true;\n                      });\n                });\n          }\n        })\n        .then((response: any) => {\n          // The response is an array literal -- response.json() has been called by apiCall()\n          // The result looks like this:\n          // OneSignalApi.get('players/7442a553-5f61-4b3e-aedd-bb574ef6946f/chromeweb_notification').then(function(response) { log.debug(response); });\n          // [\"{\"custom\":{\"i\":\"6d7ec82f-bc56-494f-b73a-3a3b48baa2d8\"},\"icon\":\"https://onesignal.com/images/notification_logo.png\",\"alert\":\"asd\",\"title\":\"ss\"}\"]\n          // ^ Notice this is an array literal with JSON data inside\n          for (var i = 0; i < response.length; i++) {\n            notifications.push(JSON.parse(response[i]));\n          }\n          if (notifications.length == 0) {\n            log.warn('OneSignal Worker: Received a GCM push signal, but there were no messages to retrieve. Are you' +\n                ' using the wrong API URL?', SdkEnvironment.getOneSignalApiUrl().toString());\n          }\n          resolve(notifications);\n        });\n    });\n  }\n}\n\n// Expose this class to the global scope\nif (typeof self === \"undefined\" &&\n    typeof global !== \"undefined\") {\n  (global as any).OneSignalWorker = ServiceWorker;\n} else {\n  (self as any).OneSignalWorker = ServiceWorker;\n}\n\n// Set logging to the appropriate level\nlog.setDefaultLevel(SdkEnvironment.getBuildEnv() === BuildEnvironmentKind.Development ? (log as any).levels.TRACE : (log as any).levels.ERROR);\n\n// Run our main file\nif (typeof self !== \"undefined\") {\n  ServiceWorker.run();\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslib/tslib.es6.js\n// module id = 0\n// module chunks = 0","/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n\n    function realMethod(methodName) {\n        if (typeof console === undefinedType) {\n            return false; // We can't build a real method without a console to log to\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // these private functions always need `this` to be set properly\n\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n    }\n\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      var storageKey = \"loglevel\";\n      if (name) {\n        storageKey += \":\" + name;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      /*\n       *\n       * Public API\n       *\n       */\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Package-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if (typeof name !== \"string\" || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    return defaultLogger;\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/loglevel/lib/loglevel.js\n// module id = 1\n// module chunks = 0","import { BuildEnvironmentKind } from '../models/BuildEnvironmentKind';\nimport { TestEnvironmentKind } from '../models/TestEnvironmentKind';\nimport { WindowEnvironmentKind } from '../models/WindowEnvironmentKind';\nimport { InvalidArgumentError, InvalidArgumentReason } from '../errors/InvalidArgumentError';\nimport NotImplementedError from '../errors/NotImplementedError';\nimport SubscriptionHelper from \"../helpers/SubscriptionHelper\";\nimport { IntegrationKind } from \"../models/IntegrationKind\";\nimport Context from \"../models/Context\";\n\nexport default class SdkEnvironment {\n  /**\n   * Returns development, staging, or production.\n   *\n   * The magic constants used to detect the environment is set or unset when\n   * building the SDK.\n   */\n  static getBuildEnv(): BuildEnvironmentKind {\n    if (typeof __DEV__ !== undefined && __DEV__) {\n      return BuildEnvironmentKind.Development;\n    } else if (typeof __STAGING__ !== undefined && __STAGING__) {\n      return BuildEnvironmentKind.Staging;\n    } else {\n      return BuildEnvironmentKind.Production;\n    }\n  }\n\n  /**\n   * Determines whether the current frame context executing this function is part of a:\n   *\n   *  a) HTTP site using a proxy subscription origin\n   *\n   *  b) or, HTTPS site using a proxy subscription origin\n   *\n   *  c) or, HTTPS site using its own origin for subscribing\n   *\n   * The determination affects permissions and subscription:\n   *\n   *  a) Because the parent (top frame) of the proxy origin frame is HTTP, the entire context is\n   *  insecure. In the proxy origin frame, notification permissions are always \"denied\", access to\n   *  the service worker's registration throws a security error, and no service worker controls the\n   *  proxy origin frame.\n   *\n   *  b) The context is secure. In the proxy origin frame, notification permissions are \"granted\" if\n   *  actually granted otherwise \"denied\" if either unprompted or blocked. The service worker\n   *  controls the proxy origin frame and access to the service worker's registration is allowed.\n   *  Requesting permissions from child frames is not allowed. Subscribing from child frames wasn't\n   *  allowed but is now allowed.\n   *\n   *  c) All features are allowed.\n   *\n   * @param usingProxyOrigin Using a subdomain of os.tc or onesignal.com for subscribing to push.\n   */\n  static async getIntegration(usingProxyOrigin?: boolean): Promise<IntegrationKind> {\n    const isTopFrame = (window === window.top);\n    const isHttpsProtocol = window.location.protocol === \"https:\";\n\n    // For convenience, try to look up usingProxyOrigin instead of requiring it to be passed in\n    if (typeof usingProxyOrigin === \"undefined\") {\n      if (typeof OneSignal !== \"undefined\") {\n        const context: Context = OneSignal.context;\n\n        if (context) {\n          usingProxyOrigin = !!context.appConfig.subdomain;\n        }\n      } else throw new InvalidArgumentError(\"usingProxyOrigin\", InvalidArgumentReason.Empty);\n    }\n\n    /*\n      Executing from the top frame, we can easily determine whether we're HTTPS or HTTP.\n\n      Executing from a child frame of any depth, we can check the current frame's protocol. If it's\n      HTTP it's definitely insecure. If it's HTTPS, we attempt to call\n      ServiceWorkerContainer.getRegistration and see if the call throws an error or succeeds. If the\n      call throws an error, we can assume some parent frame in the chain above us is insecure.\n     */\n    if (isTopFrame) {\n      if (isHttpsProtocol) {\n        return usingProxyOrigin ?\n          IntegrationKind.SecureProxy :\n          IntegrationKind.Secure;\n      } else {\n        /* The case of HTTP and not using a proxy origin isn't possible, because the SDK will throw\n        an initialization error stating a proxy origin is required for HTTP sites. */\n        return IntegrationKind.InsecureProxy;\n      }\n    } else {\n      if (isHttpsProtocol) {\n        /* Check whether any parent frames are insecure */\n        const isFrameContextInsecure = await SubscriptionHelper.isFrameContextInsecure();\n        if (isFrameContextInsecure) {\n          return IntegrationKind.InsecureProxy;\n        } else {\n          return usingProxyOrigin ?\n          IntegrationKind.SecureProxy :\n          IntegrationKind.Secure;\n        }\n      } else {\n        /*\n        Because this frame is insecure, the entire chain is insecure.\n\n        The case of HTTP and not using a proxy origin isn't possible, because the SDK will throw an\n        initialization error stating a proxy origin is required for HTTP sites. */\n        return IntegrationKind.InsecureProxy;\n      }\n    }\n  }\n\n  /**\n   * Describes the current frame context.\n   */\n  static getWindowEnv(): WindowEnvironmentKind {\n    if (typeof window === \"undefined\") {\n      if (typeof self !== \"undefined\" && typeof self.registration !== \"undefined\") {\n        return WindowEnvironmentKind.ServiceWorker;\n      } else {\n        return WindowEnvironmentKind.Unknown;\n      }\n    }\n    else {\n      // If the window is the root top-most level\n      if (window === window.top) {\n        if (location.href.indexOf(\"initOneSignal\") !== -1 ||\n          (location.pathname === '/subscribe' &&\n            location.search === '') &&\n          (\n            location.hostname.endsWith('.onesignal.com') ||\n            location.hostname.endsWith('.os.tc') ||\n            (location.hostname.indexOf('.localhost') !== -1 && SdkEnvironment.getBuildEnv() === BuildEnvironmentKind.Development)\n          )\n        ) {\n          return WindowEnvironmentKind.OneSignalSubscriptionPopup;\n        }\n        else {\n          return WindowEnvironmentKind.Host;\n        }\n      }\n      else if (location.pathname === '/webPushIframe') {\n        return WindowEnvironmentKind.OneSignalProxyFrame;\n      } else if (location.pathname === '/webPushModal') {\n        return WindowEnvironmentKind.OneSignalSubscriptionModal;\n      }\n      else {\n        return WindowEnvironmentKind.CustomIframe;\n      }\n    }\n  }\n\n  /**\n   * Describes whether the SDK is built in tests mode or not.\n   *\n   * This method is overriden when tests are run.\n   */\n  static getTestEnv(): TestEnvironmentKind {\n    return TestEnvironmentKind.None;\n  }\n\n  /**\n   * Returns build-specific prefixes used for operations like registering the\n   * service worker.\n   *\n   * For example, in staging the registered service worker filename is\n   * Staging-OneSignalSDKWorker.js.\n   */\n  static getBuildEnvPrefix(buildEnv: BuildEnvironmentKind = SdkEnvironment.getBuildEnv()) : string {\n    switch (buildEnv) {\n      case BuildEnvironmentKind.Development:\n        return 'Dev-';\n      case BuildEnvironmentKind.Staging:\n        return 'Staging-';\n      case BuildEnvironmentKind.Production:\n        return '';\n      default:\n        throw new InvalidArgumentError('buildEnv', InvalidArgumentReason.EnumOutOfRange);\n    }\n  }\n\n  /**\n   * Returns the URL object representing the components of OneSignal's API\n   * endpoint.\n   */\n  static getOneSignalApiUrl(buildEnv: BuildEnvironmentKind = SdkEnvironment.getBuildEnv()): URL {\n    switch (buildEnv) {\n      case BuildEnvironmentKind.Development:\n        return new URL('https://localhost:3001/api/v1');\n      case BuildEnvironmentKind.Staging:\n        return new URL('https://onesignal-staging.pw/api/v1');\n      case BuildEnvironmentKind.Production:\n        return new URL('https://onesignal.com/api/v1');\n      default:\n        throw new InvalidArgumentError('buildEnv', InvalidArgumentReason.EnumOutOfRange);\n    }\n  }\n}\n","import * as Browser from 'bowser';\nimport * as log from 'loglevel';\n\nimport Environment from './Environment';\nimport TimeoutError from './errors/TimeoutError';\nimport SubscriptionHelper from './helpers/SubscriptionHelper';\nimport SdkEnvironment from './managers/SdkEnvironment';\nimport { WindowEnvironmentKind } from './models/WindowEnvironmentKind';\nimport Database from './services/Database';\n\n\nexport function isArray(variable) {\n  return Object.prototype.toString.call( variable ) === '[object Array]';\n}\n\nvar decodeTextArea = null;\nexport function decodeHtmlEntities(text) {\n  if (Environment.isBrowser()) {\n    if (!decodeTextArea) {\n      decodeTextArea = document.createElement(\"textarea\");\n    }\n  }\n  if (decodeTextArea) {\n    decodeTextArea.innerHTML = text;\n    return decodeTextArea.value;\n  } else {\n    // Not running in a browser environment, text cannot be decoded\n    return text;\n  }\n}\n\nexport function redetectBrowserUserAgent(): Browser.IBowser  {\n    /*\n   TODO: Make this a little neater\n   During testing, the browser object may be initialized before the userAgent is injected\n  */\n  if (Browser.name === '' && Browser.version === '') {\n    var browser = Browser._detect(navigator.userAgent);\n  } else {\n    var browser = Browser;\n  }\n  return browser;\n}\n\nexport function isPushNotificationsSupported() {\n  /**\n   * It's possible a browser's user agent is modified, so we do some basic feature detection to make sure initializing\n   * the SDK won't fail. Promises are required to initialize the SDK.\n   */\n  if (typeof (window as any).Promise === \"undefined\") {\n    return false;\n  }\n\n  const browser = redetectBrowserUserAgent();\n  let userAgent = navigator.userAgent || '';\n\n  if (!browser.safari && typeof navigator.serviceWorker === \"undefined\") {\n    /**\n     * Browsers like Firefox Extended Support Release don't support service workers\n     */\n    return false;\n  }\n\n  if (browser.ios || (<any>browser).ipod || (<any>browser).iphone || (<any>browser).ipad)\n    return false;\n\n  if (browser.msie)\n    return false;\n\n    // Microsoft Edge\n  if (browser.msedge && Number(browser.version) >= 17.17063)\n    return true;\n\n  // Facebook in-app browser\n  if ((userAgent.indexOf(\"FBAN\") > -1) || (userAgent.indexOf(\"FBAV\") > -1)) {\n    return false;\n  }\n\n  // Android Chrome WebView\n  if (navigator.appVersion.match(/ wv/))\n    return false;\n\n  /* Firefox on Android push notifications not supported until at least 48: https://bugzilla.mozilla.org/show_bug.cgi?id=1206207#c6 */\n  if (browser.firefox && Number(browser.version) < 48 && (browser.mobile || browser.tablet)) {\n    return false;\n  }\n\n  if (browser.firefox && Number(browser.version) >= 44)\n    return true;\n\n  if (browser.safari && Number(browser.version) >= 7.1)\n    return true;\n\n  // Web push is supported in Samsung Internet for Android 4.0+\n  // http://developer.samsung.com/internet/android/releases\n  if ((browser as any).samsungBrowser && Number(browser.version) >= 4) {\n    return true;\n  }\n\n  if ((browser.chrome || (<any>browser).chromium) && Number(browser.version) >= 42)\n    return true;\n\n  if ((<any>browser).yandexbrowser && Number(browser.version) >= 15.12)\n    // 17.3.1.838 supports VAPID on Mac OS X\n    return true;\n\n  // https://www.chromestatus.com/feature/5416033485586432\n  if (browser.opera && (browser.mobile || browser.tablet) && Number(browser.version) >= 37 ||\n    browser.opera && Number(browser.version) >= 42)\n    return true;\n\n  // The earliest version of Vivaldi uses around Chrome 50\n  if ((browser as any).vivaldi)\n    return true;\n\n  return false;\n}\n\nexport function isChromeLikeBrowser() {\n  return Browser.chrome ||\n         (Browser as any).chromium ||\n         (Browser as any).opera ||\n         (Browser as any).yandexbrowser;\n}\n\nexport function removeDomElement(selector) {\n  var els = document.querySelectorAll(selector);\n  if (els.length > 0) {\n    for (let i = 0; i < els.length; i++)\n      els[i].parentNode.removeChild(els[i]);\n  }\n}\n\n/**\n * Helper method for public APIs that waits until OneSignal is initialized, rejects if push notifications are\n * not supported, and wraps these tasks in a Promise.\n */\nexport function awaitOneSignalInitAndSupported() {\n  return new Promise(resolve => {\n    if (!OneSignal.initialized) {\n      OneSignal.once(OneSignal.EVENTS.SDK_INITIALIZED, resolve);\n    } else {\n      resolve();\n    }\n  });\n}\n\n/**\n * JSON.stringify() but converts functions to \"[Function]\" so they aren't lost.\n * Helps when logging method calls.\n */\nexport function stringify(obj) {\n  return JSON.stringify(obj, (_, value) => {\n    if (typeof value === 'function') {\n      return \"[Function]\";\n    }\n    else {\n      return value;\n    }\n  }, 4);\n}\n\nexport function executeCallback<T>(callback: Action<T>, ...args: any[]) {\n  if (callback) {\n    return callback.apply(null, args);\n  }\n}\n\nexport function logMethodCall(methodName: string, ...args) {\n  return log.debug(`Called %c${methodName}(${args.map(stringify).join(', ')})`, getConsoleStyle('code'), '.');\n}\n\nexport function isValidEmail(email) {\n  return !!email &&\n         !!email.match(/(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/)\n}\n\nexport function addDomElement(targetSelectorOrElement, addOrder, elementHtml) {\n  if (typeof targetSelectorOrElement === 'string')\n    document.querySelector(targetSelectorOrElement).insertAdjacentHTML(addOrder, elementHtml);\n  else if (typeof targetSelectorOrElement === 'object')\n    targetSelectorOrElement.insertAdjacentHTML(addOrder, elementHtml);\n  else\n    throw new Error(`${targetSelectorOrElement} must be a CSS selector string or DOM Element object.`);\n}\n\nexport function clearDomElementChildren(targetSelectorOrElement) {\n  if (typeof targetSelectorOrElement === 'string') {\n    var element = document.querySelector(targetSelectorOrElement);\n    while (element.firstChild) {\n      element.removeChild(element.firstChild);\n    }\n  }\n  else if (typeof targetSelectorOrElement === 'object') {\n    while (targetSelectorOrElement.firstChild) {\n      targetSelectorOrElement.removeChild(targetSelectorOrElement.firstChild);\n    }\n  }\n  else\n    throw new Error(`${targetSelectorOrElement} must be a CSS selector string or DOM Element object.`);\n}\n\nexport function addCssClass(targetSelectorOrElement, cssClass) {\n  if (typeof targetSelectorOrElement === 'string')\n    document.querySelector(targetSelectorOrElement).classList.add(cssClass);\n  else if (typeof targetSelectorOrElement === 'object')\n    targetSelectorOrElement.classList.add(cssClass);\n  else\n    throw new Error(`${targetSelectorOrElement} must be a CSS selector string or DOM Element object.`);\n}\n\nexport function removeCssClass(targetSelectorOrElement, cssClass) {\n  if (typeof targetSelectorOrElement === 'string')\n    document.querySelector(targetSelectorOrElement).classList.remove(cssClass);\n  else if (typeof targetSelectorOrElement === 'object')\n    targetSelectorOrElement.classList.remove(cssClass);\n  else\n    throw new Error(`${targetSelectorOrElement} must be a CSS selector string or DOM Element object.`);\n}\n\nexport function hasCssClass(targetSelectorOrElement, cssClass) {\n  if (typeof targetSelectorOrElement === 'string')\n    return document.querySelector(targetSelectorOrElement).classList.contains(cssClass);\n  else if (typeof targetSelectorOrElement === 'object')\n    return targetSelectorOrElement.classList.contains(cssClass);\n  else\n    throw new Error(`${targetSelectorOrElement} must be a CSS selector string or DOM Element object.`);\n}\n\nvar DEVICE_TYPES = {\n  CHROME: 5,\n  SAFARI: 7,\n  FIREFOX: 8,\n  EDGE: 12,\n  UNKNOWN: -99\n};\n\nexport function getConsoleStyle(style) {\n  if (style == 'code') {\n    return `padding: 0 1px 1px 5px;border: 1px solid #ddd;border-radius: 3px;font-family: Monaco,\"DejaVu Sans Mono\",\"Courier New\",monospace;color: #444;`;\n  } else if (style == 'bold') {\n    return `font-weight: 600;color: rgb(51, 51, 51);`;\n  } else if (style == 'alert') {\n    return `font-weight: 600;color: red;`;\n  } else if (style == 'event') {\n    return `color: green;`;\n  } else if (style == 'postmessage') {\n    return `color: orange;`;\n  } else if (style == 'serviceworkermessage') {\n    return `color: purple;`;\n  } else {\n    return '';\n  }\n}\n\n/**\n * Returns a promise for the setTimeout() method.\n * @param durationMs\n * @returns {Promise} Returns a promise that resolves when the timeout is complete.\n */\nexport function delay(durationMs) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, durationMs)\n  });\n}\n\nexport function nothing(): Promise<any> {\n  return Promise.resolve();\n}\n\nexport function timeoutPromise(promise: Promise<any>, milliseconds: number): Promise<TimeoutError | any> {\n  const timeoutPromise = new Promise((_, reject) => {\n    setTimeout(() => {\n      reject(new TimeoutError())\n    }, milliseconds);\n  });\n  return Promise.race([promise, timeoutPromise]);\n}\n\nexport function when(condition, promiseIfTrue, promiseIfFalse) {\n  if (promiseIfTrue === undefined)\n    promiseIfTrue = nothing();\n  if (promiseIfFalse === undefined)\n    promiseIfFalse = nothing();\n  return (condition ? promiseIfTrue : promiseIfFalse);\n}\n\n/**\n * Returns true if match is in string; otherwise, returns false.\n */\nexport function contains(indexOfAble, match) {\n  if (!indexOfAble)\n    return false;\n  return indexOfAble.indexOf(match) !== -1;\n}\n\n/**\n * Returns the current object without keys that have undefined values.\n * Regardless of whether the return result is used, the passed-in object is destructively modified.\n * Only affects keys that the object directly contains (i.e. not those inherited via the object's prototype).\n * @param object\n */\nexport function trimUndefined(object) {\n  for (var property in object) {\n    if (object.hasOwnProperty(property)) {\n      if (object[property] === undefined) {\n        delete object[property];\n      }\n    }\n  }\n  return object;\n}\n\nexport function getRandomUuid(): string {\n  let uuidStr = '';\n  const crypto = typeof window === 'undefined' ? (global as any).crypto : window.crypto || (<any>window).msCrypto;\n  if (crypto) {\n    uuidStr = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r = (crypto.getRandomValues(new Uint8Array(1))[0] % 16) | 0,\n        v = c == 'x' ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  } else {\n    uuidStr = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r = (Math.random() * 16) | 0,\n        v = c == 'x' ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  }\n  return uuidStr;\n}\n\n/**\n * Returns true if the UUID is a string of 36 characters;\n * @param uuid\n * @returns {*|boolean}\n */\nexport function isValidUuid(uuid) {\n  return /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/.test(uuid);\n}\n\nexport function getUrlQueryParam(name) {\n  let url = window.location.href;\n  url = url.toLowerCase(); // This is just to avoid case sensitiveness\n  name = name.replace(/[\\[\\]]/g, \"\\\\$&\").toLowerCase();// This is just to avoid case sensitiveness for query parameter name\n  var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n    results = regex.exec(url);\n  if (!results) return null;\n  if (!results[2]) return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n}\n\n/**\n * Wipe OneSignal-related IndexedDB data on the \"correct\" computed origin, but OneSignal must be initialized first to use.\n */\nexport function wipeIndexedDb() {\n  log.warn('OneSignal: Wiping IndexedDB data.');\n  return Promise.all([\n    Database.remove('Ids'),\n    Database.remove('NotificationOpened'),\n    Database.remove('Options')\n  ]);\n}\n\n/**\n * Capitalizes the first letter of the string.\n * @returns {string} The string with the first letter capitalized.\n */\nexport function capitalize(text): string {\n  return text.charAt(0).toUpperCase() + text.slice(1);\n}\n\n/**\n * Unsubscribe from push notifications without removing the active service worker.\n */\nexport function unsubscribeFromPush() {\n  log.warn('OneSignal: Unsubscribing from push.');\n  if (SdkEnvironment.getWindowEnv() !== WindowEnvironmentKind.ServiceWorker) {\n    return (<any>self).registration.pushManager.getSubscription()\n                       .then(subscription => {\n                         if (subscription) {\n                           return subscription.unsubscribe();\n                         } else throw new Error('Cannot unsubscribe because not subscribed.');\n                       });\n  } else {\n    if (SubscriptionHelper.isUsingSubscriptionWorkaround()) {\n      return new Promise((resolve, reject) => {\n        log.debug(\"Unsubscribe from push got called, and we're going to remotely execute it in HTTPS iFrame.\");\n        OneSignal.proxyFrameHost.message(OneSignal.POSTMAM_COMMANDS.UNSUBSCRIBE_FROM_PUSH, null, reply => {\n          log.debug(\"Unsubscribe from push succesfully remotely executed.\");\n          if (reply.data === OneSignal.POSTMAM_COMMANDS.REMOTE_OPERATION_COMPLETE) {\n            resolve();\n          } else {\n            reject('Failed to remotely unsubscribe from push.');\n          }\n        });\n      });\n    } else {\n      if (!navigator.serviceWorker || !navigator.serviceWorker.controller)\n        return Promise.resolve();\n\n      return navigator.serviceWorker.ready\n                      .then(registration => registration.pushManager)\n                      .then(pushManager => pushManager.getSubscription())\n                      .then((subscription: any) => {\n                        if (subscription) {\n                          return subscription.unsubscribe();\n                        } else {\n                          return Promise.resolve();\n                        }\n                      });\n    }\n  }\n}\n\n\n/**\n * Unregisters the active service worker.\n */\nexport function wipeServiceWorker() {\n  log.warn('OneSignal: Unregistering service worker.');\n  if (SdkEnvironment.getWindowEnv() === WindowEnvironmentKind.OneSignalProxyFrame) {\n    return Promise.resolve();\n  }\n  if (!navigator.serviceWorker || !navigator.serviceWorker.controller)\n    return Promise.resolve();\n\n  return navigator.serviceWorker.ready\n      .then(registration => registration.unregister());\n}\n\n\n/**\n * Unsubscribe from push notifications and remove any active service worker.\n */\nexport function wipeServiceWorkerAndUnsubscribe() {\n  return Promise.all([\n    unsubscribeFromPush(),\n    wipeServiceWorker()\n  ]);\n}\n\nexport function wait(milliseconds) {\n  return new Promise(resolve => setTimeout(resolve, milliseconds));\n}\n\n/**\n * Returns the part of the string after the first occurence of the specified search.\n * @param string The entire string.\n * @param search The text returned will be everything *after* search.\n * e.g. substringAfter('A white fox', 'white') => ' fox'\n */\nexport function substringAfter(string, search) {\n  return string.substr(string.indexOf(search) + search.length);\n}\n\nexport function once(targetSelectorOrElement, event, task, manualDestroy=false) {\n  if (!event) {\n    log.error('Cannot call on() with no event: ', event);\n  }\n  if (!task) {\n    log.error('Cannot call on() with no task: ', task)\n  }\n  if (typeof targetSelectorOrElement === 'string') {\n    let els = document.querySelectorAll(targetSelectorOrElement);\n    if (els.length > 0) {\n      for (let i = 0; i < els.length; i++)\n        once(els[i], event, task);\n    }\n  }\n  else if (isArray(targetSelectorOrElement)) {\n    for (let i = 0; i < targetSelectorOrElement.length; i++)\n      once(targetSelectorOrElement[i], event, task);\n  }\n  else if (typeof targetSelectorOrElement === 'object') {\n    var taskWrapper = (function () {\n      var internalTaskFunction = function (e) {\n        var destroyEventListener = function() {\n          targetSelectorOrElement.removeEventListener(e.type, taskWrapper);\n        };\n        if (!manualDestroy) {\n          destroyEventListener();\n        }\n        task(e, destroyEventListener);\n      };\n      return internalTaskFunction;\n    })();\n    targetSelectorOrElement.addEventListener(event, taskWrapper);\n  }\n  else\n    throw new Error(`${targetSelectorOrElement} must be a CSS selector string or DOM Element object.`);\n}\n\n/**\n * Returns the number of times the SDK has been loaded into the browser.\n * Expects a browser environment, otherwise this call will fail.\n */\nexport function getSdkLoadCount() {\n  return (<any>window).__oneSignalSdkLoadCount || 0;\n}\n\nexport async function awaitSdkEvent(eventName: string, predicate?: Action<any>) {\n  return await new Promise(resolve => {\n    OneSignal.once(eventName, event => {\n      if (predicate) {\n        const predicateResult = predicate(event);\n        if (predicateResult)\n          resolve(event);\n      } else resolve(event);\n    });\n  });\n}\n\n/**\n * Increments the counter describing the number of times the SDK has been loaded into the browser.\n * Expects a browser environment, otherwise this call will fail.\n */\nexport function incrementSdkLoadCount() {\n  (<any>window).__oneSignalSdkLoadCount = getSdkLoadCount() + 1;\n}\n\n/**\n * Returns the email with all whitespace removed and converted to lower case.\n */\nexport function prepareEmailForHashing(email: string): string {\n  return email.replace(/\\s/g, '').toLowerCase();\n}\n\nexport function encodeHashAsUriComponent(hash: object): string {\n  let uriComponent = '';\n  const keys = Object.keys(hash);\n  for (var key of keys) {\n    const value = hash[key];\n    uriComponent += `${encodeURIComponent(key)}=${encodeURIComponent(value)}`\n  }\n  return uriComponent;\n}\n","export enum WindowEnvironmentKind {\n  /**\n   * A service worker environment.\n   */\n  ServiceWorker = 'ServiceWorker',\n\n  /**\n   * The top-level frame to the \"main\" client's site.\n   */\n  Host = 'Host',\n\n  /**\n   * Our subscription popup for alt-origin sites.\n   */\n  OneSignalSubscriptionPopup = 'Popup',\n\n  /**\n   * Our subscription modal for HTTPS sites, which loads in an iFrame.\n   */\n  OneSignalSubscriptionModal = 'Modal',\n\n  /**\n   * Our subscription helper iFrame.\n   */\n  OneSignalProxyFrame = 'ProxyFrame',\n\n  /**\n   * A custom iFrame on the site.\n   */\n  CustomIframe = 'CustomFrame',\n\n  /**\n   * An unknown window context type not matching any of the above.\n   */\n  Unknown = 'Unknown'\n}\n","import * as log from 'loglevel';\n\nimport Environment from './Environment';\nimport SdkEnvironment from './managers/SdkEnvironment';\nimport { WindowEnvironmentKind } from './models/WindowEnvironmentKind';\nimport { capitalize, contains, getConsoleStyle } from './utils';\n\n\nconst SILENT_EVENTS = [\n  'notifyButtonHovering',\n  'notifyButtonHover',\n\n  'notifyButtonButtonClick',\n  'notifyButtonLauncherClick',\n  'animatedElementHiding',\n  'animatedElementHidden',\n  'animatedElementShowing',\n  'animatedElementShown',\n  'activeAnimatedElementActivating',\n  'activeAnimatedElementActive',\n  'activeAnimatedElementInactivating',\n  'activeAnimatedElementInactive',\n  'dbRetrieved',\n  'dbSet',\n  'testEvent'\n  ];\n\nconst RETRIGGER_REMOTE_EVENTS = [\n  'onesignal.prompt.custom.clicked',\n  'onesignal.prompt.native.permissionchanged',\n  'onesignal.subscription.changed',\n  'onesignal.internal.subscriptionset',\n  'dbRebuilt',\n  'initialize',\n  'subscriptionSet',\n  'sendWelcomeNotification',\n  'subscriptionChange',\n  'notificationPermissionChange',\n  'dbSet',\n  'register',\n  'notificationDisplay',\n  'notificationDismiss',\n  'notificationClick',\n  'permissionPromptDisplay',\n  'testWouldDisplay',\n  'testInitOptionDisabled',\n  'popupWindowTimeout'\n];\n\nconst LEGACY_EVENT_MAP = {\n  'notificationPermissionChange': 'onesignal.prompt.native.permissionchanged',\n  'subscriptionChange': 'onesignal.subscription.changed',\n  'customPromptClick': 'onesignal.prompt.custom.clicked',\n};\n\nexport default class Event {\n\n  /**\n   * Triggers the specified event with optional custom data.\n   * @param eventName The string event name to be emitted.\n   * @param data Any JavaScript variable to be passed with the event.\n   * @param remoteTriggerEnv If this method is being called in a different environment (e.g. was triggered in iFrame but now retriggered on main host), this is the string of the original environment for logging purposes.\n   */\n  static trigger(eventName, data?, remoteTriggerEnv=null) {\n    if (!contains(SILENT_EVENTS, eventName)) {\n      let displayData = data;\n      if (remoteTriggerEnv) {\n        var env = `${capitalize(SdkEnvironment.getWindowEnv().toString())} ⬸ ${capitalize(remoteTriggerEnv)}`;\n      } else {\n        var env = capitalize(SdkEnvironment.getWindowEnv().toString());\n      }\n\n      if (displayData || displayData === false) {\n        log.debug(`(${env}) » %c${eventName}:`, getConsoleStyle('event'), displayData);\n      } else {\n        log.debug(`(${env}) » %c${eventName}`, getConsoleStyle('event'));\n      }\n    }\n\n    // Actually fire the event that can be listened to via OneSignal.on()\n    if (Environment.isBrowser()) {\n      if (eventName === OneSignal.EVENTS.SDK_INITIALIZED) {\n        if (OneSignal.initialized)\n          return;\n        else\n          OneSignal.initialized = true;\n      }\n      (OneSignal as any).emit(eventName, data);\n    }\n    if (LEGACY_EVENT_MAP.hasOwnProperty(eventName)) {\n      let legacyEventName = LEGACY_EVENT_MAP[eventName];\n      Event._triggerLegacy(legacyEventName, data);\n    }\n\n    // If this event was triggered in an iFrame or Popup environment, also trigger it on the host page\n    if (Environment.isBrowser() &&\n        (SdkEnvironment.getWindowEnv() === WindowEnvironmentKind.OneSignalSubscriptionPopup ||\n         SdkEnvironment.getWindowEnv() === WindowEnvironmentKind.OneSignalProxyFrame)) {\n      var creator = opener || parent;\n      if (!creator) {\n        log.error(`Could not send event '${eventName}' back to host page because no creator (opener or parent) found!`);\n      } else {\n        // But only if the event matches certain events\n        if (contains(RETRIGGER_REMOTE_EVENTS, eventName)) {\n          if (SdkEnvironment.getWindowEnv() === WindowEnvironmentKind.OneSignalSubscriptionPopup) {\n            OneSignal.subscriptionPopup.message(OneSignal.POSTMAM_COMMANDS.REMOTE_RETRIGGER_EVENT, {eventName: eventName, eventData: data});\n          } else {\n            OneSignal.proxyFrame.retriggerRemoteEvent(eventName, data);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Fires the event to be listened to via window.addEventListener().\n   * @param eventName The string event name.\n   * @param data Any JavaScript variable to be passed with the event.\n   * @private\n   */\n  static _triggerLegacy(eventName, data) {\n    var event = new CustomEvent(eventName, {\n      bubbles: true, cancelable: true, detail: data\n    });\n    // Fire the event that listeners can listen to via 'window.addEventListener()'\n    window.dispatchEvent(event);\n  }\n}\n","import * as Browser from 'bowser';\nimport SdkEnvironment from './managers/SdkEnvironment';\nimport { WindowEnvironmentKind } from './models/WindowEnvironmentKind';\n\nexport default class Environment {\n\n  /**\n   * True if not in a service worker environment.\n   */\n  static isBrowser() {\n    return typeof window !== 'undefined';\n  }\n\n  static version() {\n    return (typeof __VERSION__ === \"undefined\" ? 1 : Number(__VERSION__));\n  }\n\n  static get TRADITIONAL_CHINESE_LANGUAGE_TAG() {\n    return ['tw', 'hant']\n  }\n\n  static get SIMPLIFIED_CHINESE_LANGUAGE_TAG() {\n    return ['cn', 'hans']\n  }\n\n  /* Specifications: https://tools.ietf.org/html/bcp47 */\n  static getLanguage() {\n    let languageTag = navigator.language;\n    if (languageTag) {\n      languageTag = languageTag.toLowerCase();\n      let languageSubtags = languageTag.split('-');\n      if (languageSubtags[0] == 'zh') {\n        // The language is zh-?\n        // We must categorize the language as either zh-Hans (simplified) or zh-Hant (traditional); OneSignal only supports these two Chinese variants\n        for (let traditionalSubtag of Environment.TRADITIONAL_CHINESE_LANGUAGE_TAG) {\n          if (languageSubtags.indexOf(traditionalSubtag) !== -1) {\n            return 'zh-Hant';\n          }\n        }\n        for (let simpleSubtag of Environment.SIMPLIFIED_CHINESE_LANGUAGE_TAG) {\n          if (languageSubtags.indexOf(simpleSubtag) !== -1) {\n            return 'zh-Hans';\n          }\n        }\n        return 'zh-Hant'; // Return Chinese traditional by default\n      } else {\n        // Return the language subtag (it can be three characters, so truncate it down to 2 just to be sure)\n        return languageSubtags[0].substring(0, 2);\n      }\n    } else {\n      return 'en';\n    }\n  }\n\n  static supportsServiceWorkers() {\n    const env = SdkEnvironment.getWindowEnv();\n\n    switch (env) {\n      case WindowEnvironmentKind.ServiceWorker:\n        return true;\n      default:\n        return typeof navigator !== \"undefined\" &&\n          'serviceWorker' in navigator;\n    }\n  }\n\n  /*\n    Returns the MD5 hash of all stylesheets within the src/stylesheets\n    directory.\n   */\n  static getSdkStylesVersionHash() {\n    return (typeof __SRC_STYLESHEETS_MD5_HASH__ === \"undefined\" ? '1' : __SRC_STYLESHEETS_MD5_HASH__);\n  }\n}\n","'use strict';\n/* eslint-disable no-unused-vars */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (e) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (Object.getOwnPropertySymbols) {\n\t\t\tsymbols = Object.getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/object-assign/index.js\n// module id = 7\n// module chunks = 0","import * as ExtendableError from \"es6-error\";\r\n\r\nexport default class OneSignalError extends ExtendableError {\r\n  constructor(message) {\r\n    super(message);\r\n  }\r\n}","import * as Browser from 'bowser';\nimport * as log from 'loglevel';\n\nimport PushPermissionNotGrantedError from '../errors/PushPermissionNotGrantedError';\nimport { PushPermissionNotGrantedErrorReason } from '../errors/PushPermissionNotGrantedError';\nimport TimeoutError from '../errors/TimeoutError';\nimport Event from '../Event';\nimport SdkEnvironment from '../managers/SdkEnvironment';\nimport { WindowEnvironmentKind } from '../models/WindowEnvironmentKind';\nimport { getConsoleStyle, timeoutPromise } from '../utils';\nimport EventHelper from './EventHelper';\nimport MainHelper from './MainHelper';\nimport TestHelper from './TestHelper';\nimport { InvalidStateError, InvalidStateReason } from '../errors/InvalidStateError';\nimport Context from '../models/Context';\nimport { ServiceWorkerActiveState } from '../managers/ServiceWorkerManager';\nimport { Subscription } from '../models/Subscription';\nimport { NotificationPermission } from '../models/NotificationPermission';\nimport Database from '../services/Database';\nimport { SubscriptionManager } from '../managers/SubscriptionManager';\nimport { RawPushSubscription } from '../models/RawPushSubscription';\nimport { SubscriptionStrategyKind } from \"../models/SubscriptionStrategyKind\";\n\nexport default class SubscriptionHelper {\n  static async registerForPush(): Promise<Subscription> {\n    let subscription: Subscription;\n    const context: Context = OneSignal.context;\n\n    /*\n      Within the same page navigation (the same session), do not register for\n      push if the user is already subscribed, otherwise the user will have its\n      session count incremented on each page refresh. However, if the user is\n      not subscribed, subscribe.\n    */\n    const isPushEnabled = await OneSignal.isPushNotificationsEnabled();\n\n    if (isPushEnabled && !context.sessionManager.isFirstPageView()) {\n      log.debug('Not registering for push because the user is subscribed and this is not the first page view.');\n      return null;\n    }\n\n    if (typeof OneSignal !== \"undefined\") {\n      if (OneSignal._isRegisteringForPush) {\n        return null;\n      } else {\n        OneSignal._isRegisteringForPush = true;\n      }\n    }\n\n    switch (SdkEnvironment.getWindowEnv()) {\n      case WindowEnvironmentKind.Host:\n      case WindowEnvironmentKind.OneSignalSubscriptionModal:\n        try {\n          const rawSubscription = await context.subscriptionManager.subscribe(\n            SubscriptionStrategyKind.ResubscribeExisting\n          );\n          subscription = await context.subscriptionManager.registerSubscription(rawSubscription);\n          context.sessionManager.incrementPageViewCount();\n          EventHelper.triggerNotificationPermissionChanged();\n          EventHelper.checkAndTriggerSubscriptionChanged();\n        } catch (e) {\n          log.info(e);\n        }\n        break;\n      case WindowEnvironmentKind.OneSignalSubscriptionPopup:\n        /*\n          This is the code for the HTTP popup.\n         */\n        const windowCreator = opener || parent;\n        let rawSubscription: RawPushSubscription;\n\n        // Update the stored permission first, so we know the real value even if the user closes the\n        // popup\n        await context.permissionManager.updateStoredPermission();\n\n        try {\n          /* If the user doesn't grant permissions, a PushPermissionNotGrantedError will be thrown here. */\n          rawSubscription = await context.subscriptionManager.subscribe(SubscriptionStrategyKind.SubscribeNew);\n\n          // Update the permission to granted\n          await context.permissionManager.updateStoredPermission();\n        } catch (e) {\n          // Update the permission to denied or default\n          await context.permissionManager.updateStoredPermission();\n\n          if (e instanceof PushPermissionNotGrantedError) {\n            switch ((e as PushPermissionNotGrantedError).reason) {\n              case PushPermissionNotGrantedErrorReason.Blocked:\n                await context.permissionManager.updateStoredPermission();\n                /* Force update false, because the iframe installs a native\n                permission change handler that will be triggered when the user\n                clicks out of the popup back to the parent page */\n                (OneSignal.subscriptionPopup as any).message(OneSignal.POSTMAM_COMMANDS.REMOTE_NOTIFICATION_PERMISSION_CHANGED, {\n                  permission: NotificationPermission.Denied,\n                  forceUpdatePermission: false\n                });\n                break;\n              case PushPermissionNotGrantedErrorReason.Dismissed:\n                /* Force update true because default permissions (before\n                prompting) -> default permissions (after prompting) isn't a\n                change, but we still want to be notified about it */\n                (OneSignal.subscriptionPopup as any).message(OneSignal.POSTMAM_COMMANDS.REMOTE_NOTIFICATION_PERMISSION_CHANGED, {\n                  permission: NotificationPermission.Default,\n                  forceUpdatePermission: true\n                });\n                break;\n            }\n          }\n          /*\n            Popup native permission request was blocked or dismissed\n            Close the window\n          */\n          if (windowCreator) {\n            window.close();\n            return null;\n          }\n        }\n\n        OneSignal.subscriptionPopup.message(\n          OneSignal.POSTMAM_COMMANDS.FINISH_REMOTE_REGISTRATION,\n          {\n            rawPushSubscription: rawSubscription.serialize()\n          },\n          message => {\n            if (message.data.progress === true) {\n              log.debug('Got message from host page that remote reg. is in progress, closing popup.');\n              if (windowCreator) {\n                window.close();\n              }\n            } else {\n              log.debug('Got message from host page that remote reg. could not be finished.');\n            }\n          }\n        );\n        break;\n      default:\n        if (typeof OneSignal !== \"undefined\") {\n          OneSignal._isRegisteringForPush = false;\n        }\n        throw new InvalidStateError(InvalidStateReason.UnsupportedEnvironment);\n    }\n\n    if (typeof OneSignal !== \"undefined\") {\n      OneSignal._isRegisteringForPush = false;\n    }\n\n    return subscription;\n  }\n\n  /**\n   * Returns true if web push subscription occurs on a subdomain of OneSignal.\n   * If true, our main IndexedDB is stored on the subdomain of onesignal.com, and not the user's site.\n   * @remarks\n   *   This method returns true if:\n   *     - The browser is not Safari\n   *         - Safari uses a different method of subscription and does not require our workaround\n   *     - The init parameters contain a subdomain (even if the protocol is HTTPS)\n   *         - HTTPS users using our subdomain workaround still have the main IndexedDB stored on our subdomain\n   *        - The protocol of the current webpage is http:\n   *   Exceptions are:\n   *     - Safe hostnames like localhost and 127.0.0.1\n   *          - Because we don't want users to get the wrong idea when testing on localhost that direct permission is supported on HTTP, we'll ignore these exceptions. HTTPS will always be required for direct permission\n   *        - We are already in popup or iFrame mode, or this is called from the service worker\n   */\n  static isUsingSubscriptionWorkaround() {\n    if (!OneSignal.config) {\n      throw new Error(\n        `(${SdkEnvironment.getWindowEnv().toString()}) isUsingSubscriptionWorkaround() cannot be called until OneSignal.config exists.`\n      );\n    }\n    if (Browser.safari) {\n      return false;\n    }\n\n    if (\n      (SubscriptionHelper.isLocalhostAllowedAsSecureOrigin() && location.hostname === 'localhost') ||\n      (location.hostname as any) === '127.0.0.1'\n    ) {\n      return false;\n    }\n\n    return (\n      (\n        SdkEnvironment.getWindowEnv() === WindowEnvironmentKind.Host ||\n        SdkEnvironment.getWindowEnv() === WindowEnvironmentKind.CustomIframe\n      ) &&\n      (\n        !!OneSignal.config.subdomain ||\n        location.protocol === 'http:'\n      )\n    );\n  }\n\n  /**\n   * From a child frame, returns true if the current frame context is insecure.\n   *\n   * This is used to check if isPushNotificationsEnabled() should grab the service worker\n   * registration. In an HTTPS iframe of an HTTP page, getting the service worker registration would\n   * throw an error.\n   *\n   * This method can trigger console warnings due to using ServiceWorkerContainer.getRegistration in\n   * an insecure frame.\n   */\n  static async isFrameContextInsecure() {\n    // If we are the top frame, or service workers aren't available, don't run this check\n    if (\n      window === window.top ||\n      !('serviceWorker' in navigator) ||\n      typeof navigator.serviceWorker.getRegistration === 'undefined'\n    ) {\n      return false;\n    }\n    try {\n      await navigator.serviceWorker.getRegistration();\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n\n  static isInsecureOrigin() {\n    return window.location.protocol === \"http:\";\n  }\n\n  static isLocalhostAllowedAsSecureOrigin() {\n    return (\n      OneSignal.config &&\n      OneSignal.config.userConfig &&\n      OneSignal.config.userConfig.allowLocalhostAsSecureOrigin === true\n    );\n  }\n}\n","/*!\n * Bowser - a browser detector\n * https://github.com/ded/bowser\n * MIT License | (c) Dustin Diaz 2015\n */\n\n!function (root, name, definition) {\n  if (typeof module != 'undefined' && module.exports) module.exports = definition()\n  else if (typeof define == 'function' && define.amd) define(name, definition)\n  else root[name] = definition()\n}(this, 'bowser', function () {\n  /**\n    * See useragents.js for examples of navigator.userAgent\n    */\n\n  var t = true\n\n  function detect(ua) {\n\n    function getFirstMatch(regex) {\n      var match = ua.match(regex);\n      return (match && match.length > 1 && match[1]) || '';\n    }\n\n    function getSecondMatch(regex) {\n      var match = ua.match(regex);\n      return (match && match.length > 1 && match[2]) || '';\n    }\n\n    var iosdevice = getFirstMatch(/(ipod|iphone|ipad)/i).toLowerCase()\n      , likeAndroid = /like android/i.test(ua)\n      , android = !likeAndroid && /android/i.test(ua)\n      , nexusMobile = /nexus\\s*[0-6]\\s*/i.test(ua)\n      , nexusTablet = !nexusMobile && /nexus\\s*[0-9]+/i.test(ua)\n      , chromeos = /CrOS/.test(ua)\n      , silk = /silk/i.test(ua)\n      , sailfish = /sailfish/i.test(ua)\n      , tizen = /tizen/i.test(ua)\n      , webos = /(web|hpw)os/i.test(ua)\n      , windowsphone = /windows phone/i.test(ua)\n      , samsungBrowser = /SamsungBrowser/i.test(ua)\n      , windows = !windowsphone && /windows/i.test(ua)\n      , mac = !iosdevice && !silk && /macintosh/i.test(ua)\n      , linux = !android && !sailfish && !tizen && !webos && /linux/i.test(ua)\n      , edgeVersion = getFirstMatch(/edge\\/(\\d+(\\.\\d+)?)/i)\n      , versionIdentifier = getFirstMatch(/version\\/(\\d+(\\.\\d+)?)/i)\n      , tablet = /tablet/i.test(ua) && !/tablet pc/i.test(ua)\n      , mobile = !tablet && /[^-]mobi/i.test(ua)\n      , xbox = /xbox/i.test(ua)\n      , result\n\n    if (/opera/i.test(ua)) {\n      //  an old Opera\n      result = {\n        name: 'Opera'\n      , opera: t\n      , version: versionIdentifier || getFirstMatch(/(?:opera|opr|opios)[\\s\\/](\\d+(\\.\\d+)?)/i)\n      }\n    } else if (/opr\\/|opios/i.test(ua)) {\n      // a new Opera\n      result = {\n        name: 'Opera'\n        , opera: t\n        , version: getFirstMatch(/(?:opr|opios)[\\s\\/](\\d+(\\.\\d+)?)/i) || versionIdentifier\n      }\n    }\n    else if (/SamsungBrowser/i.test(ua)) {\n      result = {\n        name: 'Samsung Internet for Android'\n        , samsungBrowser: t\n        , version: versionIdentifier || getFirstMatch(/(?:SamsungBrowser)[\\s\\/](\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/coast/i.test(ua)) {\n      result = {\n        name: 'Opera Coast'\n        , coast: t\n        , version: versionIdentifier || getFirstMatch(/(?:coast)[\\s\\/](\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/yabrowser/i.test(ua)) {\n      result = {\n        name: 'Yandex Browser'\n      , yandexbrowser: t\n      , version: versionIdentifier || getFirstMatch(/(?:yabrowser)[\\s\\/](\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/ucbrowser/i.test(ua)) {\n      result = {\n          name: 'UC Browser'\n        , ucbrowser: t\n        , version: getFirstMatch(/(?:ucbrowser)[\\s\\/](\\d+(?:\\.\\d+)+)/i)\n      }\n    }\n    else if (/mxios/i.test(ua)) {\n      result = {\n        name: 'Maxthon'\n        , maxthon: t\n        , version: getFirstMatch(/(?:mxios)[\\s\\/](\\d+(?:\\.\\d+)+)/i)\n      }\n    }\n    else if (/epiphany/i.test(ua)) {\n      result = {\n        name: 'Epiphany'\n        , epiphany: t\n        , version: getFirstMatch(/(?:epiphany)[\\s\\/](\\d+(?:\\.\\d+)+)/i)\n      }\n    }\n    else if (/puffin/i.test(ua)) {\n      result = {\n        name: 'Puffin'\n        , puffin: t\n        , version: getFirstMatch(/(?:puffin)[\\s\\/](\\d+(?:\\.\\d+)?)/i)\n      }\n    }\n    else if (/sleipnir/i.test(ua)) {\n      result = {\n        name: 'Sleipnir'\n        , sleipnir: t\n        , version: getFirstMatch(/(?:sleipnir)[\\s\\/](\\d+(?:\\.\\d+)+)/i)\n      }\n    }\n    else if (/k-meleon/i.test(ua)) {\n      result = {\n        name: 'K-Meleon'\n        , kMeleon: t\n        , version: getFirstMatch(/(?:k-meleon)[\\s\\/](\\d+(?:\\.\\d+)+)/i)\n      }\n    }\n    else if (windowsphone) {\n      result = {\n        name: 'Windows Phone'\n      , windowsphone: t\n      }\n      if (edgeVersion) {\n        result.msedge = t\n        result.version = edgeVersion\n      }\n      else {\n        result.msie = t\n        result.version = getFirstMatch(/iemobile\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/msie|trident/i.test(ua)) {\n      result = {\n        name: 'Internet Explorer'\n      , msie: t\n      , version: getFirstMatch(/(?:msie |rv:)(\\d+(\\.\\d+)?)/i)\n      }\n    } else if (chromeos) {\n      result = {\n        name: 'Chrome'\n      , chromeos: t\n      , chromeBook: t\n      , chrome: t\n      , version: getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.\\d+)?)/i)\n      }\n    } else if (/chrome.+? edge/i.test(ua)) {\n      result = {\n        name: 'Microsoft Edge'\n      , msedge: t\n      , version: edgeVersion\n      }\n    }\n    else if (/vivaldi/i.test(ua)) {\n      result = {\n        name: 'Vivaldi'\n        , vivaldi: t\n        , version: getFirstMatch(/vivaldi\\/(\\d+(\\.\\d+)?)/i) || versionIdentifier\n      }\n    }\n    else if (sailfish) {\n      result = {\n        name: 'Sailfish'\n      , sailfish: t\n      , version: getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/seamonkey\\//i.test(ua)) {\n      result = {\n        name: 'SeaMonkey'\n      , seamonkey: t\n      , version: getFirstMatch(/seamonkey\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/firefox|iceweasel|fxios/i.test(ua)) {\n      result = {\n        name: 'Firefox'\n      , firefox: t\n      , version: getFirstMatch(/(?:firefox|iceweasel|fxios)[ \\/](\\d+(\\.\\d+)?)/i)\n      }\n      if (/\\((mobile|tablet);[^\\)]*rv:[\\d\\.]+\\)/i.test(ua)) {\n        result.firefoxos = t\n      }\n    }\n    else if (silk) {\n      result =  {\n        name: 'Amazon Silk'\n      , silk: t\n      , version : getFirstMatch(/silk\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/phantom/i.test(ua)) {\n      result = {\n        name: 'PhantomJS'\n      , phantom: t\n      , version: getFirstMatch(/phantomjs\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/slimerjs/i.test(ua)) {\n      result = {\n        name: 'SlimerJS'\n        , slimer: t\n        , version: getFirstMatch(/slimerjs\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/blackberry|\\bbb\\d+/i.test(ua) || /rim\\stablet/i.test(ua)) {\n      result = {\n        name: 'BlackBerry'\n      , blackberry: t\n      , version: versionIdentifier || getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (webos) {\n      result = {\n        name: 'WebOS'\n      , webos: t\n      , version: versionIdentifier || getFirstMatch(/w(?:eb)?osbrowser\\/(\\d+(\\.\\d+)?)/i)\n      };\n      /touchpad\\//i.test(ua) && (result.touchpad = t)\n    }\n    else if (/bada/i.test(ua)) {\n      result = {\n        name: 'Bada'\n      , bada: t\n      , version: getFirstMatch(/dolfin\\/(\\d+(\\.\\d+)?)/i)\n      };\n    }\n    else if (tizen) {\n      result = {\n        name: 'Tizen'\n      , tizen: t\n      , version: getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.\\d+)?)/i) || versionIdentifier\n      };\n    }\n    else if (/qupzilla/i.test(ua)) {\n      result = {\n        name: 'QupZilla'\n        , qupzilla: t\n        , version: getFirstMatch(/(?:qupzilla)[\\s\\/](\\d+(?:\\.\\d+)+)/i) || versionIdentifier\n      }\n    }\n    else if (/chromium/i.test(ua)) {\n      result = {\n        name: 'Chromium'\n        , chromium: t\n        , version: getFirstMatch(/(?:chromium)[\\s\\/](\\d+(?:\\.\\d+)?)/i) || versionIdentifier\n      }\n    }\n    else if (/chrome|crios|crmo/i.test(ua)) {\n      result = {\n        name: 'Chrome'\n        , chrome: t\n        , version: getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (android) {\n      result = {\n        name: 'Android'\n        , version: versionIdentifier\n      }\n    }\n    else if (/safari|applewebkit/i.test(ua)) {\n      result = {\n        name: 'Safari'\n      , safari: t\n      }\n      if (versionIdentifier) {\n        result.version = versionIdentifier\n      }\n    }\n    else if (iosdevice) {\n      result = {\n        name : iosdevice == 'iphone' ? 'iPhone' : iosdevice == 'ipad' ? 'iPad' : 'iPod'\n      }\n      // WTF: version is not part of user agent in web apps\n      if (versionIdentifier) {\n        result.version = versionIdentifier\n      }\n    }\n    else if(/googlebot/i.test(ua)) {\n      result = {\n        name: 'Googlebot'\n      , googlebot: t\n      , version: getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i) || versionIdentifier\n      }\n    }\n    else {\n      result = {\n        name: getFirstMatch(/^(.*)\\/(.*) /),\n        version: getSecondMatch(/^(.*)\\/(.*) /)\n     };\n   }\n\n    // set webkit or gecko flag for browsers based on these engines\n    if (!result.msedge && /(apple)?webkit/i.test(ua)) {\n      if (/(apple)?webkit\\/537\\.36/i.test(ua)) {\n        result.name = result.name || \"Blink\"\n        result.blink = t\n      } else {\n        result.name = result.name || \"Webkit\"\n        result.webkit = t\n      }\n      if (!result.version && versionIdentifier) {\n        result.version = versionIdentifier\n      }\n    } else if (!result.opera && /gecko\\//i.test(ua)) {\n      result.name = result.name || \"Gecko\"\n      result.gecko = t\n      result.version = result.version || getFirstMatch(/gecko\\/(\\d+(\\.\\d+)?)/i)\n    }\n\n    // set OS flags for platforms that have multiple browsers\n    if (!result.windowsphone && !result.msedge && (android || result.silk)) {\n      result.android = t\n    } else if (!result.windowsphone && !result.msedge && iosdevice) {\n      result[iosdevice] = t\n      result.ios = t\n    } else if (mac) {\n      result.mac = t\n    } else if (xbox) {\n      result.xbox = t\n    } else if (windows) {\n      result.windows = t\n    } else if (linux) {\n      result.linux = t\n    }\n\n    function getWindowsVersion (s) {\n      switch (s) {\n        case 'NT': return 'NT'\n        case 'XP': return 'XP'\n        case 'NT 5.0': return '2000'\n        case 'NT 5.1': return 'XP'\n        case 'NT 5.2': return '2003'\n        case 'NT 6.0': return 'Vista'\n        case 'NT 6.1': return '7'\n        case 'NT 6.2': return '8'\n        case 'NT 6.3': return '8.1'\n        case 'NT 10.0': return '10'\n        default: return undefined\n      }\n    }\n\n    // OS version extraction\n    var osVersion = '';\n    if (result.windows) {\n      osVersion = getWindowsVersion(getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i))\n    } else if (result.windowsphone) {\n      osVersion = getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i);\n    } else if (result.mac) {\n      osVersion = getFirstMatch(/Mac OS X (\\d+([_\\.\\s]\\d+)*)/i);\n      osVersion = osVersion.replace(/[_\\s]/g, '.');\n    } else if (iosdevice) {\n      osVersion = getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i);\n      osVersion = osVersion.replace(/[_\\s]/g, '.');\n    } else if (android) {\n      osVersion = getFirstMatch(/android[ \\/-](\\d+(\\.\\d+)*)/i);\n    } else if (result.webos) {\n      osVersion = getFirstMatch(/(?:web|hpw)os\\/(\\d+(\\.\\d+)*)/i);\n    } else if (result.blackberry) {\n      osVersion = getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i);\n    } else if (result.bada) {\n      osVersion = getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i);\n    } else if (result.tizen) {\n      osVersion = getFirstMatch(/tizen[\\/\\s](\\d+(\\.\\d+)*)/i);\n    }\n    if (osVersion) {\n      result.osversion = osVersion;\n    }\n\n    // device type extraction\n    var osMajorVersion = !result.windows && osVersion.split('.')[0];\n    if (\n         tablet\n      || nexusTablet\n      || iosdevice == 'ipad'\n      || (android && (osMajorVersion == 3 || (osMajorVersion >= 4 && !mobile)))\n      || result.silk\n    ) {\n      result.tablet = t\n    } else if (\n         mobile\n      || iosdevice == 'iphone'\n      || iosdevice == 'ipod'\n      || android\n      || nexusMobile\n      || result.blackberry\n      || result.webos\n      || result.bada\n    ) {\n      result.mobile = t\n    }\n\n    // Graded Browser Support\n    // http://developer.yahoo.com/yui/articles/gbs\n    if (result.msedge ||\n        (result.msie && result.version >= 10) ||\n        (result.yandexbrowser && result.version >= 15) ||\n\t\t    (result.vivaldi && result.version >= 1.0) ||\n        (result.chrome && result.version >= 20) ||\n        (result.samsungBrowser && result.version >= 4) ||\n        (result.firefox && result.version >= 20.0) ||\n        (result.safari && result.version >= 6) ||\n        (result.opera && result.version >= 10.0) ||\n        (result.ios && result.osversion && result.osversion.split(\".\")[0] >= 6) ||\n        (result.blackberry && result.version >= 10.1)\n        || (result.chromium && result.version >= 20)\n        ) {\n      result.a = t;\n    }\n    else if ((result.msie && result.version < 10) ||\n        (result.chrome && result.version < 20) ||\n        (result.firefox && result.version < 20.0) ||\n        (result.safari && result.version < 6) ||\n        (result.opera && result.version < 10.0) ||\n        (result.ios && result.osversion && result.osversion.split(\".\")[0] < 6)\n        || (result.chromium && result.version < 20)\n        ) {\n      result.c = t\n    } else result.x = t\n\n    return result\n  }\n\n  var bowser = detect(typeof navigator !== 'undefined' ? navigator.userAgent || '' : '')\n\n  bowser.test = function (browserList) {\n    for (var i = 0; i < browserList.length; ++i) {\n      var browserItem = browserList[i];\n      if (typeof browserItem=== 'string') {\n        if (browserItem in bowser) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Get version precisions count\n   *\n   * @example\n   *   getVersionPrecision(\"1.10.3\") // 3\n   *\n   * @param  {string} version\n   * @return {number}\n   */\n  function getVersionPrecision(version) {\n    return version.split(\".\").length;\n  }\n\n  /**\n   * Array::map polyfill\n   *\n   * @param  {Array} arr\n   * @param  {Function} iterator\n   * @return {Array}\n   */\n  function map(arr, iterator) {\n    var result = [], i;\n    if (Array.prototype.map) {\n      return Array.prototype.map.call(arr, iterator);\n    }\n    for (i = 0; i < arr.length; i++) {\n      result.push(iterator(arr[i]));\n    }\n    return result;\n  }\n\n  /**\n   * Calculate browser version weight\n   *\n   * @example\n   *   compareVersions(['1.10.2.1',  '1.8.2.1.90'])    // 1\n   *   compareVersions(['1.010.2.1', '1.09.2.1.90']);  // 1\n   *   compareVersions(['1.10.2.1',  '1.10.2.1']);     // 0\n   *   compareVersions(['1.10.2.1',  '1.0800.2']);     // -1\n   *\n   * @param  {Array<String>} versions versions to compare\n   * @return {Number} comparison result\n   */\n  function compareVersions(versions) {\n    // 1) get common precision for both versions, for example for \"10.0\" and \"9\" it should be 2\n    var precision = Math.max(getVersionPrecision(versions[0]), getVersionPrecision(versions[1]));\n    var chunks = map(versions, function (version) {\n      var delta = precision - getVersionPrecision(version);\n\n      // 2) \"9\" -> \"9.0\" (for precision = 2)\n      version = version + new Array(delta + 1).join(\".0\");\n\n      // 3) \"9.0\" -> [\"000000000\"\", \"000000009\"]\n      return map(version.split(\".\"), function (chunk) {\n        return new Array(20 - chunk.length).join(\"0\") + chunk;\n      }).reverse();\n    });\n\n    // iterate in reverse order by reversed chunks array\n    while (--precision >= 0) {\n      // 4) compare: \"000000009\" > \"000000010\" = false (but \"9\" > \"10\" = true)\n      if (chunks[0][precision] > chunks[1][precision]) {\n        return 1;\n      }\n      else if (chunks[0][precision] === chunks[1][precision]) {\n        if (precision === 0) {\n          // all version chunks are same\n          return 0;\n        }\n      }\n      else {\n        return -1;\n      }\n    }\n  }\n\n  /**\n   * Check if browser is unsupported\n   *\n   * @example\n   *   bowser.isUnsupportedBrowser({\n   *     msie: \"10\",\n   *     firefox: \"23\",\n   *     chrome: \"29\",\n   *     safari: \"5.1\",\n   *     opera: \"16\",\n   *     phantom: \"534\"\n   *   });\n   *\n   * @param  {Object}  minVersions map of minimal version to browser\n   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map\n   * @param  {String}  [ua] user agent string\n   * @return {Boolean}\n   */\n  function isUnsupportedBrowser(minVersions, strictMode, ua) {\n    var _bowser = bowser;\n\n    // make strictMode param optional with ua param usage\n    if (typeof strictMode === 'string') {\n      ua = strictMode;\n      strictMode = void(0);\n    }\n\n    if (strictMode === void(0)) {\n      strictMode = false;\n    }\n    if (ua) {\n      _bowser = detect(ua);\n    }\n\n    var version = \"\" + _bowser.version;\n    for (var browser in minVersions) {\n      if (minVersions.hasOwnProperty(browser)) {\n        if (_bowser[browser]) {\n          if (typeof minVersions[browser] !== 'string') {\n            throw new Error('Browser version in the minVersion map should be a string: ' + browser + ': ' + String(minVersions));\n          }\n\n          // browser version and min supported version.\n          return compareVersions([version, minVersions[browser]]) < 0;\n        }\n      }\n    }\n\n    return strictMode; // not found\n  }\n\n  /**\n   * Check if browser is supported\n   *\n   * @param  {Object} minVersions map of minimal version to browser\n   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map\n   * @param  {String}  [ua] user agent string\n   * @return {Boolean}\n   */\n  function check(minVersions, strictMode, ua) {\n    return !isUnsupportedBrowser(minVersions, strictMode, ua);\n  }\n\n  bowser.isUnsupportedBrowser = isUnsupportedBrowser;\n  bowser.compareVersions = compareVersions;\n  bowser.check = check;\n\n  /*\n   * Set our detect method to the main bowser object so we can\n   * reuse it to test other user agents.\n   * This is needed to implement future tests.\n   */\n  bowser._detect = detect;\n\n  return bowser\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bowser/src/bowser.js\n// module id = 10\n// module chunks = 0","import SubscriptionHelper from '../helpers/SubscriptionHelper';\nimport Emitter from '../libraries/Emitter';\nimport SdkEnvironment from '../managers/SdkEnvironment';\nimport { AppConfig } from '../models/AppConfig';\nimport { AppState } from '../models/AppState';\nimport { Notification } from '../models/Notification';\nimport { ServiceWorkerState } from '../models/ServiceWorkerState';\nimport { Subscription } from '../models/Subscription';\nimport { TestEnvironmentKind } from '../models/TestEnvironmentKind';\nimport { Timestamp } from '../models/Timestamp';\n\nimport { WindowEnvironmentKind } from '../models/WindowEnvironmentKind';\nimport IndexedDb from './IndexedDb';\nimport * as Browser from 'bowser';\nimport { EmailProfile } from '../models/EmailProfile';\n\nenum DatabaseEventName {\n  SET\n}\n\nexport default class Database {\n\n  public emitter: Emitter;\n  private database: IndexedDb;\n\n  /* Temp Database Proxy */\n  public static databaseInstanceName: string;\n  public static databaseInstance: Database;\n  /* End Temp Database Proxy */\n\n  public static EVENTS = DatabaseEventName;\n\n  constructor(private databaseName: string) {\n    this.emitter = new Emitter();\n    this.database = new IndexedDb(this.databaseName);\n  }\n\n  static applyDbResultFilter(table: string, key: string, result) {\n    switch (table) {\n      case 'Options':\n        if (result && key) {\n          return result.value;\n        } else if (result && !key) {\n          return result;\n        } else {\n          return null;\n        }\n      case 'Ids':\n        if (result && key) {\n          return result.id;\n        } else if (result && !key) {\n          return result;\n        } else {\n          return null;\n        }\n      case 'NotificationOpened':\n        if (result && key) {\n          return {data: result.data, timestamp: result.timestamp};\n        } else if (result && !key) {\n          return result;\n        } else {\n          return null;\n        }\n      default:\n        if (result) {\n          return result;\n        } else {\n          return null;\n        }\n    }\n  }\n\n  /**\n   * Asynchronously retrieves the value of the key at the table (if key is specified), or the entire table (if key is not specified).\n   * If on an iFrame or popup environment, retrieves from the correct IndexedDB database using cross-domain messaging.\n   * @param table The table to retrieve the value from.\n   * @param key The key in the table to retrieve the value of. Leave blank to get the entire table.\n   * @returns {Promise} Returns a promise that fulfills when the value(s) are available.\n   */\n  async get<T>(table: string, key?: string): Promise<T> {\n    return await new Promise<T>(async (resolve) => {\n      if (SdkEnvironment.getWindowEnv() !== WindowEnvironmentKind.ServiceWorker &&\n          SubscriptionHelper.isUsingSubscriptionWorkaround() &&\n          SdkEnvironment.getTestEnv() === TestEnvironmentKind.None) {\n        OneSignal.proxyFrameHost.message(OneSignal.POSTMAM_COMMANDS.REMOTE_DATABASE_GET, [{\n          table: table,\n          key: key\n        }], reply => {\n          let result = reply.data[0];\n          resolve(result);\n        });\n      } else {\n        const result = await this.database.get(table, key);\n        let cleanResult = Database.applyDbResultFilter(table, key, result);\n        resolve(cleanResult);\n      }\n    });\n  }\n\n  /**\n   * Asynchronously puts the specified value in the specified table.\n   * @param table\n   * @param keypath\n   */\n  async put(table: string, keypath: any) {\n    await new Promise(async (resolve, reject) => {\n      if (SdkEnvironment.getWindowEnv() !== WindowEnvironmentKind.ServiceWorker &&\n        SubscriptionHelper.isUsingSubscriptionWorkaround() &&\n        SdkEnvironment.getTestEnv() === TestEnvironmentKind.None) {\n        OneSignal.proxyFrameHost.message(OneSignal.POSTMAM_COMMANDS.REMOTE_DATABASE_PUT, [{table: table, keypath: keypath}], reply => {\n          if (reply.data === OneSignal.POSTMAM_COMMANDS.REMOTE_OPERATION_COMPLETE) {\n            resolve();\n          } else {\n            reject(`(Database) Attempted remote IndexedDB put(${table}, ${keypath}), but did not get success response.`);\n          }\n        });\n      } else {\n        await this.database.put(table, keypath);\n        resolve();\n      }\n    });\n    this.emitter.emit(Database.EVENTS.SET, keypath);\n  }\n\n  /**\n   * Asynchronously removes the specified key from the table, or if the key is not specified, removes all keys in the table.\n   * @returns {Promise} Returns a promise containing a key that is fulfilled when deletion is completed.\n   */\n  remove(table: string, keypath?: string) {\n    if (SdkEnvironment.getWindowEnv() !== WindowEnvironmentKind.ServiceWorker &&\n      SubscriptionHelper.isUsingSubscriptionWorkaround() &&\n      SdkEnvironment.getTestEnv() === TestEnvironmentKind.None) {\n      return new Promise((resolve, reject) => {\n        OneSignal.proxyFrameHost.message(OneSignal.POSTMAM_COMMANDS.REMOTE_DATABASE_REMOVE, [{ table: table, keypath: keypath }], reply => {\n          if (reply.data === OneSignal.POSTMAM_COMMANDS.REMOTE_OPERATION_COMPLETE) {\n            resolve();\n          } else {\n            reject(`(Database) Attempted remote IndexedDB remove(${table}, ${keypath}), but did not get success response.`);\n          }\n        });\n      });\n    }\n    else {\n      return this.database.remove(table, keypath);\n    }\n  }\n\n  async getAppConfig(): Promise<any> {\n    const config: any = {};\n    const appIdStr: string = await this.get<string>('Ids', 'appId');\n    config.appId = appIdStr;\n    config.subdomain = await this.get<string>('Options', 'subdomain');\n    config.vapidPublicKey = await this.get<string>('Options', 'vapidPublicKey');\n    config.emailAuthRequired = await this.get<boolean>('Options', 'emailAuthRequired');\n    return config;\n  }\n\n  async setAppConfig(appConfig: AppConfig) {\n    if (appConfig.appId && appConfig.appId.value)\n      await this.put('Ids', {type: 'appId', id: appConfig.appId.value})\n    if (appConfig.subdomain)\n      await this.put('Options', {key: 'subdomain', value: appConfig.subdomain})\n    if (appConfig.httpUseOneSignalCom === true)\n      await this.put('Options', { key: 'httpUseOneSignalCom', value: true })\n    else if (appConfig.httpUseOneSignalCom === false)\n      await this.put('Options', {key: 'httpUseOneSignalCom', value: false })\n    if (appConfig.emailAuthRequired === true)\n      await this.put('Options', { key: 'emailAuthRequired', value: true })\n    else if (appConfig.emailAuthRequired === false)\n      await this.put('Options', {key: 'emailAuthRequired', value: false })\n    if (appConfig.vapidPublicKey)\n      await this.put('Options', {key: 'vapidPublicKey', value: appConfig.vapidPublicKey})\n  }\n\n  async getAppState(): Promise<AppState> {\n    const state = new AppState();\n    state.defaultNotificationUrl = await this.get<string>('Options', 'defaultUrl');\n    state.defaultNotificationTitle = await this.get<string>('Options', 'defaultTitle');\n    state.lastKnownPushEnabled = await this.get<boolean>('Options', 'isPushEnabled');\n    state.clickedNotifications = await this.get<Map<URL, [Notification, Timestamp]>>('NotificationOpened');\n    return state;\n  }\n\n  async setAppState(appState: AppState) {\n    if (appState.defaultNotificationUrl)\n      await this.put(\"Options\", {key: \"defaultUrl\", value: appState.defaultNotificationUrl});\n    if (appState.defaultNotificationTitle || appState.defaultNotificationTitle === '')\n      await this.put(\"Options\", {key: \"defaultTitle\", value: appState.defaultNotificationTitle});\n    if (appState.lastKnownPushEnabled != null)\n      await this.put('Options', {key: 'isPushEnabled', value: appState.lastKnownPushEnabled});\n    if (appState.clickedNotifications) {\n      const clickedNotificationUrls = Object.keys(appState.clickedNotifications);\n      for (let url of clickedNotificationUrls) {\n        const notificationDetails = appState.clickedNotifications[url];\n        if (notificationDetails) {\n          await this.put('NotificationOpened', {\n            url: url,\n            data: (notificationDetails as any).data,\n            timestamp: (notificationDetails as any).timestamp\n          });\n        } else if (notificationDetails === null) {\n          // If we get an object like:\n          // { \"http://site.com/page\": null}\n          // It means we need to remove that entry\n          await this.remove('NotificationOpened', url);\n        }\n      }\n    }\n  }\n\n  async getServiceWorkerState(): Promise<ServiceWorkerState> {\n    const state = new ServiceWorkerState();\n    state.workerVersion = await this.get<number>('Ids', 'WORKER1_ONE_SIGNAL_SW_VERSION');\n    state.updaterWorkerVersion = await this.get<number>('Ids', 'WORKER2_ONE_SIGNAL_SW_VERSION');\n    state.backupNotification = await this.get<Notification>('Ids', 'backupNotification');\n    return state;\n  }\n\n   async setServiceWorkerState(state: ServiceWorkerState) {\n    if (state.workerVersion)\n      await this.put('Ids', {type: 'WORKER1_ONE_SIGNAL_SW_VERSION', id: state.workerVersion});\n    if (state.updaterWorkerVersion)\n      await this.put('Ids', {type: 'WORKER2_ONE_SIGNAL_SW_VERSION', id: state.updaterWorkerVersion});\n    if (state.backupNotification)\n      await this.put('Ids', {type: 'backupNotification', id: state.backupNotification});\n  }\n\n  async getSubscription(): Promise<Subscription> {\n    const subscription = new Subscription();\n    subscription.deviceId = await this.get<string>('Ids', 'userId');\n    subscription.subscriptionToken = await this.get<string>('Ids', 'registrationId');\n\n    // The preferred database key to store our subscription\n    const dbOptedOut = await this.get<boolean>('Options', 'optedOut');\n    // For backwards compatibility, we need to read from this if the above is not found\n    const dbNotOptedOut = await this.get<boolean>('Options', 'subscription');\n    const createdAt = await this.get<number>('Options', 'subscriptionCreatedAt');\n    const expirationTime = await this.get<number>('Options', 'subscriptionExpirationTime');\n\n    if (dbOptedOut != null) {\n      subscription.optedOut = dbOptedOut;\n    } else {\n      if (dbNotOptedOut == null) {\n        subscription.optedOut = false;\n      } else {\n        subscription.optedOut = !dbNotOptedOut;\n      }\n    }\n    subscription.createdAt = createdAt;\n    subscription.expirationTime = expirationTime;\n\n    return subscription;\n  }\n\n  async setSubscription(subscription: Subscription) {\n    if (subscription.deviceId && subscription.deviceId.value) {\n      await this.put('Ids', { type: 'userId', id: subscription.deviceId.value });\n    }\n    if (typeof subscription.subscriptionToken !== \"undefined\") {\n      // Allow null subscriptions to be set\n      await this.put('Ids', { type: 'registrationId', id: subscription.subscriptionToken });\n    }\n    if (subscription.optedOut != null) { // Checks if null or undefined, allows false\n      await this.put('Options', { key: 'optedOut', value: subscription.optedOut });\n    }\n    if (subscription.createdAt != null) {\n      await this.put('Options', { key: 'subscriptionCreatedAt', value: subscription.createdAt});\n    }\n    if (subscription.expirationTime != null) {\n      await this.put('Options', { key: 'subscriptionExpirationTime', value: subscription.expirationTime});\n    } else {\n      await this.remove('Options', 'subscriptionExpirationTime');\n    }\n  }\n\n  async getEmailProfile(): Promise<EmailProfile> {\n    const profileJson = await this.get<string>('Ids', 'emailProfile');\n    if (profileJson) {\n      return EmailProfile.deserialize(profileJson);\n    } else {\n      return new EmailProfile();\n    }\n  }\n\n  async setEmailProfile(emailProfile: EmailProfile): Promise<void> {\n    if (emailProfile) {\n      await this.put('Ids', { type: 'emailProfile', id: emailProfile.serialize() });\n    }\n  }\n\n  /**\n   * Asynchronously removes the Ids, NotificationOpened, and Options tables from the database and recreates them with blank values.\n   * @returns {Promise} Returns a promise that is fulfilled when rebuilding is completed, or rejects with an error.\n   */\n  static async rebuild() {\n    Database.ensureSingletonInstance();\n    return Promise.all([\n      Database.databaseInstance.remove('Ids'),\n      Database.databaseInstance.remove('NotificationOpened'),\n      Database.databaseInstance.remove('Options'),\n    ]);\n  }\n\n  /* Temp Database Proxy */\n  static ensureSingletonInstance() {\n    if (!Database.databaseInstanceName) {\n      Database.databaseInstanceName = \"ONE_SIGNAL_SDK_DB\";\n    }\n    if (!Database.databaseInstance) {\n      Database.databaseInstance = new Database(Database.databaseInstanceName);\n    }\n  }\n  /* End Temp Database Proxy */\n\n  static async on(...args: any[]) {\n    Database.ensureSingletonInstance();\n    return Database.databaseInstance.emitter.on.apply(Database.databaseInstance.emitter, args);\n  }\n  static async setEmailProfile(emailProfile: EmailProfile) {\n    Database.ensureSingletonInstance();\n    return Database.databaseInstance.setEmailProfile.call(Database.databaseInstance, emailProfile);\n  }\n  static async getEmailProfile(): Promise<EmailProfile> {\n    Database.ensureSingletonInstance();\n    return Database.databaseInstance.getEmailProfile.call(Database.databaseInstance);\n  }\n  static async setSubscription(subscription: Subscription) {\n    Database.ensureSingletonInstance();\n    return Database.databaseInstance.setSubscription.call(Database.databaseInstance, subscription);\n  }\n  static async getSubscription(): Promise<Subscription> {\n    Database.ensureSingletonInstance();\n    return Database.databaseInstance.getSubscription.call(Database.databaseInstance);\n  }\n  static async setServiceWorkerState(workerState: ServiceWorkerState) {\n    Database.ensureSingletonInstance();\n    return Database.databaseInstance.setServiceWorkerState.call(Database.databaseInstance, workerState);\n  }\n  static async getServiceWorkerState(): Promise<ServiceWorkerState> {\n    Database.ensureSingletonInstance();\n    return Database.databaseInstance.getServiceWorkerState.call(Database.databaseInstance);\n  }\n  static async setAppState(appState: AppState) {\n    Database.ensureSingletonInstance();\n    return Database.databaseInstance.setAppState.call(Database.databaseInstance, appState);\n  }\n  static async getAppState(): Promise<AppState> {\n    Database.ensureSingletonInstance();\n    return Database.databaseInstance.getAppState.call(Database.databaseInstance);\n  }\n  static async setAppConfig(appConfig: AppConfig) {\n    Database.ensureSingletonInstance();\n    return Database.databaseInstance.setAppConfig.call(Database.databaseInstance, appConfig);\n  }\n  static async getAppConfig(): Promise<AppConfig> {\n    Database.ensureSingletonInstance();\n    return Database.databaseInstance.getAppConfig.call(Database.databaseInstance);\n  }\n  static async remove(table: string, keypath?: string) {\n    Database.ensureSingletonInstance();\n    return Database.databaseInstance.remove.call(Database.databaseInstance, table, keypath);\n  }\n  static async put(table: string, keypath: any) {\n    Database.ensureSingletonInstance();\n    return Database.databaseInstance.put.call(Database.databaseInstance, table, keypath);\n  }\n  static async get<T>(table: string, key?: string): Promise<T> {\n    Database.ensureSingletonInstance();\n    return Database.databaseInstance.get.call(Database.databaseInstance, table, key);\n  }\n}\n","import * as Browser from 'bowser';\nimport * as log from 'loglevel';\nimport * as objectAssign from 'object-assign';\n\nimport Bell from '../bell/Bell';\nimport Environment from '../Environment';\nimport { InvalidStateError, InvalidStateReason } from '../errors/InvalidStateError';\nimport Event from '../Event';\nimport SdkEnvironment from '../managers/SdkEnvironment';\nimport { WindowEnvironmentKind } from '../models/WindowEnvironmentKind';\nimport OneSignalApi from '../OneSignalApi';\nimport Database from '../services/Database';\nimport { ResourceLoadState } from '../services/DynamicResourceLoader';\nimport {\n  awaitOneSignalInitAndSupported,\n  capitalize,\n  contains,\n  getConsoleStyle,\n} from '../utils';\nimport EventHelper from './EventHelper';\nimport SubscriptionHelper from './SubscriptionHelper';\nimport { WorkerMessengerCommand, WorkerMessenger } from '../libraries/WorkerMessenger';\nimport ProxyFrame from '../modules/frames/ProxyFrame';\nimport { NotificationPermission } from '../models/NotificationPermission';\nimport { InvalidArgumentError, InvalidArgumentReason } from '../errors/InvalidArgumentError';\nimport { AppUserConfigPromptOptions } from '../models/AppConfig';\nimport { SlidedownPermissionMessageOptions } from '../popover/Popover';\nimport TimedLocalStorage from '../modules/TimedLocalStorage';\n\nexport default class MainHelper {\n  /**\n   * If there are multiple manifests, and one of them is our OneSignal manifest, we move it to the top of <head> to ensure our manifest is used for push subscription (manifests after the first are ignored as part of the spec).\n   */\n  static fixWordpressManifestIfMisplaced() {\n    var manifests = document.querySelectorAll('link[rel=manifest]');\n    if (!manifests || manifests.length <= 1) {\n      // Multiple manifests do not exist on this webpage; there is no issue\n      return;\n    }\n    for (let i = 0; i < manifests.length; i++) {\n      let manifest = manifests[i];\n      let url = (manifest as any).href;\n      if (contains(url, 'gcm_sender_id')) {\n        // Move the <manifest> to the first thing in <head>\n        document.querySelector('head').insertBefore(manifest, document.querySelector('head').children[0]);\n        log.info('OneSignal: Moved the WordPress push <manifest> to the first element in <head>.');\n      }\n    }\n  }\n\n  /**\n   * If the user has manually opted out of notifications (OneSignal.setSubscription), returns -2; otherwise returns 1.\n   * @param isOptedIn The result of OneSignal.getSubscription().\n   */\n  static getNotificationTypeFromOptIn(isOptedIn) {\n    if (isOptedIn == true || isOptedIn == null) {\n      return 1;\n    } else {\n      return -2;\n    }\n  }\n\n  /**\n   * Returns true if a LocalStorage entry exists for noting the user dismissed the native prompt.\n   */\n  static wasHttpsNativePromptDismissed() {\n    return TimedLocalStorage.getItem('onesignal-notification-prompt') === 'dismissed';\n  }\n\n  /**\n   * Stores a flag in sessionStorage that we've already shown the HTTP popover to this user and that we should not\n   * show it again until they open a new window or tab to the site.\n   */\n  static markHttpPopoverShown() {\n    sessionStorage.setItem('ONESIGNAL_HTTP_PROMPT_SHOWN', 'true');\n  }\n\n  /**\n   * Returns true if the HTTP popover was already shown inside the same session.\n   */\n  static isHttpPromptAlreadyShown() {\n    return sessionStorage.getItem('ONESIGNAL_HTTP_PROMPT_SHOWN') == 'true';\n  }\n\n  static async checkAndTriggerNotificationPermissionChanged() {\n    const previousPermission = await Database.get('Options', 'notificationPermission');\n    const currentPermission = await OneSignal.getNotificationPermission();\n    if (previousPermission !== currentPermission) {\n      await EventHelper.triggerNotificationPermissionChanged();\n      await Database.put('Options', {\n        key: 'notificationPermission',\n        value: currentPermission\n      });\n    }\n  }\n\n  static async showNotifyButton() {\n    if (Environment.isBrowser() && !OneSignal.notifyButton) {\n      OneSignal.config.userConfig.notifyButton = OneSignal.config.userConfig.notifyButton || {};\n      if (OneSignal.config.userConfig.bell) {\n        // If both bell and notifyButton, notifyButton's options take precedence\n        objectAssign(OneSignal.config.userConfig.bell, OneSignal.config.userConfig.notifyButton);\n        objectAssign(OneSignal.config.userConfig.notifyButton, OneSignal.config.userConfig.bell);\n      }\n\n      const displayPredicate: () => boolean = OneSignal.config.userConfig.notifyButton.displayPredicate;\n      if (displayPredicate && typeof displayPredicate === 'function') {\n        const predicateValue = await Promise.resolve(OneSignal.config.userConfig.notifyButton.displayPredicate());\n        if (predicateValue !== false) {\n          OneSignal.notifyButton = new Bell(OneSignal.config.userConfig.notifyButton);\n          OneSignal.notifyButton.create();\n        } else {\n          log.debug('Notify button display predicate returned false so not showing the notify button.');\n        }\n      } else {\n        OneSignal.notifyButton = new Bell(OneSignal.config.userConfig.notifyButton);\n        OneSignal.notifyButton.create();\n      }\n    }\n  }\n\n  static async getNotificationIcons() {\n    const appId = await MainHelper.getAppId();\n    if (!appId || !appId.value) {\n      throw new InvalidStateError(InvalidStateReason.MissingAppId);\n    }\n    var url = `${SdkEnvironment.getOneSignalApiUrl().toString()}/apps/${appId.value}/icon`;\n    const response = await fetch(url);\n    const data = await response.json();\n    if (data.errors) {\n      log.error(`API call %c${url}`, getConsoleStyle('code'), 'failed with:', data.errors);\n      throw new Error('Failed to get notification icons.');\n    }\n    return data;\n  }\n\n  static establishServiceWorkerChannel() {\n    const workerMessenger: WorkerMessenger = OneSignal.context.workerMessenger;\n    workerMessenger.off();\n\n    workerMessenger.on(WorkerMessengerCommand.NotificationDisplayed, data => {\n      log.debug(location.origin, 'Received notification display event from service worker.');\n      Event.trigger(OneSignal.EVENTS.NOTIFICATION_DISPLAYED, data);\n    });\n\n    workerMessenger.on(WorkerMessengerCommand.NotificationClicked, async data => {\n      let clickedListenerCallbackCount: number;\n      if (SdkEnvironment.getWindowEnv() === WindowEnvironmentKind.OneSignalProxyFrame) {\n        clickedListenerCallbackCount = await new Promise<number>(resolve => {\n          const proxyFrame: ProxyFrame = OneSignal.proxyFrame;\n          if (proxyFrame) {\n            proxyFrame.messenger.message(\n              OneSignal.POSTMAM_COMMANDS.GET_EVENT_LISTENER_COUNT,\n              OneSignal.EVENTS.NOTIFICATION_CLICKED,\n              reply => {\n                let callbackCount: number = reply.data;\n                resolve(callbackCount);\n              }\n            );\n          }\n        });\n      } else {\n        clickedListenerCallbackCount = OneSignal.getListeners(OneSignal.EVENTS.NOTIFICATION_CLICKED).length;\n      }\n      if (clickedListenerCallbackCount === 0) {\n        /*\n          A site's page can be open but not listening to the\n          notification.clicked event because it didn't call\n          addListenerForNotificationOpened(). In this case, if there are no\n          detected event listeners, we should save the event, instead of firing\n          it without anybody recieving it.\n\n          Or, since addListenerForNotificationOpened() only works once (you have\n          to call it again each time), maybe it was only called once and the\n          user isn't receiving the notification.clicked event for subsequent\n          notifications on the same browser tab.\n\n          Example: notificationClickHandlerMatch: 'origin', tab is clicked,\n                   event fires without anybody listening, calling\n                   addListenerForNotificationOpened() returns no results even\n                   though a notification was just clicked.\n        */\n        log.debug(\n          'notification.clicked event received, but no event listeners; storing event in IndexedDb for later retrieval.'\n        );\n        /* For empty notifications without a URL, use the current document's URL */\n        let url = data.url;\n        if (!data.url) {\n          // Least likely to modify, since modifying this property changes the page's URL\n          url = location.href;\n        }\n        await Database.put('NotificationOpened', { url: url, data: data, timestamp: Date.now() });\n      } else {\n        Event.trigger(OneSignal.EVENTS.NOTIFICATION_CLICKED, data);\n      }\n    });\n\n    workerMessenger.on(WorkerMessengerCommand.RedirectPage, data => {\n      log.debug(\n        `${SdkEnvironment.getWindowEnv().toString()} Picked up command.redirect to ${data}, forwarding to host page.`\n      );\n      const proxyFrame: ProxyFrame = OneSignal.proxyFrame;\n      if (proxyFrame) {\n        proxyFrame.messenger.message(OneSignal.POSTMAM_COMMANDS.SERVICEWORKER_COMMAND_REDIRECT, data);\n      }\n    });\n\n    workerMessenger.on(WorkerMessengerCommand.NotificationDismissed, data => {\n      Event.trigger(OneSignal.EVENTS.NOTIFICATION_DISMISSED, data);\n    });\n  }\n\n  static getSlidedownPermissionMessageOptions(): AppUserConfigPromptOptions | null {\n    const promptOptions: AppUserConfigPromptOptions = OneSignal.config.userConfig.promptOptions;\n    if (!promptOptions) {\n      return null;\n    }\n    if (promptOptions && !promptOptions.slidedown) {\n      return promptOptions;\n    }\n\n    return {\n      actionMessage: promptOptions.slidedown.actionMessage,\n      acceptButtonText: promptOptions.slidedown.acceptButtonText,\n      cancelButtonText: promptOptions.slidedown.cancelButtonText,\n    };\n  }\n\n  static getFullscreenPermissionMessageOptions(): AppUserConfigPromptOptions | null {\n    const promptOptions: AppUserConfigPromptOptions = OneSignal.config.userConfig.promptOptions;\n    if (!promptOptions) {\n      return null;\n    }\n    if (promptOptions && !promptOptions.fullscreen) {\n      return promptOptions;\n    }\n\n    return {\n      autoAcceptTitle: promptOptions.fullscreen.autoAcceptTitle,\n      actionMessage: promptOptions.fullscreen.actionMessage,\n      exampleNotificationTitleDesktop: promptOptions.fullscreen.title,\n      exampleNotificationTitleMobile: promptOptions.fullscreen.title,\n      exampleNotificationMessageDesktop: promptOptions.fullscreen.message,\n      exampleNotificationMessageMobile: promptOptions.fullscreen.message,\n      exampleNotificationCaption: promptOptions.fullscreen.caption,\n      acceptButtonText: promptOptions.fullscreen.acceptButton,\n      cancelButtonText: promptOptions.fullscreen.cancelButton,\n    };\n  }\n\n  static getPromptOptionsQueryString() {\n    let promptOptions = MainHelper.getFullscreenPermissionMessageOptions();\n    let promptOptionsStr = '';\n    if (promptOptions) {\n      let hash = MainHelper.getPromptOptionsPostHash();\n      for (let key of Object.keys(hash)) {\n        var value = hash[key];\n        promptOptionsStr += '&' + key + '=' + value;\n      }\n    }\n    return promptOptionsStr;\n  }\n\n  static getPromptOptionsPostHash() {\n    let promptOptions = MainHelper.getFullscreenPermissionMessageOptions();\n    if (promptOptions) {\n      var legacyParams = {\n        exampleNotificationTitleDesktop: 'exampleNotificationTitle',\n        exampleNotificationMessageDesktop: 'exampleNotificationMessage',\n        exampleNotificationTitleMobile: 'exampleNotificationTitle',\n        exampleNotificationMessageMobile: 'exampleNotificationMessage'\n      };\n      for (let legacyParamKey of Object.keys(legacyParams)) {\n        let legacyParamValue = legacyParams[legacyParamKey];\n        if (promptOptions[legacyParamKey]) {\n          promptOptions[legacyParamValue] = promptOptions[legacyParamKey];\n        }\n      }\n      var allowedPromptOptions = [\n        'autoAcceptTitle',\n        'siteName',\n        'autoAcceptTitle',\n        'subscribeText',\n        'showGraphic',\n        'actionMessage',\n        'exampleNotificationTitle',\n        'exampleNotificationMessage',\n        'exampleNotificationCaption',\n        'acceptButtonText',\n        'cancelButtonText',\n        'timeout'\n      ];\n      var hash = {};\n      for (var i = 0; i < allowedPromptOptions.length; i++) {\n        var key = allowedPromptOptions[i];\n        var value = promptOptions[key];\n        var encoded_value = encodeURIComponent(value);\n        if (value || value === false || value === '') {\n          hash[key] = encoded_value;\n        }\n      }\n    }\n    return hash;\n  }\n\n  static triggerCustomPromptClicked(clickResult) {\n    Event.trigger(OneSignal.EVENTS.CUSTOM_PROMPT_CLICKED, {\n      result: clickResult\n    });\n  }\n\n  static async getAppId(): Promise<string> {\n    if (OneSignal.config.appId) {\n      return Promise.resolve(OneSignal.config.appId);\n    } else {\n      const appId = await Database.get<string>('Ids', 'appId');\n      return appId;\n    }\n  }\n}\n","import OneSignalError from \"./OneSignalError\";\n\n\nexport enum PushPermissionNotGrantedErrorReason {\n  Blocked,\n  Dismissed,\n  Default\n}\n\nexport default class PushPermissionNotGrantedError extends OneSignalError {\n  reason: PushPermissionNotGrantedErrorReason;\n\n  constructor(reason: PushPermissionNotGrantedErrorReason) {\n    switch (reason) {\n      case PushPermissionNotGrantedErrorReason.Dismissed:\n        super('The user dismissed the permission prompt.');\n        break;\n      case PushPermissionNotGrantedErrorReason.Blocked:\n        super('Notification permissions are blocked.');\n        break;\n      case PushPermissionNotGrantedErrorReason.Default:\n        super('Notification permissions have not been granted yet.');\n        break;\n    }\n\n    this.reason = reason;\n  }\n}\n","import * as log from 'loglevel';\n\nimport Event from '../Event';\nimport LimitStore from '../LimitStore';\nimport OneSignalApi from '../OneSignalApi';\nimport Database from '../services/Database';\nimport { decodeHtmlEntities, logMethodCall } from '../utils';\nimport MainHelper from './MainHelper';\nimport Context from \"../models/Context\";\nimport SdkEnvironment from \"../managers/SdkEnvironment\";\n\nexport default class EventHelper {\n  static onNotificationPermissionChange() {\n    EventHelper.checkAndTriggerSubscriptionChanged();\n  }\n\n  static async onInternalSubscriptionSet(optedOut) {\n    LimitStore.put('subscription.optedOut', optedOut);\n  }\n\n  static async checkAndTriggerSubscriptionChanged() {\n    logMethodCall('checkAndTriggerSubscriptionChanged');\n    const context: Context = OneSignal.context;\n    const subscriptionState = await context.subscriptionManager.getSubscriptionState();\n    const appState = await Database.getAppState();\n    const { lastKnownPushEnabled } = appState;\n    const didStateChange = (\n      lastKnownPushEnabled === null ||\n      subscriptionState.subscribed !== lastKnownPushEnabled\n    );\n    if (!didStateChange) return;\n    log.info(\n      `The user's subscription state changed from ` +\n        `${lastKnownPushEnabled === null ? '(not stored)' : lastKnownPushEnabled} ⟶ ${subscriptionState.subscribed}`\n    );\n    appState.lastKnownPushEnabled = subscriptionState.subscribed;\n    await Database.setAppState(appState);\n    EventHelper.triggerSubscriptionChanged(subscriptionState.subscribed);\n  }\n\n  static async _onSubscriptionChanged(newSubscriptionState) {\n    EventHelper.onSubscriptionChanged_showWelcomeNotification(newSubscriptionState);\n    EventHelper.onSubscriptionChanged_evaluateNotifyButtonDisplayPredicate(newSubscriptionState);\n  }\n\n  private static async onSubscriptionChanged_showWelcomeNotification(isSubscribed: boolean) {\n    if (OneSignal.__doNotShowWelcomeNotification) {\n      log.debug('Not showing welcome notification because user has previously subscribed.');\n      return;\n    }\n    if (isSubscribed === true) {\n      const { deviceId } = await Database.getSubscription();\n      const appId = await MainHelper.getAppId();\n\n      let welcome_notification_opts = OneSignal.config.userConfig.welcomeNotification;\n      let welcome_notification_disabled =\n        welcome_notification_opts !== undefined && welcome_notification_opts['disable'] === true;\n      let title =\n        welcome_notification_opts !== undefined &&\n          welcome_notification_opts['title'] !== undefined &&\n          welcome_notification_opts['title'] !== null\n          ? welcome_notification_opts['title']\n          : '';\n      let message =\n        welcome_notification_opts !== undefined &&\n          welcome_notification_opts['message'] !== undefined &&\n          welcome_notification_opts['message'] !== null &&\n          welcome_notification_opts['message'].length > 0\n          ? welcome_notification_opts['message']\n          : 'Thanks for subscribing!';\n      let unopenableWelcomeNotificationUrl = new URL(location.href).origin + '?_osp=do_not_open';\n      let url =\n        welcome_notification_opts && welcome_notification_opts['url'] && welcome_notification_opts['url'].length > 0\n          ? welcome_notification_opts['url']\n          : unopenableWelcomeNotificationUrl;\n      title = decodeHtmlEntities(title);\n      message = decodeHtmlEntities(message);\n\n      if (!welcome_notification_disabled) {\n        log.debug('Sending welcome notification.');\n        OneSignalApi.sendNotification(\n          appId,\n          [deviceId],\n          { en: title },\n          { en: message },\n          url,\n          null,\n          { __isOneSignalWelcomeNotification: true },\n          undefined\n        );\n        Event.trigger(OneSignal.EVENTS.WELCOME_NOTIFICATION_SENT, {\n          title: title,\n          message: message,\n          url: url\n        });\n      }\n    }\n  }\n\n  private static async onSubscriptionChanged_evaluateNotifyButtonDisplayPredicate(isSubscribed: boolean) {\n    const displayPredicate: () => boolean = OneSignal.config.userConfig.notifyButton.displayPredicate;\n    if (displayPredicate && typeof displayPredicate === \"function\" && OneSignal.notifyButton) {\n      const predicateResult = await displayPredicate();\n      if (predicateResult !== false) {\n        log.debug('Showing notify button because display predicate returned true.');\n        OneSignal.notifyButton.launcher.show();\n      } else {\n        log.debug('Hiding notify button because display predicate returned false.');\n        OneSignal.notifyButton.launcher.hide();\n      }\n    }\n  }\n\n  static async triggerNotificationPermissionChanged(updateIfIdentical = false) {\n    let newPermission, isUpdating;\n    const currentPermission = await OneSignal.getNotificationPermission();\n    const previousPermission = await Database.get('Options', 'notificationPermission');\n\n    newPermission = currentPermission;\n    isUpdating = currentPermission !== previousPermission || updateIfIdentical;\n\n    if (isUpdating) {\n      await Database.put('Options', {\n        key: 'notificationPermission',\n        value: currentPermission\n      });\n      Event.trigger(OneSignal.EVENTS.NATIVE_PROMPT_PERMISSIONCHANGED, {\n        to: newPermission\n      });\n    }\n  }\n\n  static triggerSubscriptionChanged(to) {\n    Event.trigger(OneSignal.EVENTS.SUBSCRIPTION_CHANGED, to);\n  }\n\n  /**\n   * When notifications are clicked, because the site isn't open, the notification is stored in the database. The next\n   * time the page opens, the event is triggered if its less than 5 minutes (usually page opens instantly from click).\n   *\n   * This method is fired for both HTTPS and HTTP sites, so for HTTP sites, the host URL needs to be used, not the\n   * subdomain.onesignal.com URL.\n   */\n  static async fireStoredNotificationClicks(url: string = document.URL) {\n    async function fireEventWithNotification(clickedNotificationInfo) {\n      // Remove the notification from the recently clicked list\n      // Once this page processes this retroactively provided clicked event, nothing should get the same event\n      const appState = await Database.getAppState();\n      appState.clickedNotifications[clickedNotificationInfo.url] = null;\n      await Database.setAppState(appState);\n\n      /* Clicked notifications look like:\n      {\n        \"url\": \"https://notify.tech\",\n        \"data\": {\n          \"id\": \"f44dfcc7-e8cd-47c6-af7e-e2b7ac68afca\",\n          \"heading\": \"Example Notification\",\n          \"content\": \"This is an example notification.\",\n          \"icon\": \"https://onesignal.com/images/notification_logo.png\"\n          (there would be a URL field here if it was set)\n        },\n        \"timestamp\": 1490998270607\n      }\n      */\n      const { data: notification, timestamp } = clickedNotificationInfo;\n\n      if (timestamp) {\n        const minutesSinceNotificationClicked = (Date.now() - timestamp) / 1000 / 60;\n        if (minutesSinceNotificationClicked > 5) return;\n      }\n      Event.trigger(OneSignal.EVENTS.NOTIFICATION_CLICKED, notification);\n    }\n\n    const appState = await Database.getAppState();\n\n    /* Is the flag notificationClickHandlerMatch: origin enabled?\n\n       If so, this means we should provide a retroactive notification.clicked event as long as there exists any recently clicked\n       notification that matches this site's origin.\n\n       Otherwise, the default behavior is to only provide a retroactive notification.clicked event if this page's URL exactly\n       matches the notification's URL.\n    */\n    const notificationClickHandlerMatch = await Database.get<string>('Options', 'notificationClickHandlerMatch');\n    if (notificationClickHandlerMatch === 'origin') {\n      for (const clickedNotificationUrl of Object.keys(appState.clickedNotifications)) {\n        // Using notificationClickHandlerMatch: 'origin', as long as the notification's URL's origin matches our current tab's origin,\n        // fire the clicked event\n        if (new URL(clickedNotificationUrl).origin === location.origin) {\n          const clickedNotification = appState.clickedNotifications[clickedNotificationUrl];\n          await fireEventWithNotification(clickedNotification);\n        }\n      }\n    } else {\n      /*\n        If a user is on https://site.com, document.URL and location.href both report the page's URL as https://site.com/.\n        This causes checking for notifications for the current URL to fail, since there is a notification for https://site.com,\n        but there is no notification for https://site.com/.\n\n        As a workaround, if there are no notifications for https://site.com/, we'll do a check for https://site.com.\n      */\n      var pageClickedNotifications = appState.clickedNotifications[url];\n      if (pageClickedNotifications) {\n        await fireEventWithNotification(pageClickedNotifications);\n      } else if (!pageClickedNotifications && url.endsWith('/')) {\n        var urlWithoutTrailingSlash = url.substring(0, url.length - 1);\n        pageClickedNotifications = appState.clickedNotifications[urlWithoutTrailingSlash];\n        if (pageClickedNotifications) {\n          await fireEventWithNotification(pageClickedNotifications);\n        }\n      }\n    }\n  }\n}\n","import OneSignalError from \"./OneSignalError\";\nimport { PermissionPromptType } from \"../models/PermissionPromptType\";\n\n\nexport enum InvalidStateReason {\n  MissingAppId,\n  RedundantPermissionMessage,\n  PushPermissionAlreadyGranted,\n  UnsupportedEnvironment,\n  MissingDomElement,\n  ServiceWorkerNotActivated,\n  NoProxyFrame,\n}\n\nexport class InvalidStateError extends OneSignalError {\n  description: string;\n  reason: InvalidStateReason;\n\n  constructor(reason: InvalidStateReason, extra?: {\n    permissionPromptType: PermissionPromptType\n  }) {\n    switch (reason) {\n      case InvalidStateReason.MissingAppId:\n        super(`Missing required app ID.`);\n        break;\n      case InvalidStateReason.RedundantPermissionMessage:\n        let extraInfo = '';\n        if (extra.permissionPromptType)\n          extraInfo = `(${PermissionPromptType[extra.permissionPromptType]})`;\n        super(`Another permission message ${extraInfo} is being displayed.`);\n        break;\n      case InvalidStateReason.PushPermissionAlreadyGranted:\n        super(`Push permission has already been granted.`);\n        break;\n      case InvalidStateReason.UnsupportedEnvironment:\n        super(`The current environment does not support this operation.`);\n        break;\n      case InvalidStateReason.ServiceWorkerNotActivated:\n        super(`The service worker must be activated first.`);\n        break;\n      case InvalidStateReason.NoProxyFrame:\n        super(`No proxy frame.`);\n        break;\n    }\n    this.description = InvalidStateReason[reason];\n    this.reason = reason;\n  }\n}\n","import * as JSONP from 'jsonp';\nimport * as log from 'loglevel';\nimport * as objectAssign from 'object-assign';\n\nimport Environment from './Environment';\nimport SdkEnvironment from './managers/SdkEnvironment';\nimport { AppConfig, ServerAppConfig } from './models/AppConfig';\nimport { DeviceRecord } from './models/DeviceRecord';\n\nimport { contains, trimUndefined } from './utils';\nimport { OneSignalApiErrorKind, OneSignalApiError } from './errors/OneSignalApiError';\nimport { WindowEnvironmentKind } from './models/WindowEnvironmentKind';\nimport { EmailProfile } from './models/EmailProfile';\nimport { SubscriptionStateKind } from './models/SubscriptionStateKind';\n\n\nexport default class OneSignalApi {\n\n  static get(action, data?, headers?) {\n    return OneSignalApi.call('GET', action, data, headers);\n  }\n\n  static post(action, data?, headers?) {\n    return OneSignalApi.call('POST', action, data, headers);\n  }\n\n  static put(action, data?, headers?) {\n    return OneSignalApi.call('PUT', action, data, headers);\n  }\n\n  static delete(action, data?, headers?) {\n    return OneSignalApi.call('DELETE', action, data, headers);\n  }\n\n  static call(method, action, data, headers) {\n    let callHeaders: any = new Headers();\n    callHeaders.append('SDK-Version', `onesignal/web/${Environment.version()}`);\n    callHeaders.append('Content-Type', 'application/json;charset=UTF-8');\n    if (headers) {\n      for (let key of Object.keys(headers)) {\n        callHeaders.append(key, headers[key]);\n      }\n    }\n\n    let contents = {\n      method: method || 'NO_METHOD_SPECIFIED',\n      headers: callHeaders,\n      cache: 'no-cache'\n    };\n    if (data)\n      (contents as any).body = JSON.stringify(data);\n\n    var status;\n    return fetch(SdkEnvironment.getOneSignalApiUrl().toString() + '/' + action, contents)\n        .then(response => {\n          status = response.status;\n          return response.json();\n        })\n        .then(json => {\n          if (status >= 200 && status < 300)\n            return json;\n          else {\n            let error = OneSignalApi.identifyError(json);\n            if (error === 'no-user-id-error') {\n              // TODO: This returns undefined\n            } else {\n              return Promise.reject(json);\n            }\n          }\n        });\n  }\n\n  static identifyError(error) {\n    if (!error || !error.errors) {\n      return 'no-error';\n    }\n    let errors = error.errors;\n    if (contains(errors, 'No user with this id found') ||\n        contains(errors, 'Could not find app_id for given player id.')) {\n      return 'no-user-id-error';\n    }\n    return 'unknown-error';\n  }\n\n  /**\n   * Given a GCM or Firefox subscription endpoint or Safari device token, returns the user ID from OneSignal's server.\n   * Used if the user clears his or her IndexedDB database and we need the user ID again.\n   */\n  static getUserIdFromSubscriptionIdentifier(appId: string, deviceType: number, identifier: string): Promise<string> {\n    // Calling POST /players with an existing identifier returns us that player ID\n    return OneSignalApi.post('players', {\n      app_id: appId,\n      device_type: deviceType,\n      identifier: identifier,\n      notification_types: SubscriptionStateKind.TemporaryWebRecord,\n    }).then(response => {\n      if (response && response.id) {\n        return response.id;\n      } else {\n        return null;\n      }\n    }).catch(e => {\n      log.debug('Error getting user ID from subscription identifier:', e);\n      return null;\n    });\n  }\n\n  static getPlayer(appId, playerId) {\n    return OneSignalApi.get(`players/${playerId}?app_id=${appId}`);\n  }\n\n  static updatePlayer(appId: string, playerId: string, options?: Object) {\n    return OneSignalApi.put(`players/${playerId.value}`, objectAssign({app_id: appId.value}, options));\n  }\n\n  static sendNotification(appId: string, playerIds: Array<string>, titles, contents, url, icon, data, buttons) {\n    var params = {\n      app_id: appId.value,\n      contents: contents,\n      include_player_ids: playerIds.map(x => x.value),\n      isAnyWeb: true,\n      data: data,\n      web_buttons: buttons\n    };\n    if (titles) {\n      (params as any).headings = titles;\n    }\n    if (url) {\n      (params as any).url = url;\n    }\n    if (icon) {\n      (params as any).chrome_web_icon = icon;\n      (params as any).firefox_icon = icon;\n    }\n    trimUndefined(params);\n    return OneSignalApi.post('notifications', params);\n  }\n\n  static async downloadServerAppConfig(appId: string): Promise<ServerAppConfig> {\n    try {\n      const serverConfig = await new Promise<ServerAppConfig>((resolve, reject) => {\n        if (SdkEnvironment.getWindowEnv() !== WindowEnvironmentKind.ServiceWorker) {\n          /**\n           * Due to CloudFlare's algorithms, the .js extension is required for proper caching. Don't remove it!\n           */\n          JSONP(`${SdkEnvironment.getOneSignalApiUrl().toString()}/sync/${appId.value}/web`, null, (err, data) => {\n            if (err) {\n              reject(err);\n            } else {\n              if (data.success) {\n                resolve(data);\n              } else {\n                // For JSONP, we return a 200 even for errors, there's a success: false param\n                reject(data);\n              }\n            }\n          });\n        } else {\n          resolve(OneSignalApi.get(`sync/${appId.value}/web`, null));\n        }\n      });\n      return serverConfig;\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  static async createUser(deviceRecord: DeviceRecord): Promise<string> {\n    const response = await OneSignalApi.post(`players`, deviceRecord.serialize());\n    if (response && response.success) {\n      return response.id;\n    } else {\n      return null;\n    }\n  }\n\n  static async createEmailRecord(\n    appConfig: AppConfig,\n    emailProfile: EmailProfile,\n    pushId?: string\n  ): Promise<string> {\n    const response = await OneSignalApi.post(`players`, {\n      app_id: appConfig.appId.value,\n      device_type: 11,\n      identifier: emailProfile.emailAddress,\n      device_player_id: (pushId && pushId.value) ? pushId.value : undefined,\n      email_auth_hash: emailProfile.emailAuthHash ? emailProfile.emailAuthHash : undefined\n    });\n    if (response && response.success) {\n      return response.id;\n    } else {\n      return null;\n    }\n  }\n\n  static async updateEmailRecord(\n    appConfig: AppConfig,\n    emailProfile: EmailProfile,\n    deviceId?: string\n  ): Promise<string> {\n    const response = await OneSignalApi.put(`players/${emailProfile.emailId.value}`, {\n      app_id: appConfig.appId.value,\n      identifier: emailProfile.emailAddress,\n      device_player_id: (deviceId && deviceId.value) ? deviceId.value : undefined,\n      email_auth_hash: emailProfile.emailAuthHash ? emailProfile.emailAuthHash : undefined\n    });\n    if (response && response.success) {\n      return response.id;\n    } else {\n      return null;\n    }\n  }\n\n  static async logoutEmail(appConfig: AppConfig, emailProfile: EmailProfile, deviceId: string): Promise<boolean> {\n    const response = await OneSignalApi.post(`players/${deviceId.value}/email_logout`, {\n      app_id: appConfig.appId.value,\n      parent_player_id: emailProfile.emailId.value,\n      email_auth_hash: emailProfile.emailAuthHash ? emailProfile.emailAuthHash : undefined\n    });\n    if (response && response.success) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  static async updateUserSession(\n    userId: string,\n    deviceRecord: DeviceRecord,\n  ): Promise<string> {\n    try {\n      const response = await OneSignalApi.post(`players/${userId.value}/on_session`, deviceRecord.serialize());\n      if (response.id) {\n        // A new user ID can be returned\n        return response.id;\n      } else {\n        return userId;\n      }\n    } catch (e) {\n      if (e && Array.isArray(e.errors) && e.errors.length > 0 && contains(e.errors[0], 'app_id not found')) {\n        throw new OneSignalApiError(OneSignalApiErrorKind.MissingAppId);\n      } else throw e;\n    }\n  }\n}\n","import * as heir from 'heir';\nimport * as log from 'loglevel';\nimport * as objectAssign from 'object-assign';\nimport * as EventEmitter from 'wolfy87-eventemitter';\n\nimport Environment from './Environment';\nimport SdkEnvironment from './managers/SdkEnvironment';\n\nimport { contains, getRandomUuid } from './utils';\n\n\n\n/**\n * Establishes a cross-domain MessageChannel between the current browsing context (this page) and another (an iFrame, popup, or parent page).\n */\nexport default class Postmam {\n\n  static get HANDSHAKE_MESSAGE() {\n    return \"onesignal.postmam.handshake\";\n  }\n\n  static get CONNECTED_MESSAGE() {\n    return \"onesignal.postmam.connected\";\n  }\n\n  public channel: MessageChannel;\n  public messagePort: MessagePort;\n  public isListening: boolean;\n  public isConnected: boolean;\n  public replies: any;\n\n  /**\n   * Initializes Postmam with settings but does not establish a connection a channel or set up any message listeners.\n   * @param windowReference The window to postMessage() the initial MessageChannel port to.\n   * @param sendToOrigin The origin that will receive the initial postMessage with the transferred message channel port object.\n   * @param receiveFromOrigin The origin to allow incoming messages from. If messages do not come from this origin they will be discarded. Only affects the initial handshake.\n   * @remarks The initiating (client) page must call this after the page has been loaded so that the other page has a chance to receive the initial handshake message. The receiving (server) page must set up a message listener to catch the initial handshake message.\n   */\n  constructor(public windowReference: any,\n              public sendToOrigin: string,\n              public receiveFromOrigin: string) {\n    if (!window || !window.postMessage) {\n      throw new Error('Must pass in a valid window reference supporting postMessage():' + windowReference);\n    }\n    if (!sendToOrigin || !receiveFromOrigin) {\n      throw new Error('Invalid origin. Must be set.');\n    }\n    heir.merge(this, new EventEmitter());\n    this.channel = new MessageChannel();\n    this.messagePort = null;\n    this.isListening = false;\n    this.isConnected = false;\n    this.replies = {};\n  }\n\n  /**\n   * Opens a message event listener to listen for a Postmam handshake from another browsing context. This listener is closed as soon as the connection is established.\n   */\n  listen() {\n    log.debug('(Postmam) Called listen().');\n    if (this.isListening) {\n      log.debug('(Postmam) Already listening for Postmam connections.');\n      return;\n    }\n    if (!Environment.isBrowser()) {\n      return;\n    }\n    this.isListening = true;\n    log.debug('(Postmam) Listening for Postmam connections.', this);\n    // One of the messages will contain our MessageChannel port\n    window.addEventListener('message', this.onWindowMessagePostmanConnectReceived.bind(this));\n  }\n\n  startPostMessageReceive() {\n    window.addEventListener('message', this.onWindowPostMessageReceived.bind(this));\n  }\n\n  stopPostMessageReceive() {\n    window.removeEventListener('message', this.onWindowPostMessageReceived);\n  }\n\n  destroy() {\n    this.stopPostMessageReceive();\n    (this as any).removeEvent();\n  }\n\n  onWindowPostMessageReceived(e) {\n    // Discard messages from unexpected origins; messages come frequently from other origins\n    if (!this.isSafeOrigin(e.origin)) {\n      // log.debug(`(Postmam) Discarding message because ${e.origin} is not an allowed origin:`, e.data);\n      return;\n    }\n    //log.debug(`(Postmam) (onWindowPostMessageReceived) (${SdkEnvironment.getWindowEnv().toString()}):`, e);\n    let { id: messageId, command: messageCommand, data: messageData, source: messageSource } = e.data;\n    if (messageCommand === Postmam.CONNECTED_MESSAGE) {\n      (this as any).emit('connect');\n      this.isConnected = true;\n      return;\n    }\n    let messageBundle = {\n      id: messageId,\n      command: messageCommand,\n      data: messageData,\n      source: messageSource\n    };\n    let messageBundleWithReply = objectAssign({\n      reply: this.reply.bind(this, messageBundle)\n    }, messageBundle);\n    if (this.replies.hasOwnProperty(messageId)) {\n      log.info('(Postmam) This message is a reply.');\n      let replyFn = this.replies[messageId].bind(window);\n      let replyFnReturnValue = replyFn(messageBundleWithReply);\n      if (replyFnReturnValue === false) {\n        delete this.replies[messageId];\n      }\n    } else {\n      (this as any).emit(messageCommand, messageBundleWithReply);\n    }\n  }\n\n  onWindowMessagePostmanConnectReceived(e) {\n    log.debug(`(Postmam) (${SdkEnvironment.getWindowEnv().toString()}) Window postmessage for Postman connect received:`, e);\n    // Discard messages from unexpected origins; messages come frequently from other origins\n    if (!this.isSafeOrigin(e.origin)) {\n      // log.debug(`(Postmam) Discarding message because ${e.origin} is not an allowed origin:`, e.data)\n      return;\n    }\n    var { handshake } = e.data;\n    if (handshake !== Postmam.HANDSHAKE_MESSAGE) {\n      log.info('(Postmam) Got a postmam message, but not our expected handshake:', e.data);\n      // This was not our expected handshake message\n      return;\n    } else {\n      log.info('(Postmam) Got our expected Postmam handshake message (and connecting...):', e.data);\n      // This was our expected handshake message\n      // Remove our message handler so we don't get spammed with cross-domain messages\n      window.removeEventListener('message', this.onWindowMessagePostmanConnectReceived);\n      // Get the message port\n      this.messagePort = e.ports[0];\n      this.messagePort.addEventListener('message', this.onMessageReceived.bind(this), false);\n      log.info('(Postmam) Removed previous message event listener for handshakes, replaced with main message listener.');\n      this.messagePort.start();\n      this.isConnected = true;\n      log.info(`(Postmam) (${SdkEnvironment.getWindowEnv().toString()}) Connected.`);\n      this.message(Postmam.CONNECTED_MESSAGE);\n      (this as any).emit('connect');\n    }\n  }\n\n  /**\n   * Establishes a message channel with a listening Postmam on another browsing context.\n   * @remarks Only call this if listen() is called on another page.\n   */\n  connect() {\n    log.info(`(Postmam) (${SdkEnvironment.getWindowEnv().toString()}) Establishing a connection to ${this.sendToOrigin}.`);\n    this.messagePort = this.channel.port1;\n    this.messagePort.addEventListener('message', this.onMessageReceived.bind(this), false);\n    this.messagePort.start();\n    this.windowReference.postMessage({\n      handshake: Postmam.HANDSHAKE_MESSAGE\n    }, this.sendToOrigin, [this.channel.port2]);\n  }\n\n  onMessageReceived(e) {\n    //log.debug(`(Postmam) (${SdkEnvironment.getWindowEnv().toString()}):`, e.data);\n    if (!e.data) {\n      log.debug(`(${SdkEnvironment.getWindowEnv().toString()}) Received an empty Postmam message:`, e);\n      return;\n    }\n    let { id: messageId, command: messageCommand, data: messageData, source: messageSource } = e.data;\n    if (messageCommand === Postmam.CONNECTED_MESSAGE) {\n      (this as any).emit('connect');\n      this.isConnected = true;\n      return;\n    }\n    let messageBundle = {\n      id: messageId,\n      command: messageCommand,\n      data: messageData,\n      source: messageSource\n    };\n    let messageBundleWithReply = objectAssign({\n      reply: this.reply.bind(this, messageBundle)\n    }, messageBundle);\n    if (this.replies.hasOwnProperty(messageId)) {\n      let replyFn = this.replies[messageId].bind(window);\n      let replyFnReturnValue = replyFn(messageBundleWithReply);\n      if (replyFnReturnValue === false) {\n        delete this.replies[messageId];\n      }\n    } else {\n      (this as any).emit(messageCommand, messageBundleWithReply);\n    }\n  }\n\n  reply(originalMessageBundle, data, onReply) {\n    const messageBundle = {\n      id: originalMessageBundle.id,\n      command: originalMessageBundle.command,\n      data: data,\n      source: SdkEnvironment.getWindowEnv().toString(),\n      isReply: true\n    };\n    if (typeof onReply === 'function') {\n      this.replies[messageBundle.id] = onReply;\n    }\n    this.messagePort.postMessage(messageBundle);\n  }\n\n  /**\n   * Sends via window.postMessage.\n   */\n  postMessage(command, data, onReply?) {\n    if (!command || command == '') {\n      throw new Error(\"(Postmam) Postmam command must not be empty.\");\n    }\n    if (typeof data === 'function') {\n      log.debug('You passed a function to data, did you mean to pass null?');\n      return;\n    }\n    const messageBundle = {\n      id: getRandomUuid(),\n      command: command,\n      data: data,\n      source: SdkEnvironment.getWindowEnv().toString()\n    };\n    if (typeof onReply === 'function') {\n      this.replies[messageBundle.id] = onReply;\n    }\n    this.windowReference.postMessage(messageBundle, '*');\n  }\n\n  /**\n   * Sends via MessageChannel.port.postMessage\n   */\n  message(command, data?, onReply?) {\n    if (!command || command == '') {\n      throw new Error(\"(Postmam) Postmam command must not be empty.\");\n    }\n    if (typeof data === 'function') {\n      log.debug('You passed a function to data, did you mean to pass null?')\n      return;\n    }\n    const messageBundle = {\n      id: getRandomUuid(),\n      command: command,\n      data: data,\n      source: SdkEnvironment.getWindowEnv().toString()\n    };\n    if (typeof onReply === 'function') {\n      this.replies[messageBundle.id] = onReply;\n    }\n    this.messagePort.postMessage(messageBundle);\n  }\n\n  /**\n   * If the provided Site URL on the dashboard, which restricts the post message origin, uses the https:// protocol\n   * Then relax the postMessage restriction to also allow the http:// protocol for the same domain.\n   */\n  generateSafeOrigins(inputOrigin: string) {\n    // Trims trailing slashes and other undesirable artifacts\n    const safeOrigins = [];\n    try {\n      const url = new URL(inputOrigin);\n      let reducedHost = url.host;\n      if (url.host.indexOf('www.') === 0) {\n        reducedHost = url.host.replace('www.', '');\n      }\n      if (url.protocol === 'https:') {\n        safeOrigins.push(`https://${reducedHost}`);\n        safeOrigins.push(`https://www.${reducedHost}`);\n      }\n      else if (url.protocol === 'http:') {\n        safeOrigins.push(`http://${reducedHost}`);\n        safeOrigins.push(`http://www.${reducedHost}`);\n        safeOrigins.push(`https://${reducedHost}`);\n        safeOrigins.push(`https://www.${reducedHost}`);\n      }\n    } catch (ex) {\n      // Invalid URL: Users can enter '*' or 'https://*.google.com' which is invalid.\n    }\n    return safeOrigins;\n  }\n\n  isSafeOrigin(messageOrigin) {\n    if (!OneSignal.config) {\n      var subdomain = \"x\";\n    } else {\n      var subdomain = OneSignal.config.subdomain as string;\n    }\n\n    const otherAllowedOrigins = this.generateSafeOrigins(this.receiveFromOrigin);\n\n    return (// messageOrigin === '' || TODO: See if messageOrigin can be blank\n            messageOrigin === 'https://onesignal.com' ||\n            messageOrigin === `https://${subdomain || ''}.onesignal.com` ||\n            messageOrigin === `https://${subdomain || ''}.os.tc` ||\n            messageOrigin === `https://${subdomain || ''}.os.tc:3001` ||\n            (messageOrigin === SdkEnvironment.getOneSignalApiUrl().origin) ||\n            this.receiveFromOrigin === '*' ||\n            contains(otherAllowedOrigins, messageOrigin));\n  }\n\n  on(..._) {\n    // Overriden by event emitter lib\n  }\n\n  once(..._) {\n    // Overriden by event emitter lib\n  }\n}\n","import OneSignalError from \"./OneSignalError\";\n\nexport enum InvalidArgumentReason {\n  Empty,\n  Malformed,\n  EnumOutOfRange\n}\n\nexport class InvalidArgumentError extends OneSignalError {\n  argument: string;\n  reason: string;\n\n  constructor(argName: string, reason: InvalidArgumentReason) {\n    switch (reason) {\n      case InvalidArgumentReason.Empty:\n        super(`Supply a non-empty value to '${argName}'.`);\n        break;\n      case InvalidArgumentReason.Malformed:\n        super(`The value for '${argName}' was malformed.`);\n        break;\n      case InvalidArgumentReason.EnumOutOfRange:\n        super(`The value for '${argName}' was out of range of the expected input enum.`);\n        break;\n    }\n    this.argument = argName;\n    this.reason = InvalidArgumentReason[reason];\n  }\n}\n","import { InvalidArgumentError, InvalidArgumentReason } from '../errors/InvalidArgumentError';\nimport { InvalidStateError, InvalidStateReason } from '../errors/InvalidStateError';\nimport SdkEnvironment from '../managers/SdkEnvironment';\nimport { ServiceWorkerActiveState } from '../managers/ServiceWorkerManager';\nimport Context from '../models/Context';\nimport { WindowEnvironmentKind } from '../models/WindowEnvironmentKind';\nimport * as log from 'loglevel';\nimport { Serializable } from '../models/Serializable';\nimport Environment from '../Environment';\n\n\nexport enum WorkerMessengerCommand {\n  WorkerVersion = \"GetWorkerVersion\",\n  Subscribe = \"Subscribe\",\n  SubscribeNew = \"SubscribeNew\",\n  AmpSubscriptionState = \"amp-web-push-subscription-state\",\n  AmpSubscribe = \"amp-web-push-subscribe\",\n  AmpUnsubscribe = \"amp-web-push-unsubscribe\",\n  NotificationDisplayed = 'notification.displayed',\n  NotificationClicked = 'notification.clicked',\n  NotificationDismissed = 'notification.dismissed',\n  RedirectPage = 'command.redirect',\n}\n\nexport interface WorkerMessengerMessage {\n  command: WorkerMessengerCommand,\n  payload: WorkerMessengerPayload\n}\n\nexport interface WorkerMessengerReplyBufferRecord {\n  callback: Function,\n  onceListenerOnly: boolean\n}\n\nexport class WorkerMessengerReplyBuffer {\n\n  private replies: object;\n\n  constructor() {\n    this.replies = {};\n  }\n\n  public addListener(command: WorkerMessengerCommand, callback: Function, onceListenerOnly: boolean) {\n    const record = {\n      callback: callback,\n      onceListenerOnly: onceListenerOnly\n    };\n\n    if (this.findListenersForMessage(command).length > 0) {\n      this.replies[command.toString()].push(record);\n    } else {\n      this.replies[command.toString()] = [record];\n    }\n  }\n\n  public findListenersForMessage(command: WorkerMessengerCommand): any {\n    return this.replies[command.toString()] || [];\n  }\n\n  public deleteListenerRecords(command: WorkerMessengerCommand) {\n    this.replies[command.toString()] = null;\n  }\n\n  public deleteAllListenerRecords() {\n    this.replies = {};\n  }\n\n  public deleteListenerRecord(command: WorkerMessengerCommand, targetRecord: any) {\n    const listenersForCommand = this.replies[command.toString()];\n    for (let listenerRecordIndex = listenersForCommand.length - 1; listenerRecordIndex >= 0; listenerRecordIndex--) {\n      const listenerRecord = listenersForCommand[listenerRecordIndex];\n      if (listenerRecord === targetRecord) {\n        listenersForCommand.splice(listenerRecordIndex, 1);\n      }\n    }\n  }\n}\n\nexport type WorkerMessengerPayload = Serializable | number | string | object | boolean;\n\n /**\n * A Promise-based PostMessage helper to ease back-and-forth replies between\n * service workers and window frames.\n */\nexport class WorkerMessenger {\n\n  private context: Context;\n  private replies: WorkerMessengerReplyBuffer;\n  private debug: boolean;\n\n  constructor(context: Context) {\n    this.context = context;\n    this.replies = new WorkerMessengerReplyBuffer();\n    this.debug = true;\n  }\n\n  /**\n   * Broadcasts a message from a service worker to all clients, including uncontrolled clients.\n   */\n  async broadcast(command: WorkerMessengerCommand, payload: WorkerMessengerPayload) {\n    const env = SdkEnvironment.getWindowEnv();\n\n    if (env !== WindowEnvironmentKind.ServiceWorker) {\n      return;\n    } else {\n      const clients = await self.clients.matchAll({ type: 'window', includeUncontrolled: true });\n      for (let client of clients) {\n        log.debug(`[Worker Messenger] [SW -> Page] Broadcasting '${command.toString()}' to window client ${client.url}.`)\n        client.postMessage({\n          command: command,\n          payload: payload\n        } as any);\n      }\n    }\n  }\n\n  /*\n    For pages:\n\n      Sends a postMessage() to the service worker controlling the page.\n\n      Waits until the service worker is controlling the page before sending the\n      message.\n   */\n  async unicast(command: WorkerMessengerCommand, payload?: WorkerMessengerPayload, windowClient?: WindowClient) {\n    const env = SdkEnvironment.getWindowEnv();\n\n    if (env === WindowEnvironmentKind.ServiceWorker) {\n      if (!windowClient) {\n        throw new InvalidArgumentError('windowClient', InvalidArgumentReason.Empty);\n      } else {\n        log.debug(`[Worker Messenger] [SW -> Page] Unicasting '${command.toString()}' to window client ${windowClient.url}.`)\n        windowClient.postMessage({\n          command: command,\n          payload: payload\n        } as any);\n      }\n    } else {\n      if (!(await this.isWorkerControllingPage())) {\n        log.debug(\"[Worker Messenger] The page is not controlled by the service worker yet. Waiting...\", self.registration);\n      }\n      await this.waitUntilWorkerControlsPage();\n      log.debug(`[Worker Messenger] [Page -> SW] Unicasting '${command.toString()}' to service worker.`)\n      navigator.serviceWorker.controller.postMessage({\n        command: command,\n        payload: payload\n      })\n    }\n  }\n\n  /**\n   * Due to https://github.com/w3c/ServiceWorker/issues/1156, listen() must\n   * synchronously add self.addEventListener('message') if we are running in the\n   * service worker.\n   *\n   * @param listenIfPageUncontrolled If true, begins listening for service\n   * worker messages even if the service worker does not control this page. This\n   * parameter is set to true on HTTPS iframes expecting service worker messages\n   * that live under an HTTP page.\n   */\n  public listen(listenIfPageUncontrolled?: boolean) {\n    if (!Environment.supportsServiceWorkers()) {\n      return;\n    }\n\n    const env = SdkEnvironment.getWindowEnv();\n\n    if (env === WindowEnvironmentKind.ServiceWorker) {\n      self.addEventListener('message', this.onWorkerMessageReceivedFromPage.bind(this));\n      log.debug('[Worker Messenger] Service worker is now listening for messages.');\n    } else {\n      this.listenForPage(listenIfPageUncontrolled);\n    }\n  }\n\n  /**\n   * Listens for messages for the service worker.\n   *\n   * Waits until the service worker is controlling the page before listening for\n   * messages.\n   */\n  private async listenForPage(listenIfPageUncontrolled?: boolean) {\n    if (!listenIfPageUncontrolled) {\n      if (!(await this.isWorkerControllingPage())) {\n        log.debug(`(${location.origin}) [Worker Messenger] The page is not controlled by the service worker yet. Waiting...`, self.registration);\n      }\n      await this.waitUntilWorkerControlsPage();\n      log.debug(`(${location.origin}) [Worker Messenger] The page is now controlled by the service worker.`);\n    }\n\n    navigator.serviceWorker.addEventListener('message', this.onPageMessageReceivedFromServiceWorker.bind(this));\n    log.debug(`(${location.origin}) [Worker Messenger] Page is now listening for messages.`);\n  }\n\n  onWorkerMessageReceivedFromPage(event: ServiceWorkerMessageEvent) {\n    const data: WorkerMessengerMessage = event.data;\n\n    /* If this message doesn't contain our expected fields, discard the message */\n    /* The payload may be null. AMP web push sends commands to our service worker in the format:\n\n       { command: \"amp-web-push-subscription-state\", payload: null }\n       { command: \"amp-web-push-unsubscribe\", payload: null }\n       { command: \"amp-web-push-subscribe\", payload: null }\n\n    */\n    if (!data || !data.command) {\n      return;\n    }\n\n    const listenerRecords = this.replies.findListenersForMessage(data.command);\n    const listenersToRemove = [];\n    const listenersToCall = [];\n\n    log.debug(`[Worker Messenger] Service worker received message:`, event.data);\n\n    for (let listenerRecord of listenerRecords) {\n      if (listenerRecord.onceListenerOnly) {\n        listenersToRemove.push(listenerRecord);\n      }\n      listenersToCall.push(listenerRecord);\n    }\n    for (let i = listenersToRemove.length - 1; i >= 0; i--) {\n      const listenerRecord = listenersToRemove[i];\n      this.replies.deleteListenerRecord(data.command, listenerRecord);\n    }\n    for (let listenerRecord of listenersToCall) {\n      listenerRecord.callback.apply(null, [data.payload]);\n    }\n  }\n\n  /*\n  Occurs when the page receives a message from the service worker.\n\n  A map of callbacks is checked to see if anyone is listening to the specific\n  message topic. If no one is listening to the message, it is discarded;\n  otherwise, the listener callback is executed.\n  */\n  onPageMessageReceivedFromServiceWorker(event: ServiceWorkerMessageEvent) {\n    const data: WorkerMessengerMessage = event.data;\n\n    /* If this message doesn't contain our expected fields, discard the message */\n    if (!data || !data.command) {\n      return;\n    }\n\n    const listenerRecords = this.replies.findListenersForMessage(data.command);\n    const listenersToRemove = [];\n    const listenersToCall = [];\n\n    log.debug(`[Worker Messenger] Page received message:`, event.data);\n\n    for (let listenerRecord of listenerRecords) {\n      if (listenerRecord.onceListenerOnly) {\n        listenersToRemove.push(listenerRecord);\n      }\n      listenersToCall.push(listenerRecord);\n    }\n    for (let i = listenersToRemove.length - 1; i >= 0; i--) {\n      const listenerRecord = listenersToRemove[i];\n      this.replies.deleteListenerRecord(data.command, listenerRecord);\n    }\n    for (let listenerRecord of listenersToCall) {\n      listenerRecord.callback.apply(null, [data.payload]);\n    }\n  }\n\n  /*\n    Subscribes a callback to be notified every time a service worker sends a\n    message to the window frame with the specific command.\n   */\n  on(command: WorkerMessengerCommand, callback: (WorkerMessengerPayload) => void): void {\n    this.replies.addListener(command, callback, false);\n  }\n\n  /*\n  Subscribes a callback to be notified the next time a service worker sends a\n  message to the window frame with the specific command.\n\n  The callback is executed once at most.\n  */\n  once(command: WorkerMessengerCommand, callback: (WorkerMessengerPayload) => void): void {\n    this.replies.addListener(command, callback, true);\n  }\n\n  /**\n    Unsubscribe a callback from being notified about service worker messages\n    with the specified command.\n   */\n  off(command?: WorkerMessengerCommand): void {\n    if (command) {\n      this.replies.deleteListenerRecords(command);\n    } else {\n      this.replies.deleteAllListenerRecords();\n    }\n  }\n\n\n  /*\n    Service worker postMessage() communication relies on the property\n    navigator.serviceWorker.controller to be non-null. The controller property\n    references the active service worker controlling the page. Without this\n    property, there is no service worker to message.\n\n    The controller property is set when a service worker has successfully\n    registered, installed, and activated a worker, and when a page isn't loaded\n    in a hard refresh mode bypassing the cache.\n\n    It's possible for a service worker to take a second page load to be fully\n    activated.\n   */\n  async isWorkerControllingPage(): Promise<boolean> {\n    const env = SdkEnvironment.getWindowEnv();\n\n    if (env === WindowEnvironmentKind.ServiceWorker) {\n      return !!self.registration.active;\n    } else {\n      const workerState = await this.context.serviceWorkerManager.getActiveState();\n      return workerState === ServiceWorkerActiveState.WorkerA ||\n        workerState === ServiceWorkerActiveState.WorkerB;\n    }\n  }\n\n  /**\n   * For pages, waits until one of our workers is activated.\n   *\n   * For service workers, waits until the registration is active.\n   */\n  async waitUntilWorkerControlsPage() {\n    return new Promise<void>(async resolve => {\n      if (await this.isWorkerControllingPage()) {\n        resolve();\n      } else {\n        const env = SdkEnvironment.getWindowEnv();\n\n        if (env === WindowEnvironmentKind.ServiceWorker) {\n          self.addEventListener('activate', async e => {\n            if (await this.isWorkerControllingPage()) {\n              resolve();\n            }\n          });\n        } else {\n          navigator.serviceWorker.addEventListener('controllerchange', async e => {\n            if (await this.isWorkerControllingPage()) {\n              resolve();\n            }\n          });\n        }\n      }\n    });\n  }\n}\n","import OneSignalError from \"./OneSignalError\";\n\n\nexport default class NotImplementedError extends OneSignalError {\n  constructor() {\n    super('This code is not implemented yet.');\n  }\n}\n","enum NotificationPermission {\n  /**\n   * The user has not granted notification permissions and may have just dismissed the notification permission prompt.\n   */\n  Default = \"default\",\n  /**\n   * The user has granted notification permissions.\n   */\n  Granted = \"granted\",\n  /**\n   * The user has blocked notifications.\n   */\n  Denied = \"denied\"\n}\n\nexport { NotificationPermission };\n","/*\n LimitStore.put('colorado', 'rocky');\n [\"rocky\"]\n LimitStore.put('colorado', 'mountain');\n [\"rocky\", \"mountain\"]\n LimitStore.put('colorado', 'national');\n [\"mountain\", \"national\"]\n LimitStore.put('colorado', 'park');\n [\"national\", \"park\"]\n */\nexport default class LimitStore {\n  static store = {};\n  static LIMIT = 2;\n\n  static put(key, value) {\n    if (LimitStore.store[key] === undefined) {\n      LimitStore.store[key] = [null, null];\n    }\n    LimitStore.store[key].push(value);\n    if (LimitStore.store[key].length == LimitStore.LIMIT + 1) {\n      LimitStore.store[key].shift();\n    }\n    return LimitStore.store[key];\n  }\n\n  static get(key) {\n    if (LimitStore.store[key] === undefined) {\n      LimitStore.store[key] = [null, null];\n    }\n    return LimitStore.store[key];\n  }\n\n  static getFirst(key) {\n    return LimitStore.get(key)[0];\n  }\n\n  static getLast(key) {\n    return LimitStore.get(key)[1];\n  }\n\n  static remove(key) {\n    delete LimitStore.store[key];\n  }\n\n  static isEmpty(key) {\n    let values = LimitStore.get(key);\n    return values[0] === null && values[1] === null;\n  }\n}","export enum SubscriptionStateKind {\n  Subscribed = 1,\n  MutedByApi = -2,\n  NotSubscribed = -10,\n  TemporaryWebRecord = -20,\n  PermissionRevoked = -21,\n  PushSubscriptionRevoked = -22,\n}\n","import * as Browser from 'bowser';\nimport * as log from 'loglevel';\n\nimport Event from '../Event';\nimport MainHelper from '../helpers/MainHelper';\nimport SubscriptionHelper from '../helpers/SubscriptionHelper';\nimport { ResourceLoadState } from '../services/DynamicResourceLoader';\nimport { addCssClass, addDomElement, contains, decodeHtmlEntities, delay, nothing, once, removeDomElement } from '../utils';\nimport Badge from './Badge';\nimport Button from './Button';\nimport Dialog from './Dialog';\nimport Launcher from './Launcher';\nimport Message from './Message';\n\nvar logoSvg = `<svg class=\"onesignal-bell-svg\" xmlns=\"http://www.w3.org/2000/svg\" width=\"99.7\" height=\"99.7\" viewBox=\"0 0 99.7 99.7\"><circle class=\"background\" cx=\"49.9\" cy=\"49.9\" r=\"49.9\"/><path class=\"foreground\" d=\"M50.1 66.2H27.7s-2-.2-2-2.1c0-1.9 1.7-2 1.7-2s6.7-3.2 6.7-5.5S33 52.7 33 43.3s6-16.6 13.2-16.6c0 0 1-2.4 3.9-2.4 2.8 0 3.8 2.4 3.8 2.4 7.2 0 13.2 7.2 13.2 16.6s-1 11-1 13.3c0 2.3 6.7 5.5 6.7 5.5s1.7.1 1.7 2c0 1.8-2.1 2.1-2.1 2.1H50.1zm-7.2 2.3h14.5s-1 6.3-7.2 6.3-7.3-6.3-7.3-6.3z\"/><ellipse class=\"stroke\" cx=\"49.9\" cy=\"49.9\" rx=\"37.4\" ry=\"36.9\"/></svg>`;\n\n\nexport default class Bell {\n  public enable: boolean;\n  public size: string;\n  public position: string;\n  public theme: string;\n  public showLauncherAfter: number;\n  public showBadgeAfter: number;\n  public text: any;\n  public prenotify: boolean;\n  public showCredit: boolean;\n  public colors: any;\n  public offset: any;\n  public options: any;\n  public state: any;\n  public _ignoreSubscriptionState: boolean;\n  public hovering: boolean;\n  public initialized: boolean;\n  public _launcher: any;\n  public _button: any;\n  public _badge: any;\n  public _message: any;\n  public _dialog: any;\n\n  static get EVENTS() {\n    return {\n      STATE_CHANGED: 'notifyButtonStateChange',\n      LAUNCHER_CLICK: 'notifyButtonLauncherClick',\n      BELL_CLICK: 'notifyButtonButtonClick',\n      SUBSCRIBE_CLICK: 'notifyButtonSubscribeClick',\n      UNSUBSCRIBE_CLICK: 'notifyButtonUnsubscribeClick',\n      HOVERING: 'notifyButtonHovering',\n      HOVERED: 'notifyButtonHover'\n    };\n  }\n\n  static get STATES() {\n    return {\n      UNINITIALIZED: 'uninitialized',\n      SUBSCRIBED: 'subscribed',\n      UNSUBSCRIBED: 'unsubscribed',\n      BLOCKED: 'blocked'\n    };\n  }\n\n  static get TEXT_SUBS() {\n    return {\n      'prompt.native.grant': {\n        default: 'Allow',\n        chrome: 'Allow',\n        firefox: 'Always Receive Notifications',\n        safari: 'Allow'\n      }\n    }\n  }\n\n  substituteText() {\n    // key: 'message.action.subscribing'\n    // value: 'Click <strong>{{prompt.native.grant}}</strong> to receive notifications'\n    for (var key in this.text) {\n      if (this.text.hasOwnProperty(key)) {\n        let value = this.text[key];\n        // browserName could be 'chrome' or 'firefox' or 'safari'\n        let browserName = Browser.name.toLowerCase();\n\n        // tKey: 'prompt.native.grant'  (from TEXT_SUBS)\n        // tValue: { chrome: 'Allow', firefox: 'Al... }\n        // zValue: 'Allow', if browserName === 'chrome'\n        for (var tKey in Bell.TEXT_SUBS) {\n          if (Bell.TEXT_SUBS.hasOwnProperty(tKey)) {\n            let tValue = Bell.TEXT_SUBS[tKey];\n            let zValue = tValue[browserName];\n            if (value && contains(value, '{{')) {\n              this.text[key] = value.replace(`{{${tKey}}}`, (zValue !== undefined ? zValue : tValue['default']));\n            }\n          }\n        }\n      }\n    }\n  }\n\n  constructor({\n    enable = false,\n    size = 'medium',\n    position = 'bottom-right',\n    theme = 'default',\n    showLauncherAfter = 10,\n    showBadgeAfter = 300,\n    text = {\n      'tip.state.unsubscribed': 'Subscribe to notifications',\n      'tip.state.subscribed': \"You're subscribed to notifications\",\n      'tip.state.blocked': \"You've blocked notifications\",\n      'message.prenotify': 'Click to subscribe to notifications',\n      'message.action.subscribing': \"Click <strong>{{prompt.native.grant}}</strong> to receive notifications\",\n      'message.action.subscribed': \"Thanks for subscribing!\",\n      'message.action.resubscribed': \"You're subscribed to notifications\",\n      'message.action.unsubscribed': \"You won't receive notifications again\",\n      'dialog.main.title': 'Manage Site Notifications',\n      'dialog.main.button.subscribe': 'SUBSCRIBE',\n      'dialog.main.button.unsubscribe': 'UNSUBSCRIBE',\n      'dialog.blocked.title': 'Unblock Notifications',\n      'dialog.blocked.message': \"Follow these instructions to allow notifications:\"\n    },\n    prenotify = true,\n    showCredit = true,\n    colors = null,\n    offset = null,\n    launcher = null\n    } = {}) {\n    this.options = {\n      enable: enable,\n      size: size,\n      position: position,\n      theme: theme,\n      showLauncherAfter: showLauncherAfter,\n      showBadgeAfter: showBadgeAfter,\n      text: text,\n      prenotify: prenotify,\n      showCredit: showCredit,\n      colors: colors,\n      offset: offset\n    };\n\n    if (!this.options.enable)\n      return;\n\n    if (!contains(['small', 'medium', 'large'], this.options.size))\n      throw new Error(`Invalid size ${this.options.size} for notify button. Choose among 'small', 'medium', or 'large'.`);\n    if (!contains(['bottom-left', 'bottom-right'], this.options.position))\n      throw new Error(`Invalid position ${this.options.position} for notify button. Choose either 'bottom-left', or 'bottom-right'.`);\n    if (!contains(['default', 'inverse'], this.options.theme))\n      throw new Error(`Invalid theme ${this.options.theme} for notify button. Choose either 'default', or 'inverse'.`);\n    if (this.options.showLauncherAfter < 0)\n      throw new Error(`Invalid delay duration of ${this.options.showLauncherAfter} for showing the notify button. Choose a value above 0.`);\n    if (this.options.showBadgeAfter < 0)\n      throw new Error(`Invalid delay duration of ${this.options.showBadgeAfter} for showing the notify button's badge. Choose a value above 0.`);\n    this.size = this.options.size;\n    this.position = this.options.position;\n    this.text = this.options.text;\n    if (!this.text['tip.state.unsubscribed'])\n      this.text['tip.state.unsubscribed'] = 'Subscribe to notifications';\n    if (!this.text['tip.state.subscribed'])\n      this.text['tip.state.subscribed'] = \"You're subscribed to notifications\";\n    if (!this.text['tip.state.blocked'])\n      this.text['tip.state.blocked'] = \"You've blocked notifications\";\n    if (!this.text['message.prenotify'])\n      this.text['message.prenotify'] = \"Click to subscribe to notifications\";\n    if (!this.text['message.action.subscribed'])\n      this.text['message.action.subscribed'] = \"Thanks for subscribing!\";\n    if (!this.text['message.action.resubscribed'])\n      this.text['message.action.resubscribed'] = \"You're subscribed to notifications\";\n    if (!this.text['message.action.subscribing'])\n      this.text['message.action.subscribing'] = \"Click <strong>{{prompt.native.grant}}</strong> to receive notifications\";\n    if (!this.text['message.action.unsubscribed'])\n      this.text['message.action.unsubscribed'] = \"You won't receive notifications again\";\n    if (!this.text['dialog.main.title'])\n      this.text['dialog.main.title'] = 'Manage Site Notifications';\n    if (!this.text['dialog.main.button.subscribe'])\n      this.text['dialog.main.button.subscribe'] = 'SUBSCRIBE';\n    if (!this.text['dialog.main.button.unsubscribe'])\n      this.text['dialog.main.button.unsubscribe'] = 'UNSUBSCRIBE';\n    if (!this.text['dialog.blocked.title'])\n      this.text['dialog.blocked.title'] = 'Unblock Notifications';\n    if (!this.text['dialog.blocked.message'])\n      this.text['dialog.blocked.message'] = 'Follow these instructions to allow notifications:';\n    this._launcher = launcher;\n    this.substituteText();\n    this.state = Bell.STATES.UNINITIALIZED;\n    this._ignoreSubscriptionState = false;\n\n    // Install event hooks\n    OneSignal.on(Bell.EVENTS.SUBSCRIBE_CLICK, () => {\n      this.dialog.subscribeButton.disabled = true;\n      this._ignoreSubscriptionState = true;\n      OneSignal.setSubscription(true)\n        .then(() => {\n          this.dialog.subscribeButton.disabled = false;\n          return this.dialog.hide();\n        })\n        .then(() => {\n          return this.message.display(Message.TYPES.MESSAGE, this.text['message.action.resubscribed'], Message.TIMEOUT);\n        })\n        .then(() => {\n          this._ignoreSubscriptionState = false;\n          this.launcher.clearIfWasInactive();\n          return this.launcher.inactivate();\n        })\n        .then(() => {\n          return this.updateState();\n        });\n    });\n\n    OneSignal.on(Bell.EVENTS.UNSUBSCRIBE_CLICK, () => {\n      this.dialog.unsubscribeButton.disabled = true;\n      OneSignal.setSubscription(false)\n        .then(() => {\n          this.dialog.unsubscribeButton.disabled = false;\n          return this.dialog.hide();\n        })\n        .then(() => {\n          this.launcher.clearIfWasInactive();\n          return this.launcher.activate();\n        })\n        .then(() => {\n          return this.message.display(Message.TYPES.MESSAGE, this.text['message.action.unsubscribed'], Message.TIMEOUT);\n        })\n        .then(() => {\n          return this.updateState();\n        });\n    });\n\n    OneSignal.on(Bell.EVENTS.HOVERING, () => {\n      this.hovering = true;\n      this.launcher.activateIfInactive();\n\n      // If there's already a message being force shown, do not override\n      if (this.message.shown || this.dialog.shown) {\n        this.hovering = false;\n        return;\n      }\n\n      // If the message is a message and not a tip, don't show it (only show tips)\n      // Messages will go away on their own\n      if (this.message.contentType === Message.TYPES.MESSAGE) {\n        this.hovering = false;\n        return;\n      }\n\n      new Promise(resolve => {\n        // If a message is being shown\n        if (this.message.queued.length > 0) {\n          return this.message.dequeue().then((msg) => {\n            this.message.content = msg;\n            this.message.contentType = Message.TYPES.QUEUED;\n            resolve();\n          });\n        } else {\n          this.message.content = decodeHtmlEntities(this.message.getTipForState());\n          this.message.contentType = Message.TYPES.TIP;\n          resolve();\n        }\n      }).then(() => {\n          return this.message.show();\n        })\n        .then(() => {\n          this.hovering = false;\n        })\n    });\n\n    OneSignal.on(Bell.EVENTS.HOVERED, () => {\n      // If a message is displayed (and not a tip), don't control it. Visitors have no control over messages\n      if (this.message.contentType === Message.TYPES.MESSAGE) {\n        return;\n      }\n\n      if (!this.dialog.hidden) {\n        // If the dialog is being brought up when clicking button, don't shrink\n        return;\n      }\n\n      if (this.hovering) {\n        this.hovering = false;\n        // Hovering still being true here happens on mobile where the message could still be showing (i.e. animating) when a HOVERED event fires\n        // In other words, you tap on mobile, HOVERING fires, and then HOVERED fires immediately after because of the way mobile click events work\n        // Basically only happens if HOVERING and HOVERED fire within a few milliseconds of each other\n        this.message.waitUntilShown()\n          .then(() => delay(Message.TIMEOUT))\n          .then(() => this.message.hide())\n          .then(() => {\n            if (this.launcher.wasInactive && this.dialog.hidden) {\n              this.launcher.inactivate();\n              this.launcher.wasInactive = null;\n            }\n          });\n      }\n\n\n      if (this.message.shown) {\n        this.message.hide()\n          .then(() => {\n            if (this.launcher.wasInactive && this.dialog.hidden) {\n              this.launcher.inactivate();\n              this.launcher.wasInactive = null;\n            }\n          });\n      }\n    });\n\n    OneSignal.on(OneSignal.EVENTS.SUBSCRIPTION_CHANGED, async isSubscribed => {\n      if (isSubscribed == true) {\n        if (this.badge.shown && this.options.prenotify) {\n          this.badge.hide();\n        }\n        if (this.dialog.notificationIcons === null) {\n          const icons = await MainHelper.getNotificationIcons();\n          this.dialog.notificationIcons = icons;\n        }\n      }\n\n      OneSignal.getNotificationPermission(permission => {\n        this.setState((isSubscribed ?\n          Bell.STATES.SUBSCRIBED :\n          ((permission === 'denied') ? Bell.STATES.BLOCKED : Bell.STATES.UNSUBSCRIBED)), this._ignoreSubscriptionState);\n      });\n    });\n\n    OneSignal.on(Bell.EVENTS.STATE_CHANGED, (state) => {\n      if (!this.launcher.element) {\n        // Notify button doesn't exist\n        return;\n      }\n      if (state.to === Bell.STATES.SUBSCRIBED) {\n        this.launcher.inactivate();\n      } else if (state.to === Bell.STATES.UNSUBSCRIBED ||\n                              Bell.STATES.BLOCKED) {\n        this.launcher.activate();\n      }\n    });\n\n    OneSignal.on(OneSignal.EVENTS.NATIVE_PROMPT_PERMISSIONCHANGED, () => {\n      this.updateState();\n    });\n\n    this.updateState();\n  }\n\n  showDialogProcedure() {\n    if (!this.dialog.shown) {\n      this.dialog.show()\n        .then(() => {\n          once(document, 'click', (e, destroyEventListener) => {\n            let wasDialogClicked = this.dialog.element.contains(e.target);\n            if (wasDialogClicked) {\n            } else {\n              destroyEventListener();\n              if (this.dialog.shown) {\n                this.dialog.hide()\n                  .then(() => {\n                    this.launcher.inactivateIfWasInactive();\n                  });\n              }\n            }\n          }, true);\n        });\n    }\n  }\n\n  async create() {\n    if (!this.options.enable)\n      return;\n\n    const sdkStylesLoadResult = await OneSignal.context.dynamicResourceLoader.loadSdkStylesheet();\n    if (sdkStylesLoadResult !== ResourceLoadState.Loaded) {\n      log.debug('Not showing notify button because styles failed to load.');\n      return;\n    }\n\n    // Remove any existing bell\n    if (this.container) {\n      removeDomElement('#onesignal-bell-container');\n    }\n\n    // Insert the bell container\n    addDomElement('body', 'beforeend', '<div id=\"onesignal-bell-container\" class=\"onesignal-bell-container onesignal-reset\"></div>');\n    // Insert the bell launcher\n    addDomElement(this.container, 'beforeend', '<div id=\"onesignal-bell-launcher\" class=\"onesignal-bell-launcher\"></div>');\n    // Insert the bell launcher button\n    addDomElement(this.launcher.selector, 'beforeend', '<div class=\"onesignal-bell-launcher-button\"></div>');\n    // Insert the bell launcher badge\n    addDomElement(this.launcher.selector, 'beforeend', '<div class=\"onesignal-bell-launcher-badge\"></div>');\n    // Insert the bell launcher message\n    addDomElement(this.launcher.selector, 'beforeend', '<div class=\"onesignal-bell-launcher-message\"></div>');\n    addDomElement(this.message.selector, 'beforeend', '<div class=\"onesignal-bell-launcher-message-body\"></div>');\n    // Insert the bell launcher dialog\n    addDomElement(this.launcher.selector, 'beforeend', '<div class=\"onesignal-bell-launcher-dialog\"></div>');\n    addDomElement(this.dialog.selector, 'beforeend', '<div class=\"onesignal-bell-launcher-dialog-body\"></div>');\n\n    // Install events\n\n    // Add visual elements\n    addDomElement(this.button.selector, 'beforeEnd', logoSvg);\n\n    const isPushEnabled = await OneSignal.isPushNotificationsEnabled();\n    const notOptedOut = await OneSignal.getSubscription();\n    const doNotPrompt = await MainHelper.wasHttpsNativePromptDismissed()\n\n    // Resize to small instead of specified size if enabled, otherwise there's a jerking motion where the bell, at a different size than small, jerks sideways to go from large -> small or medium -> small\n    let resizeTo = (isPushEnabled ? 'small' : this.options.size);\n    // Add default classes\n    await this.launcher.resize(resizeTo);\n    if (this.options.position === 'bottom-left') {\n      addCssClass(this.container, 'onesignal-bell-container-bottom-left')\n      addCssClass(this.launcher.selector, 'onesignal-bell-launcher-bottom-left')\n    }\n    else if (this.options.position === 'bottom-right') {\n      addCssClass(this.container, 'onesignal-bell-container-bottom-right')\n      addCssClass(this.launcher.selector, 'onesignal-bell-launcher-bottom-right')\n    }\n    else {\n      throw new Error('Invalid OneSignal notify button position ' + this.options.position);\n    }\n\n    if (this.options.theme === 'default') {\n      addCssClass(this.launcher.selector, 'onesignal-bell-launcher-theme-default')\n    }\n    else if (this.options.theme === 'inverse') {\n      addCssClass(this.launcher.selector, 'onesignal-bell-launcher-theme-inverse')\n    }\n    else {\n      throw new Error('Invalid OneSignal notify button theme ' + this.options.theme);\n    }\n\n    this.applyOffsetIfSpecified();\n    this.setCustomColorsIfSpecified();\n    this.patchSafariSvgFilterBug();\n\n    log.info('Showing the notify button.');\n\n    await (isPushEnabled ? this.launcher.inactivate() : nothing())\n      .then(() => OneSignal.getSubscription())\n      .then(isNotOptedOut => {\n        if ((isPushEnabled || !isNotOptedOut) && this.dialog.notificationIcons === null) {\n          return MainHelper.getNotificationIcons().then((icons) => {\n            this.dialog.notificationIcons = icons;\n          });\n        } else return nothing();\n      })\n      .then(() => delay(this.options.showLauncherAfter))\n      .then(() => {\n        if (SubscriptionHelper.isUsingSubscriptionWorkaround() &&\n          notOptedOut &&\n          doNotPrompt !== true && !isPushEnabled &&\n          (OneSignal.config.userConfig.autoRegister === true) && !MainHelper.isHttpPromptAlreadyShown()) {\n          log.debug('Not showing notify button because popover will be shown.');\n          return nothing();\n        } else {\n          return this.launcher.show();\n        }\n      })\n      .then(() => {\n        return delay(this.options.showBadgeAfter);\n      })\n      .then(() => {\n        if (this.options.prenotify && !isPushEnabled && OneSignal._isNewVisitor) {\n          return this.message.enqueue(this.text['message.prenotify'])\n                     .then(() => this.badge.show());\n        }\n        else return nothing();\n      })\n      .then(() => this.initialized = true);\n  }\n\n  patchSafariSvgFilterBug() {\n    if (!(Browser.safari && Number(Browser.version) >= 9.1)) {\n      let bellShadow = `drop-shadow(0 2px 4px rgba(34,36,38,0.35));`;\n      let badgeShadow = `drop-shadow(0 2px 4px rgba(34,36,38,0));`;\n      let dialogShadow = `drop-shadow(0px 2px 2px rgba(34,36,38,.15));`;\n      this.graphic.setAttribute('style', `filter: ${bellShadow}; -webkit-filter: ${bellShadow};`);\n      this.badge.element.setAttribute('style', `filter: ${badgeShadow}; -webkit-filter: ${badgeShadow};`);\n      this.dialog.element.setAttribute('style', `filter: ${dialogShadow}; -webkit-filter: ${dialogShadow};`);\n    }\n    if (Browser.safari) {\n      this.badge.element.setAttribute('style', `display: none;`);\n    }\n  }\n\n  applyOffsetIfSpecified() {\n    let offset = this.options.offset;\n    if (offset) {\n      // Reset styles first\n      this.launcher.element.style.cssText = '';\n\n      if (offset.bottom) {\n        this.launcher.element.style.cssText += `bottom: ${offset.bottom};`;\n      }\n\n      if (this.options.position === 'bottom-right') {\n        if (offset.right) {\n          this.launcher.element.style.cssText += `right: ${offset.right};`;\n        }\n      }\n      else if (this.options.position === 'bottom-left') {\n        if (offset.left) {\n          this.launcher.element.style.cssText += `left: ${offset.left};`;\n        }\n      }\n    }\n  }\n\n  setCustomColorsIfSpecified() {\n    // Some common vars first\n    let dialogButton = this.dialog.element.querySelector('button.action');\n    let pulseRing = this.button.element.querySelector('.pulse-ring');\n    // Reset added styles first\n    this.graphic.querySelector('.background').style.cssText = '';\n    let foregroundElements = this.graphic.querySelectorAll('.foreground');\n    for (let i = 0; i < foregroundElements.length; i++) {\n      let element = foregroundElements[i];\n      element.style.cssText = '';\n    }\n    this.graphic.querySelector('.stroke').style.cssText = '';\n    this.badge.element.style.cssText = '';\n    if (dialogButton) {\n      dialogButton.style.cssText = '';\n      dialogButton.style.cssText = '';\n    }\n    if (pulseRing) {\n      pulseRing.style.cssText = '';\n    }\n\n    // Set new styles\n    if (this.options.colors) {\n      let colors = this.options.colors;\n      if (colors['circle.background']) {\n        this.graphic.querySelector('.background').style.cssText += `fill: ${colors['circle.background']}`;\n      }\n      if (colors['circle.foreground']) {\n        let foregroundElements = this.graphic.querySelectorAll('.foreground');\n        for (let i = 0; i < foregroundElements.length; i++) {\n          let element = foregroundElements[i];\n          element.style.cssText += `fill: ${colors['circle.foreground']}`;\n        }\n        this.graphic.querySelector('.stroke').style.cssText += `stroke: ${colors['circle.foreground']}`;\n      }\n      if (colors['badge.background']) {\n        this.badge.element.style.cssText += `background: ${colors['badge.background']}`;\n      }\n      if (colors['badge.bordercolor']) {\n        this.badge.element.style.cssText += `border-color: ${colors['badge.bordercolor']}`;\n      }\n      if (colors['badge.foreground']) {\n        this.badge.element.style.cssText += `color: ${colors['badge.foreground']}`;\n      }\n      if (dialogButton) {\n        if (colors['dialog.button.background']) {\n          this.dialog.element.querySelector('button.action').style.cssText += `background: ${colors['dialog.button.background']}`;\n        }\n        if (colors['dialog.button.foreground']) {\n          this.dialog.element.querySelector('button.action').style.cssText += `color: ${colors['dialog.button.foreground']}`;\n        }\n        if (colors['dialog.button.background.hovering']) {\n          this.addCssToHead('onesignal-background-hover-style', `#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-dialog button.action:hover { background: ${colors['dialog.button.background.hovering']} !important; }`);\n        }\n        if (colors['dialog.button.background.active']) {\n          this.addCssToHead('onesignal-background-active-style', `#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-dialog button.action:active { background: ${colors['dialog.button.background.active']} !important; }`);\n        }\n      }\n      if (pulseRing) {\n        if (colors['pulse.color']) {\n          this.button.element.querySelector('.pulse-ring').style.cssText = `border-color: ${colors['pulse.color']}`;\n        }\n      }\n    }\n  }\n\n  addCssToHead(id, css) {\n    let existingStyleDom = document.getElementById(id);\n    if (existingStyleDom)\n      return;\n    let styleDom = document.createElement('style');\n    styleDom.id = id;\n    styleDom.type = 'text/css';\n    styleDom.appendChild(document.createTextNode(css));\n    document.head.appendChild(styleDom);\n  }\n\n  /**\n   * Updates the current state to the correct new current state. Returns a promise.\n   */\n  updateState() {\n    Promise.all([\n      OneSignal.isPushNotificationsEnabled(),\n      OneSignal.getNotificationPermission()\n    ])\n    .then(([isEnabled, permission]) => {\n      this.setState(isEnabled ? Bell.STATES.SUBSCRIBED : Bell.STATES.UNSUBSCRIBED);\n      if (permission as any === 'denied') {\n        this.setState(Bell.STATES.BLOCKED);\n      }\n    });\n  }\n\n  /**\n   * Updates the current state to the specified new state.\n   * @param newState One of ['subscribed', 'unsubscribed'].\n   */\n  setState(newState, silent = false) {\n    let lastState = this.state;\n    this.state = newState;\n    if (lastState !== newState && !silent) {\n      Event.trigger(Bell.EVENTS.STATE_CHANGED, {from: lastState, to: newState});\n      // Update anything that should be changed here in the new state\n    }\n\n    // Update anything that should be reset to the same state\n  }\n\n  get container() {\n    return document.querySelector('#onesignal-bell-container');\n  }\n\n  get graphic() {\n    return this.button.element.querySelector('svg');\n  }\n\n  get launcher() {\n    if (!this._launcher)\n      this._launcher = new Launcher(this);\n    return this._launcher;\n  }\n\n  get button() {\n    if (!this._button)\n      this._button = new Button(this);\n    return this._button;\n  }\n\n  get badge() {\n    if (!this._badge)\n      this._badge = new Badge();\n    return this._badge;\n  }\n\n  get message() {\n    if (!this._message)\n      this._message = new Message(this);\n    return this._message;\n  }\n\n  get dialog() {\n    if (!this._dialog)\n      this._dialog = new Dialog(this);\n    return this._dialog;\n  }\n\n  get subscribed() {\n    return this.state === Bell.STATES.SUBSCRIBED;\n  }\n\n  get unsubscribed() {\n    return this.state === Bell.STATES.UNSUBSCRIBED;\n  }\n\n  get blocked() {\n    return this.state === Bell.STATES.BLOCKED;\n  }\n}\n","import { Serializable } from './Serializable';\nimport { SlidedownPermissionMessageOptions } from '../popover/Popover';\nimport * as objectAssign from 'object-assign';\n\nexport interface AppConfig {\n  /**\n   * The OneSignal dashboard app ID. Although this value is provided, it isn't\n   * used since it will always be identical to the provided app ID.\n   */\n  appId: string;\n\n  /**\n   * The subdomain chosen on the dashboard for non-HTTPS apps.\n   */\n  subdomain: string;\n\n  /**\n   * The allowed origin this web push config is allowed to run on.\n   */\n  origin: string;\n\n  /**\n   * Describes whether the subdomain HTTP users subscribe to should belong to\n   * the legacy domain onesignal.com, or the newer domain os.tc.\n   */\n  httpUseOneSignalCom?: boolean;\n  cookieSyncEnabled?: boolean;\n  restrictedOriginEnabled?: boolean;\n  metrics: {\n    enable: boolean;\n    mixpanelReportingToken: string;\n  };\n\n  safariWebId?: string;\n\n  /**\n   * Chrome and Chrome-like browsers including Opera and Yandex use VAPID for\n   * authentication, and so each app uses a uniquely generated key.\n   */\n  vapidPublicKey?: string;\n\n  /**\n   * Firefox uses VAPID for application identification instead of\n   * authentication, and so all apps share an identification key.\n   */\n  onesignalVapidPublicKey?: string;\n\n  /**\n   * Describes whether this app's email records require authentication.\n   */\n  emailAuthRequired?: boolean;\n  userConfig?: AppUserConfig;\n}\n\nexport function serializeAppConfig(config: AppConfig): object {\n  return objectAssign({}, config);\n}\n\nexport function deserializeAppConfig(bundle: any): AppConfig {\n  return objectAssign({}, bundle);\n}\n\nexport enum ConfigIntegrationKind {\n  TypicalSite = 'typical',\n  WordPress = 'wordpress',\n  Shopify = 'shopify',\n  Blogger = 'blogger',\n  Magento = 'magento',\n  Drupal = 'drupal',\n  SquareSpace = 'squarespace',\n  Joomla = 'joomla',\n  Weebly = 'weebly',\n  Wix = \"wix\",\n  Custom = 'custom',\n}\n\nexport enum NotificationClickMatchBehavior {\n  Exact = 'exact',\n  Origin = 'origin'\n}\n\nexport enum NotificationClickActionBehavior {\n  Navigate = 'navigate',\n  Focus = 'focus'\n}\n\nexport interface WebConfig {\n  siteInfo: {\n    name: string;\n    origin: string;\n    proxyOrigin: string | null;\n    defaultIconUrl: string | null;\n    proxyOriginEnabled: boolean;\n  };\n  webhooks: {\n    enable: boolean;\n    corsEnable: false;\n    notificationClickedHook: string;\n    notificationDismissedHook: string;\n    notificationDisplayedHook: string;\n  };\n  integration: {\n    kind: ConfigIntegrationKind;\n  };\n  serviceWorker: {\n    path: string;\n    workerName: string;\n    updaterWorkerName: string;\n    registrationScope: string;\n    customizationEnabled: boolean;\n  };\n  setupBehavior: {\n    allowLocalhostAsSecureOrigin: boolean;\n  };\n  welcomeNotification: {\n    url: string;\n    title: string;\n    enable: boolean;\n    message: string;\n    urlEnabled: boolean;\n  };\n  notificationBehavior: {\n    click: {\n      match: NotificationClickMatchBehavior;\n      action: NotificationClickActionBehavior;\n    };\n    display: {\n      persist: boolean;\n    };\n  };\n}\n\nexport interface AppUserConfig {\n  appId?: string;\n  autoRegister?: boolean;\n  path?: string;\n  serviceWorkerPath?: string;\n  serviceWorkerUpdaterPath?: string;\n  serviceWorkerParam?: any;\n  subdomainName?: string;\n  promptOptions?: AppUserConfigPromptOptions;\n  welcomeNotification?: AppUserConfigWelcomeNotification;\n  notifyButton?: AppUserConfigNotifyButton;\n  persistNotification?: boolean;\n  webhooks?: AppUserConfigWebhooks;\n  notificationClickHandlerMatch?: NotificationClickMatchBehavior;\n  notificationClickHandlerAction?: NotificationClickActionBehavior;\n  allowLocalhostAsSecureOrigin?: boolean;\n}\n\nexport interface FullscreenPermissionMessageOptions {\n  autoAcceptTitle?: string;\n  actionMessage: string;\n  acceptButton: string;\n  cancelButton: string;\n  title: string;\n  message: string;\n  caption: string;\n}\n\nexport interface AppUserConfigPromptOptions {\n  subscribeText?: string;\n  showGraphic?: boolean;\n  timeout?: number;\n  autoAcceptTitle?: string;\n  actionMessage?: string;\n  exampleNotificationTitleDesktop?: string;\n  exampleNotificationMessageDesktop?: string;\n  exampleNotificationTitleMobile?: string;\n  exampleNotificationMessageMobile?: string;\n  exampleNotificationCaption?: string;\n  acceptButtonText?: string;\n  cancelButtonText?: string;\n  showCredit?: string;\n  slidedown?: SlidedownPermissionMessageOptions;\n  fullscreen?: FullscreenPermissionMessageOptions;\n}\n\nexport interface AppUserConfigWelcomeNotification {\n  disable: boolean;\n  title: string;\n  message: string;\n  url: string;\n}\n\nexport interface AppUserConfigNotifyButton {\n  enable: boolean;\n  displayPredicate: Function;\n  size: 'small' | 'medium' | 'large';\n  position: 'bottom-left' | 'bottom-right';\n  offset: { bottom: string; left: string; right: string };\n  prenotify?: boolean;\n  showCredit?: boolean;\n  colors: {\n    'circle.background': string;\n    'circle.foreground': string;\n    'badge.background': string;\n    'badge.foreground': string;\n    'badge.bordercolor': string;\n    'pulse.color': string;\n    'dialog.button.background.hovering': string;\n    'dialog.button.background.active': string;\n    'dialog.button.background': string;\n    'dialog.button.foreground': string;\n  };\n  text: {\n    'tip.state.unsubscribed': string;\n    'tip.state.subscribed': string;\n    'tip.state.blocked': string;\n    'message.prenotify': string;\n    'message.action.subscribed': string;\n    'message.action.resubscribed': string;\n    'message.action.unsubscribed': string;\n    'dialog.main.title': string;\n    'dialog.main.button.subscribe': string;\n    'dialog.main.button.unsubscribe': string;\n    'dialog.blocked.title': string;\n    'dialog.blocked.message': string;\n  };\n}\n\nexport interface AppUserConfigWebhooks {\n  cors: boolean;\n  'notification.displayed': string;\n  'notification.clicked': string;\n  'notification.dismissed': string;\n}\n\nexport interface ServerAppConfigPrompt {\n  bell: {\n    size: 'small' | 'medium' | 'large';\n    color: {\n      main: string;\n      accent: string;\n    };\n    dialog: {\n      main: {\n        title: string;\n        subscribeButton: string;\n        unsubscribeButton: string;\n      };\n      blocked: {\n        title: string;\n        message: string;\n      };\n    };\n    offset: {\n      left: number;\n      right: number;\n      bottom: number;\n    };\n    enabled: boolean;\n    message: {\n      subscribing: string;\n      unsubscribing: string;\n    };\n    tooltip: {\n      blocked: string;\n      subscribed: string;\n      unsubscribed: string;\n    };\n    location: 'bottom-left' | 'bottom-right';\n    hideWhenSubscribed: boolean;\n    customizeTextEnabled: boolean;\n  };\n  slidedown: {\n    enabled: boolean;\n    acceptButton: string;\n    cancelButton: string;\n    actionMessage: string;\n    customizeTextEnabled: boolean;\n  };\n  fullscreen: {\n    title: string;\n    caption: string;\n    enabled: boolean;\n    message: string;\n    acceptButton: string;\n    cancelButton: string;\n    actionMessage: string;\n    autoAcceptTitle: string;\n    customizeTextEnabled: boolean;\n  };\n}\n\nexport interface ServerAppConfig {\n  success: boolean;\n  app_id: string;\n  features: {\n    cookie_sync: {\n      enable: boolean;\n    };\n    metrics: {\n      enable: boolean;\n      mixpanel_reporting_token: string;\n    };\n    restrict_origin: {\n      enable: boolean;\n    };\n    email: {\n      require_auth: boolean;\n    };\n  };\n  config: {\n    /**\n     * The allowed origin this web push config is allowed to run on.\n     */\n    origin: string;\n    staticPrompts: ServerAppConfigPrompt;\n    siteInfo: {\n      name: string;\n      origin: string;\n      proxyOrigin: string;\n      defaultIconUrl: string;\n      proxyOriginEnabled: boolean;\n    };\n    webhooks: {\n      enable: boolean;\n      corsEnable: boolean;\n      notificationClickedHook: string;\n      notificationDismissedHook: string;\n      notificationDisplayedHook: string;\n    };\n    integration: {\n      kind: ConfigIntegrationKind;\n    };\n    serviceWorker: {\n      path: string;\n      workerName: string;\n      registrationScope: string;\n      updaterWorkerName: string;\n      customizationEnabled: boolean;\n    };\n    setupBehavior: {\n      allowLocalhostAsSecureOrigin: false;\n    };\n    welcomeNotification: {\n      url: string;\n      title: string;\n      enable: boolean;\n      message: string;\n      urlEnabled: boolean;\n    };\n    notificationBehavior: {\n      click: {\n        match: NotificationClickMatchBehavior;\n        action: NotificationClickActionBehavior;\n      };\n      display: {\n        persist: boolean;\n      };\n    };\n    vapid_public_key: string;\n    onesignal_vapid_public_key: string;\n    http_use_onesignal_com: boolean;\n    safari_web_id: string;\n    subdomain: string;\n  };\n\n  generated_at: number;\n}\n","export enum IntegrationKind {\n  /**\n   * An secure HTTPS site using its own origin for subscribing.\n   */\n  Secure = \"Secure\",\n  /**\n   * A secure HTTPS site using a proxy subscription origin (e.g. subdomain.os.tc or\n   * subdomain.onesignal.com).\n   */\n  SecureProxy = \"Secure Proxy\",\n  /**\n   * An insecure HTTP site using a proxy subscription origin (e.g. subdomain.os.tc or\n   * subdomain.onesignal.com).\n   */\n  InsecureProxy = \"Insecure Proxy\",\n}\n","import OneSignalError from \"./OneSignalError\";\n\n\nexport enum SdkInitErrorKind {\n  InvalidAppId,\n  AppNotConfiguredForWebPush,\n  MissingSubdomain,\n  WrongSiteUrl,\n  MultipleInitialization,\n  MissingSafariWebId,\n  Unknown\n}\n\nexport class SdkInitError extends OneSignalError {\n  reason: string;\n\n  constructor(reason: SdkInitErrorKind, extra?: {\n    siteUrl: string;\n  }) {\n    switch (reason) {\n      case SdkInitErrorKind.InvalidAppId:\n        super('OneSignal: This app ID does match any existing app. Double check your app ID.');\n        break;\n      case SdkInitErrorKind.AppNotConfiguredForWebPush:\n        super('OneSignal: This app ID does not have any web platforms enabled. Double check your app ID, or see step 1 on our setup guide (https://goo.gl/01h7fZ).');\n        break;\n      case SdkInitErrorKind.MissingSubdomain:\n        super('OneSignal: Non-HTTPS pages require a subdomain of OneSignal to be chosen on your dashboard. See step 1.4 on our setup guide (https://goo.gl/xip6JB).');\n        break;\n      case SdkInitErrorKind.WrongSiteUrl:\n        if (extra && extra.siteUrl) {\n          super(`OneSignal: This web push config can only be used on ${new URL(extra.siteUrl).origin}. Your current origin is ${location.origin}.`);\n        } else {\n          super('OneSignal: This web push config can not be used on the current site.');\n        }\n        break;\n      case SdkInitErrorKind.MultipleInitialization:\n        super('OneSignal: The OneSignal web SDK can only be initialized once. Extra initializations are ignored. Please remove calls initializing the SDK more than once.');\n        break;\n      case SdkInitErrorKind.MissingSafariWebId:\n        super('OneSignal: Safari browser support on Mac OS X requires the Safari web platform to be enabled. Please see the Safari Support steps in our web setup guide.');\n        break;\n      case SdkInitErrorKind.Unknown:\n        super('OneSignal: An unknown initialization error occurred.');\n        break;\n    }\n    this.reason = SdkInitErrorKind[reason];\n  }\n}\n","export enum BuildEnvironmentKind {\n  Development = \"Development\",\n  Staging = \"Staging\",\n  Production = \"Production\"\n}\n","import * as log from 'loglevel';\nimport * as objectAssign from 'object-assign';\n\nimport Event from '../Event';\nimport { addCssClass, contains, once, removeCssClass } from '../utils';\nimport AnimatedElement from './AnimatedElement';\n\n\nexport default class ActiveAnimatedElement extends AnimatedElement {\n\n  /**\n   * Abstracts common DOM operations like hiding and showing transitionable elements into chainable promises.\n   * @param selector {string} The CSS selector of the element.\n   * @param showClass {string} The CSS class name to add to show the element.\n   * @param hideClass {string} The CSS class name to remove to hide the element.\n   * @param activeClass {string} The CSS class name to add to activate the element.\n   * @param inactiveClass {string} The CSS class name to remove to inactivate the element.\n   * @param state {string} The current state of the element, defaults to 'shown'.\n   * @param activeState {string} The current state of the element, defaults to 'active'.\n   * @param targetTransitionEvents {string} An array of properties (e.g. ['transform', 'opacity']) to look for on transitionend of show() and hide() to know the transition is complete. As long as one matches, the transition is considered complete.\n   * @param nestedContentSelector {string} The CSS selector targeting the nested element within the current element. This nested element will be used for content getters and setters.\n   */\n  constructor(public selector: string,\n              public showClass: string,\n              public hideClass: string,\n              public activeClass: string,\n              public inactiveClass: string,\n              public state = 'shown',\n              public activeState = 'active',\n              public targetTransitionEvents = ['opacity', 'transform'],\n              public nestedContentSelector?: string) {\n    super(selector, showClass, hideClass, state, targetTransitionEvents);\n  }\n\n  /**\n   * Asynchronously activates an element by applying its {activeClass} CSS class.\n   * @returns {Promise} Returns a promise that is resolved with this element when it has completed its transition.\n   */\n  activate() {\n    if (!this.inactive || !this.shown) {\n      return Promise.resolve(this);\n    }\n    else return new Promise((resolve) => {\n      this.activeState = 'activating';\n      Event.trigger(ActiveAnimatedElement.EVENTS.ACTIVATING, this);\n      if (this.inactiveClass)\n        removeCssClass(this.element, this.inactiveClass);\n      if (this.activeClass)\n        addCssClass(this.element, this.activeClass);\n      if (this.shown) {\n        if (this.targetTransitionEvents.length == 0) {\n          return resolve(this);\n        } else {\n          var timerId = setTimeout(() => {\n            log.debug(`Element did not completely activate (state: ${this.state}, activeState: ${this.activeState}).`)\n          }, this.transitionCheckTimeout);\n          once(this.element, 'transitionend', (event, destroyListenerFn) => {\n            if (event.target === this.element &&\n              contains(this.targetTransitionEvents, event.propertyName)) {\n              clearTimeout(timerId);\n              // Uninstall the event listener for transitionend\n              destroyListenerFn();\n              this.activeState = 'active';\n              Event.trigger(ActiveAnimatedElement.EVENTS.ACTIVE, this);\n              return resolve(this);\n            }\n          }, true);\n        }\n      }\n      else {\n        log.debug(`Ending activate() transition (alternative).`);\n        this.activeState = 'active';\n        Event.trigger(ActiveAnimatedElement.EVENTS.ACTIVE, this);\n        return resolve(this);\n      }\n    });\n  }\n\n  /**\n   * Asynchronously activates an element by applying its {activeClass} CSS class.\n   * @returns {Promise} Returns a promise that is resolved with this element when it has completed its transition.\n   */\n  inactivate() {\n    if (!this.active) {\n      return Promise.resolve(this);\n    }\n    else return new Promise((resolve) => {\n      this.activeState = 'inactivating';\n      Event.trigger(ActiveAnimatedElement.EVENTS.INACTIVATING, this);\n      if (this.activeClass)\n        removeCssClass(this.element, this.activeClass);\n      if (this.inactiveClass)\n        addCssClass(this.element, this.inactiveClass);\n      if (this.shown) {\n        if (this.targetTransitionEvents.length == 0) {\n          return resolve(this);\n        } else {\n          var timerId = setTimeout(() => {\n            log.debug(`Element did not completely inactivate (state: ${this.state}, activeState: ${this.activeState}).`)\n          }, this.transitionCheckTimeout);\n          once(this.element, 'transitionend', (event, destroyListenerFn) => {\n            if (event.target === this.element &&\n              contains(this.targetTransitionEvents, event.propertyName)) {\n              clearTimeout(timerId);\n              // Uninstall the event listener for transitionend\n              destroyListenerFn();\n              this.activeState = 'inactive';\n              Event.trigger(ActiveAnimatedElement.EVENTS.INACTIVE, this);\n              return resolve(this);\n            }\n          }, true);\n        }\n      }\n      else {\n        this.activeState = 'inactive';\n        Event.trigger(ActiveAnimatedElement.EVENTS.INACTIVE, this);\n        return resolve(this);\n      }\n    });\n  }\n\n  /**\n   * Asynchronously waits for an element to finish transitioning to being active.\n   * @returns {Promise} Returns a promise that is resolved with this element when it has completed its transition.\n   */\n  waitUntilActive() {\n    if (this.active)\n      return Promise.resolve(this);\n    else return new Promise((resolve) => {\n      OneSignal.once(ActiveAnimatedElement.EVENTS.ACTIVE, (event) => {\n        if (event === this) {\n          return resolve(this);\n        }\n      }, true);\n    });\n  }\n\n  /**\n   * Asynchronously waits for an element to finish transitioning to being inactive.\n   * @returns {Promise} Returns a promise that is resolved with this element when it has completed its transition.\n   */\n  waitUntilInactive() {\n    if (this.inactive)\n      return Promise.resolve(this);\n    else return new Promise((resolve) => {\n      OneSignal.once(ActiveAnimatedElement.EVENTS.INACTIVE, (event) => {\n        if (event === this) {\n          return resolve(this);\n        }\n      }, true);\n    });\n  }\n\n  static get EVENTS() {\n    return objectAssign({}, AnimatedElement.EVENTS, {\n      ACTIVATING: 'activeAnimatedElementActivating',\n      ACTIVE: 'activeAnimatedElementActive',\n      INACTIVATING: 'activeAnimatedElementInactivating',\n      INACTIVE: 'activeAnimatedElementInactive',\n    });\n  }\n\n  /**\n   * Synchronously returns the last known state of the element.\n   * @returns {boolean} Returns true if the element was last known to be transitioning to being activated.\n   */\n  get activating() {\n    return this.activeState === 'activating';\n  }\n\n  /**\n   * Synchronously returns the last known state of the element.\n   * @returns {boolean} Returns true if the element was last known to be already active.\n   */\n  get active() {\n    return this.activeState === 'active';\n  }\n\n  /**\n   * Synchronously returns the last known state of the element.\n   * @returns {boolean} Returns true if the element was last known to be transitioning to inactive.\n   */\n  get inactivating() {\n    return this.activeState === 'inactivating';\n  }\n\n  /**\n   * Synchronously returns the last known state of the element.\n   * @returns {boolean} Returns true if the element was last known to be already inactive.\n   */\n  get inactive() {\n    return this.activeState === 'inactive';\n  }\n}\n","import { addCssClass, removeCssClass, contains, once } from '../utils';\nimport * as log from 'loglevel';\nimport Event from '../Event'\n\n\n\nexport default class AnimatedElement {\n\n  /**\n   * Abstracts common DOM operations like hiding and showing transitionable elements into chainable promises.\n   * @param selector {string} The CSS selector of the element.\n   * @param showClass {string} The CSS class name to add to show the element.\n   * @param hideClass {string} The CSS class name to remove to hide the element.\n   * @param state {string} The current state of the element, defaults to 'shown'.\n   * @param targetTransitionEvents {string} An array of properties (e.g. ['transform', 'opacity']) to look for on transitionend of show() and hide() to know the transition is complete. As long as one matches, the transition is considered complete.\n   * @param nestedContentSelector {string} The CSS selector targeting the nested element within the current element. This nested element will be used for content getters and setters.\n   */\n  constructor(public selector: string,\n              public showClass: string,\n              public hideClass: string,\n              public state = 'shown',\n              public targetTransitionEvents = ['opacity', 'transform'],\n              public nestedContentSelector?: string,\n              public transitionCheckTimeout = 500) {\n  }\n\n  /**\n   * Asynchronously shows an element by applying its {showClass} CSS class.\n   *\n   * Returns a promise that is resolved with this element when it has completed its transition.\n   */\n  show(): Promise<AnimatedElement> {\n    if (!this.hidden) {\n      return Promise.resolve(this);\n    }\n    else return new Promise((resolve) => {\n      this.state = 'showing';\n      Event.trigger(AnimatedElement.EVENTS.SHOWING, this);\n      if (this.hideClass)\n        removeCssClass(this.element, this.hideClass);\n      if (this.showClass)\n        addCssClass(this.element, this.showClass);\n      if (this.targetTransitionEvents.length == 0) {\n        return resolve(this);\n      } else {\n        var timerId = setTimeout(() => {\n          log.debug(`Element did not completely show (state: ${this.state}).`)\n        }, this.transitionCheckTimeout);\n        once(this.element, 'transitionend', (event, destroyListenerFn) => {\n          if (event.target === this.element &&\n            contains(this.targetTransitionEvents, event.propertyName)) {\n            clearTimeout(timerId);\n            // Uninstall the event listener for transitionend\n            destroyListenerFn();\n            this.state = 'shown';\n            Event.trigger(AnimatedElement.EVENTS.SHOWN, this);\n            return resolve(this);\n          }\n        }, true);\n      }\n    });\n  }\n\n  /**\n   * Asynchronously hides an element by applying its {hideClass} CSS class.\n   * @returns {Promise} Returns a promise that is resolved with this element when it has completed its transition.\n   */\n  hide() {\n    if (!this.shown) {\n      return Promise.resolve(this);\n    }\n    else return new Promise((resolve) => {\n      this.state = 'hiding';\n      Event.trigger(AnimatedElement.EVENTS.HIDING, this);\n      if (this.showClass)\n        removeCssClass(this.element, this.showClass);\n      if (this.hideClass)\n        addCssClass(this.element, this.hideClass);\n      if (this.targetTransitionEvents.length == 0) {\n        return resolve(this);\n      } else {\n        once(this.element, 'transitionend', (event, destroyListenerFn) => {\n          var timerId = setTimeout(() => {\n            log.debug(`Element did not completely hide (state: ${this.state}).`)\n          }, this.transitionCheckTimeout);\n          if (event.target === this.element &&\n            contains(this.targetTransitionEvents, event.propertyName)) {\n            clearTimeout(timerId);\n            // Uninstall the event listener for transitionend\n            destroyListenerFn();\n            this.state = 'hidden';\n            Event.trigger(AnimatedElement.EVENTS.HIDDEN, this);\n            return resolve(this);\n          }\n        }, true);\n      }\n    });\n  }\n\n  /**\n   * Asynchronously waits for an element to finish transitioning to being shown.\n   * @returns {Promise} Returns a promise that is resolved with this element when it has completed its transition.\n   */\n  waitUntilShown() {\n    if (this.state === 'shown')\n      return Promise.resolve(this);\n    else return new Promise((resolve) => {\n      OneSignal.once(AnimatedElement.EVENTS.SHOWN, (event) => {\n        if (event === this) {\n          return resolve(this);\n        }\n      }, true);\n    });\n  }\n\n  /**\n   * Asynchronously waits for an element to finish transitioning to being hidden.\n   * @returns {Promise} Returns a promise that is resolved with this element when it has completed its transition.\n   */\n  waitUntilHidden() {\n    if (this.state === 'hidden')\n      return Promise.resolve(this);\n    else return new Promise((resolve) => {\n      OneSignal.once(AnimatedElement.EVENTS.HIDDEN, (event) => {\n        if (event === this) {\n          return resolve(this);\n        }\n      }, true);\n    });\n  }\n\n  static get EVENTS() {\n    return {\n      SHOWING: 'animatedElementShowing',\n      SHOWN: 'animatedElementShown',\n      HIDING: 'animatedElementHiding',\n      HIDDEN: 'animatedElementHidden',\n    };\n  }\n\n  /**\n   * Returns the native element's innerHTML property.\n   * @returns {string} Returns the native element's innerHTML property.\n   */\n  get content() {\n    if (this.nestedContentSelector)\n      return this.element.querySelector(this.nestedContentSelector).innerHTML;\n    else\n      return this.element.innerHTML;\n  }\n\n  /**\n   * Sets the native element's innerHTML property.\n   * @param value {string} The HTML to set to the element.\n   */\n  set content(value) {\n    if (this.nestedContentSelector) {\n      this.element.querySelector(this.nestedContentSelector).innerHTML = value;\n    }\n    else {\n      this.element.innerHTML = value;\n    }\n  }\n\n\n  /**\n   * Returns the native {Element} via document.querySelector().\n   * @returns {Element} Returns the native {Element} via document.querySelector().\n   */\n  get element() {\n    return document.querySelector(this.selector);\n  }\n\n  /* States an element can be in */\n\n  /**\n   * Synchronously returns the last known state of the element.\n   * @returns {boolean} Returns true if the element was last known to be transitioning to being shown.\n   */\n  get showing() {\n    return this.state === 'showing';\n  }\n\n  /**\n   * Synchronously returns the last known state of the element.\n   * @returns {boolean} Returns true if the element was last known to be already shown.\n   */\n  get shown() {\n    return this.state === 'shown';\n  }\n\n  /**\n   * Synchronously returns the last known state of the element.\n   * @returns {boolean} Returns true if the element was last known to be transitioning to hiding.\n   */\n  get hiding() {\n    return this.state === 'hiding';\n  }\n\n  /**\n   * Synchronously returns the last known state of the element.\n   * @returns {boolean} Returns true if the element was last known to be already hidden.\n   */\n  get hidden() {\n    return this.state === 'hidden';\n  }\n}\n","import * as log from 'loglevel';\n\nimport Environment from '../Environment';\nimport { InvalidStateError, InvalidStateReason } from '../errors/InvalidStateError';\nimport { WorkerMessengerCommand } from '../libraries/WorkerMessenger';\nimport Context from '../models/Context';\nimport Path from '../models/Path';\nimport SdkEnvironment from './SdkEnvironment';\nimport { Subscription } from '../models/Subscription';\nimport { encodeHashAsUriComponent, timeoutPromise } from '../utils';\nimport SubscriptionHelper from '../helpers/SubscriptionHelper';\nimport Database from '../services/Database';\nimport MainHelper from '../helpers/MainHelper';\nimport { serializeAppConfig } from '../models/AppConfig';\nimport { IntegrationKind } from '../models/IntegrationKind';\nimport { WindowEnvironmentKind } from '../models/WindowEnvironmentKind';\nimport NotImplementedError from '../errors/NotImplementedError';\nimport ProxyFrameHost from '../modules/frames/ProxyFrameHost';\n\nexport enum ServiceWorkerActiveState {\n  /**\n   * OneSignalSDKWorker.js, or the equivalent custom file name, is active.\n   */\n  WorkerA = 'Worker A (Main)',\n  /**\n   * OneSignalSDKUpdaterWorker.js, or the equivalent custom file name, is\n   * active.\n   *\n   * We no longer need to use this filename. We can update Worker A by appending\n   * a random query parameter to A.\n   */\n  WorkerB = 'Worker B (Updater)',\n  /**\n   * A service worker is active, but it is neither OneSignalSDKWorker.js nor\n   * OneSignalSDKUpdaterWorker.js (or the equivalent custom file names as\n   * provided by user config).\n   */\n  ThirdParty = '3rd Party',\n  /**\n   * A service worker is currently installing and we can't determine its final state yet. Wait until\n   * the service worker is finished installing by checking for a controllerchange property..\n   */\n  Installing = 'Installing',\n  /**\n   * No service worker is installed.\n   */\n  None = 'None',\n  /**\n   * A service worker is active but not controlling the page. This can occur if\n   * the page is hard-refreshed bypassing the cache, which also bypasses service\n   * workers.\n   */\n  Bypassed = 'Bypassed',\n  /**\n   * Service workers are not supported in this environment. This status is used\n   * on HTTP pages where it isn't possible to know whether a service worker is\n   * installed or not or in any of the other states.\n   */\n  Indeterminate = 'Indeterminate'\n}\n\nexport interface ServiceWorkerManagerConfig {\n  /**\n   * The path and filename of the \"main\" worker (e.g. '/OneSignalSDKWorker.js');\n   */\n  workerAPath: Path;\n  /**\n   * The path and filename to the \"alternate\" worker, used to update an existing\n   * service worker. (e.g. '/OneSignalSDKUpdaterWorer.js')\n   */\n  workerBPath: Path;\n  /**\n   * Describes how much of the origin the service worker controls.\n   * This is currently always \"/\".\n   */\n  registrationOptions: { scope: string };\n}\n\nexport class ServiceWorkerManager {\n\n  private context: Context;\n  private config: ServiceWorkerManagerConfig;\n\n  constructor(context: Context, config: ServiceWorkerManagerConfig) {\n    this.context = context;\n    this.config = config;\n  }\n\n  public async getActiveState(): Promise<ServiceWorkerActiveState> {\n    /*\n      Note: This method can only be called on a secure origin. On an insecure\n      origin, it'll throw on getRegistration().\n    */\n\n    /*\n      We want to find out if the *current* page is currently controlled by an\n      active service worker.\n\n      There are three ways (sort of) to do this:\n        - getRegistration()\n        - getRegistrations()\n        - navigator.serviceWorker.ready\n\n      We want to use getRegistration(), since it will not return a value if the\n      page is not currently controlled by an active service worker.\n\n      getRegistrations() returns all service worker registrations under the\n      origin (i.e. registrations in nested folders).\n\n      navigator.serviceWorker.ready will hang indefinitely and never resolve if\n      no registration is active.\n    */\n\n    const integration = await SdkEnvironment.getIntegration();\n    if (integration === IntegrationKind.InsecureProxy) {\n      /* Service workers are not accessible on insecure origins */\n      return ServiceWorkerActiveState.Indeterminate;\n    } else if (integration === IntegrationKind.SecureProxy) {\n      /* If the site setup is secure proxy, we're either on the top frame without access to the\n      registration, or the child proxy frame that does have access to the registration. */\n      const env = SdkEnvironment.getWindowEnv();\n      switch (env) {\n        case WindowEnvironmentKind.Host:\n        case WindowEnvironmentKind.CustomIframe:\n          /* Both these top-ish frames will need to ask the proxy frame to access the service worker\n          registration */\n          const proxyFrameHost: ProxyFrameHost = OneSignal.proxyFrameHost;\n          if (!proxyFrameHost) {\n            /* On init, this function may be called. Return a null state for now */\n            return ServiceWorkerActiveState.Indeterminate;\n          } else {\n            return await proxyFrameHost.runCommand<ServiceWorkerActiveState>(\n              OneSignal.POSTMAM_COMMANDS.SERVICE_WORKER_STATE\n            );\n          }\n        case WindowEnvironmentKind.OneSignalSubscriptionPopup:\n          /* This is a top-level frame, so it can access the service worker registration */\n          break;\n        case WindowEnvironmentKind.OneSignalSubscriptionModal:\n          throw new NotImplementedError();\n      }\n    }\n\n    let workerRegistration: ServiceWorkerRegistration = null;\n    try {\n      workerRegistration = await navigator.serviceWorker.getRegistration();\n    } catch (e) {\n      /* This could be null in an HTTP context or error if the user doesn't accept cookies */\n    }\n    if (!workerRegistration) {\n      /*\n        A site may have a service worker nested at /folder1/folder2/folder3, while the user is\n        currently on /folder1. The nested service worker does not control /folder1 though. Although\n        the nested service worker can receive push notifications without issue, it cannot perform\n        other SDK operations like checking whether existing tabs are optn eo the site on /folder1\n        (used to prevent opening unnecessary new tabs on notification click.)\n\n        Because we rely on being able to communicate with the service worker for SDK operations, we\n        only say we're active if the service worker directly controls this page.\n       */\n      return ServiceWorkerActiveState.None;\n    } else if (workerRegistration.installing) {\n      /*\n        Workers that are installing block for a while, since we can't use them until they're done\n        installing.\n       */\n      return ServiceWorkerActiveState.Installing;\n    } else if (!workerRegistration.active) {\n      /*\n        Workers that are waiting won't be our service workers, since we use clients.claim() and\n        skipWaiting() to bypass the install and waiting stages.\n       */\n      return ServiceWorkerActiveState.ThirdParty;\n    }\n\n    const workerScriptPath = new URL(workerRegistration.active.scriptURL).pathname;\n    let workerState: ServiceWorkerActiveState;\n\n    /*\n      At this point, there is an active service worker registration controlling this page.\n\n      Check the filename to see if it belongs to our A / B worker.\n    */\n    if (new Path(workerScriptPath).getFileName() == this.config.workerAPath.getFileName()) {\n      workerState = ServiceWorkerActiveState.WorkerA;\n    } else if (new Path(workerScriptPath).getFileName() == this.config.workerBPath.getFileName()) {\n      workerState = ServiceWorkerActiveState.WorkerB;\n    } else {\n      workerState = ServiceWorkerActiveState.ThirdParty;\n    }\n\n    /*\n      Our service worker registration can be both active and in the controlling scope of the current\n      page, but if the page was hard refreshed to bypass the cache (e.g. Ctrl + Shift + R), a\n      service worker will not control the page.\n\n      For a third-party service worker, if it does not call clients.claim(), even if its\n      registration is both active and in the controlling scope of the current page,\n      navigator.serviceWorker.controller will still be null on the first page visit. So we only\n      check if the controller is null for our worker, which we know uses clients.claim().\n     */\n    if (!navigator.serviceWorker.controller && (\n      workerState === ServiceWorkerActiveState.WorkerA ||\n      workerState === ServiceWorkerActiveState.WorkerB\n    )) {\n      return ServiceWorkerActiveState.Bypassed;\n    } else {\n      return workerState;\n    }\n  }\n\n  public async getWorkerVersion(): Promise<number> {\n    return new Promise<number>(async resolve => {\n      if (SubscriptionHelper.isUsingSubscriptionWorkaround()) {\n        const proxyFrameHost: ProxyFrameHost = OneSignal.proxyFrameHost;\n        if (!proxyFrameHost) {\n          /* On init, this function may be called. Return a null state for now */\n          resolve(NaN);\n        } else {\n          const proxyWorkerVersion =\n            await proxyFrameHost.runCommand<number>(OneSignal.POSTMAM_COMMANDS.GET_WORKER_VERSION);\n          resolve(proxyWorkerVersion);\n        }\n      } else {\n        this.context.workerMessenger.once(WorkerMessengerCommand.WorkerVersion, workerVersion => {\n          resolve(workerVersion);\n        });\n        this.context.workerMessenger.unicast(WorkerMessengerCommand.WorkerVersion);\n      }\n    });\n  }\n\n  async shouldInstallWorker(): Promise<boolean> {\n    const workerState = await this.getActiveState();\n\n    if (workerState !== ServiceWorkerActiveState.WorkerA && workerState !== ServiceWorkerActiveState.WorkerB) {\n      return true;\n    }\n    return false;\n  }\n\n  async subscribeForPushNotifications(): Promise<Subscription> {\n    const workerState = await this.getActiveState();\n\n    if (workerState !== ServiceWorkerActiveState.WorkerA && workerState !== ServiceWorkerActiveState.WorkerB) {\n      throw new InvalidStateError(InvalidStateReason.ServiceWorkerNotActivated);\n    }\n    return new Promise<Subscription>(resolve => {\n      this.context.workerMessenger.once(WorkerMessengerCommand.Subscribe, subscription => {\n        resolve(Subscription.deserialize(subscription));\n      });\n      this.context.workerMessenger.unicast(WorkerMessengerCommand.Subscribe, serializeAppConfig(this.context.appConfig));\n    });\n  }\n\n  /**\n   * Performs a service worker update by swapping out the current service worker\n   * with a content-identical but differently named alternate service worker\n   * file.\n   */\n  async updateWorker() {\n    if (!Environment.supportsServiceWorkers()) {\n      return;\n    }\n\n    const workerState = await this.getActiveState();\n    log.info(`[Service Worker Update] Checking service worker version...`);\n    let workerVersion;\n    try {\n      workerVersion = await timeoutPromise(this.getWorkerVersion(), 2000);\n    } catch (e) {\n      log.info(`[Service Worker Update] Worker did not reply to version query; assuming older version.`);\n      workerVersion = 1;\n    }\n\n    if (workerState !== ServiceWorkerActiveState.WorkerA && workerState !== ServiceWorkerActiveState.WorkerB) {\n      // Do not update 3rd party workers\n      log.debug(\n        `[Service Worker Update] Not updating service worker, current active worker state is ${workerState}.`\n      );\n      return;\n    }\n\n    if (workerVersion !== Environment.version()) {\n      log.info(`[Service Worker Update] Updating service worker from v${workerVersion} --> v${Environment.version()}.`);\n      this.installWorker();\n    } else {\n      log.info(`[Service Worker Update] Service worker version is current at v${workerVersion} (no update required).`);\n    }\n  }\n\n  /**\n   * Installs a newer version of the OneSignal service worker.\n   *\n   * We have a couple different models of installing service workers:\n   *\n   * a) Originally, we provided users with two worker files:\n   * OneSignalSDKWorker.js and OneSignalSDKUpdaterWorker.js. Two workers were\n   * provided so each could be swapped with the other when the worker needed to\n   * update. The contents of both workers were identical; only the filenames\n   * were different, which is enough to update the worker.\n   *\n   * b) With AMP web push, users are to specify only the first worker file\n   * OneSignalSDKWorker.js, with an app ID parameter ?appId=12345. AMP web push\n   * is vendor agnostic and doesn't know about OneSignal, so all relevant\n   * information has to be passed to the service worker, which is the only\n   * vendor-specific file. So the service worker being installed is always\n   * OneSignalSDKWorker.js?appId=12345 and never OneSignalSDKUpdaterWorker.js.\n   * If AMP web push sees another worker like OneSignalSDKUpdaterWorker.js, or\n   * even the same OneSignalSDKWorker.js without the app ID query parameter, the\n   * user is considered unsubscribed.\n   *\n   * c) Due to b's restriction, we must always install\n   * OneSignalSDKWorker.js?appId=xxx. We also have to appropriately handle\n   * legacy cases:\n   *\n   *    c-1) Where developers have OneSignalSDKWorker.js or\n   *    OneSignalSDKUpdaterWorker.js alternatingly installed\n   *\n   *    c-2) Where developers running progressive web apps force-register\n   *    OneSignalSDKWorker.js\n   *\n   * Actually, users can customize the file names of Worker A / Worker B, but\n   * it's up to them to be consistent with their naming. For AMP web push, users\n   * can specify the full string to expect for the service worker. They can add\n   * additional query parameters, but this must then stay consistent.\n   *\n   * Installation Procedure\n   * ----------------------\n   *\n   * Worker A is always installed. If Worker A is already installed, Worker B is\n   * installed first, and then Worker A is installed again. This is necessary\n   * because AMP web push requires Worker A to be installed for the user to be\n   * considered subscribed.\n   */\n  public async installWorker() {\n    if (!Environment.supportsServiceWorkers()) {\n      return;\n    }\n\n    const preInstallWorkerState = await this.getActiveState();\n    await this.installAlternatingWorker();\n    await new Promise(async resolve => {\n      const postInstallWorkerState = await this.getActiveState();\n      if (preInstallWorkerState !== postInstallWorkerState &&\n        postInstallWorkerState !== ServiceWorkerActiveState.Installing) {\n        resolve();\n      } else {\n        navigator.serviceWorker.addEventListener('controllerchange', async e => {\n          const postInstallWorkerState = await this.getActiveState();\n          if (postInstallWorkerState !== preInstallWorkerState &&\n            postInstallWorkerState !== ServiceWorkerActiveState.Installing) {\n            resolve();\n          }\n        });\n      }\n    });\n    if ((await this.getActiveState()) === ServiceWorkerActiveState.WorkerB) {\n      // If the worker is Worker B, reinstall Worker A\n      await this.installAlternatingWorker();\n    }\n\n    MainHelper.establishServiceWorkerChannel();\n  }\n\n  /**\n   * Installs the OneSignal service worker.\n   *\n   * Depending on the existing worker, the alternate swap worker may be\n   * installed or, for 3rd party workers, the existing worker may be uninstalled\n   * before installing ours.\n   */\n  private async installAlternatingWorker() {\n    const workerState = await this.getActiveState();\n\n    if (workerState === ServiceWorkerActiveState.ThirdParty) {\n      /*\n         Always unregister 3rd party service workers.\n\n         Unregistering unsubscribes the existing push subscription and allows us\n         to register a new push subscription. This takes care of possible previous mismatched sender IDs\n       */\n      const workerRegistration = await navigator.serviceWorker.getRegistration();\n      await workerRegistration.unregister();\n    }\n\n    let workerDirectory, workerFileName, fullWorkerPath;\n\n    // Determine which worker to install\n    if (\n      workerState === ServiceWorkerActiveState.WorkerA\n    ) {\n      workerDirectory = this.config.workerBPath.getPathWithoutFileName();\n      workerFileName = this.config.workerBPath.getFileName();\n    } else if (workerState === ServiceWorkerActiveState.WorkerB ||\n      workerState === ServiceWorkerActiveState.ThirdParty ||\n      workerState === ServiceWorkerActiveState.None) {\n      workerDirectory = this.config.workerAPath.getPathWithoutFileName();\n      workerFileName = this.config.workerAPath.getFileName();\n    } else if (workerState === ServiceWorkerActiveState.Bypassed) {\n      /*\n        If the page is hard refreshed bypassing the cache, no service worker\n        will control the page.\n\n        It doesn't matter if we try to reinstall an existing worker; still no\n        service worker will control the page after installation.\n       */\n      throw new InvalidStateError(InvalidStateReason.UnsupportedEnvironment);\n    }\n\n    const installUrlQueryParams = {\n      appId: this.context.appConfig.appId.toString()\n    };\n    fullWorkerPath = `${workerDirectory}/${workerFileName}?${encodeHashAsUriComponent(installUrlQueryParams)}`;\n    log.info(`[Service Worker Installation] Installing service worker ${fullWorkerPath}.`);\n    await navigator.serviceWorker.register(fullWorkerPath, this.config.registrationOptions);\n    log.debug(`[Service Worker Installation] Service worker installed.`);\n  }\n}\n","/**\n * LocalStorage with expiring keys.\n *\n * Used when synchronous data access is required, like when clicking the notify button to show the\n * popup conditionally based on a storage value. IndexedDb and cross-frame communication is\n * asynchronous and loses the direct user action privilege required to show a popup.\n */\nexport default class TimedLocalStorage {\n  /**\n   * Performs a feature test to determine whether LocalStorage is accessible. For example, a user's\n   * browser preferences set to prevent saving website data will disable LocalStorage.\n   */\n  public static isLocalStorageSupported(): boolean {\n    if (typeof localStorage === \"undefined\") {\n      return false;\n    }\n    try {\n      localStorage.getItem(\"test\");\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Sets a key in LocalStorage with an expiration time measured in minutes.\n   */\n  public static setItem(key: string, value: any, expirationInMinutes?: number): void {\n    if (!TimedLocalStorage.isLocalStorageSupported()) {\n      return;\n    }\n    const expirationInMilliseconds = typeof expirationInMinutes !== \"undefined\" ?\n      expirationInMinutes * 60 * 1000 :\n      0;\n    const record = {\n      value: JSON.stringify(value),\n      timestamp: typeof expirationInMinutes !== \"undefined\" ?\n        new Date().getTime() + expirationInMilliseconds :\n        undefined,\n    };\n    localStorage.setItem(key, JSON.stringify(record));\n  }\n\n  /**\n   * Retrieves a key from LocalStorage if the expiration time when the key was set hasn't already\n   * expired.\n   */\n  public static getItem(key: string): any | null  {\n    if (!TimedLocalStorage.isLocalStorageSupported()) {\n      return null;\n    }\n    const record = localStorage.getItem(key);\n    let parsedRecord;\n    try {\n      parsedRecord = JSON.parse(record);\n    } catch (e) {\n      return null;\n    }\n    if (parsedRecord === null) {\n      return null;\n    }\n\n    if (parsedRecord.timestamp &&\n      new Date().getTime() >= parsedRecord.timestamp) {\n      localStorage.removeItem(key);\n      return null;\n    }\n\n    let parsedRecordValue = parsedRecord.value;\n    try {\n      parsedRecordValue = JSON.parse(parsedRecord.value);\n    } catch (e) {\n      return parsedRecordValue;\n    }\n    return parsedRecordValue;\n  }\n\n  /**\n   * Removes an item from LocalStorage.\n   */\n  public static removeItem(key: string): void  {\n    if (!TimedLocalStorage.isLocalStorageSupported()) {\n      return null;\n    }\n    localStorage.removeItem(key);\n  }\n}\n","import * as Browser from 'bowser';\n\nimport Environment from '../Environment';\nimport NotImplementedError from '../errors/NotImplementedError';\nimport { DeliveryPlatformKind } from './DeliveryPlatformKind';\nimport { DevicePlatformKind } from './DevicePlatformKind';\nimport { RawPushSubscription } from './RawPushSubscription';\nimport { Serializable } from './Serializable';\nimport { SubscriptionStateKind } from './SubscriptionStateKind';\n\nimport { DeviceRecord } from './DeviceRecord';\n\n\n/**\n * Describes a push notification device record.\n */\nexport class PushDeviceRecord extends DeviceRecord {\n  public subscription: RawPushSubscription;\n\n  /**\n   * @param subscription Omitting this parameter does not void the record's identifier.\n   */\n  constructor(subscription: RawPushSubscription) {\n    super();\n    this.subscription = subscription;\n  }\n\n  serialize() {\n    const serializedBundle: any = super.serialize();\n\n    if (this.subscription) {\n      serializedBundle.identifier = Browser.safari ?\n        this.subscription.safariDeviceToken :\n        this.subscription.w3cEndpoint.toString();\n      serializedBundle.web_auth = this.subscription.w3cAuth;\n      serializedBundle.web_p256 = this.subscription.w3cP256dh;\n    }\n\n    return serializedBundle;\n  }\n\n  static createFromPushSubscription(\n    appId: string,\n    rawPushSubscription: RawPushSubscription,\n    subscriptionState?: SubscriptionStateKind,\n  ) {\n    const pushRegistration = new PushDeviceRecord(rawPushSubscription);\n    pushRegistration.appId = appId;\n    pushRegistration.subscriptionState = rawPushSubscription ?\n      SubscriptionStateKind.Subscribed :\n      SubscriptionStateKind.NotSubscribed;\n    if (subscriptionState) {\n      pushRegistration.subscriptionState = subscriptionState;\n    }\n    return pushRegistration;\n  }\n\n  deserialize(_: object): PushDeviceRecord { throw new NotImplementedError(); }\n}\n","import * as Browser from 'bowser';\n\nimport Environment from '../Environment';\nimport NotImplementedError from '../errors/NotImplementedError';\nimport { DeliveryPlatformKind } from './DeliveryPlatformKind';\nimport { DevicePlatformKind } from './DevicePlatformKind';\nimport { RawPushSubscription } from './RawPushSubscription';\nimport { Serializable } from './Serializable';\nimport { SubscriptionStateKind } from './SubscriptionStateKind';\n\nimport { redetectBrowserUserAgent } from \"../utils\";\n\n\n/**\n * Describes the fields of a OneSignal \"player\" device record.\n *\n * This is used when creating or modifying push and email records.\n */\nexport abstract class DeviceRecord implements Serializable {\n  public appId: string;\n  public deliveryPlatform: DeliveryPlatformKind;\n  public language: string;\n  public timezone: number;\n  public browserName: string;\n  public browserVersion: number;\n  public operatingSystem: string;\n  public operatingSystemVersion: string;\n  public devicePlatform: DevicePlatformKind;\n  public deviceModel: string;\n  public sdkVersion: string;\n  public subscriptionState: SubscriptionStateKind;\n\n  constructor() {\n    this.language = Environment.getLanguage();\n    this.timezone = new Date().getTimezoneOffset() * -60;\n    this.browserName = Browser.name;\n    this.browserVersion = parseInt(String(Browser.version)) !== NaN ? parseInt(String(Browser.version)) : -1;\n    this.operatingSystem = this.getBrowserOperatingSystem();\n    this.operatingSystemVersion = String(Browser.osversion);\n    this.devicePlatform = this.getDevicePlatform();\n    this.deviceModel = navigator.platform;\n    this.sdkVersion = Environment.version().toString();\n    this.deliveryPlatform = this.getDeliveryPlatform();\n    // Unimplemented properties are appId, deliveryPlatform, subscriptionState, and subscription\n  }\n\n  getDevicePlatform(): DevicePlatformKind {\n    const isMobile = Browser.mobile;\n    const isTablet = Browser.tablet;\n\n    if (isMobile) {\n      return DevicePlatformKind.Mobile;\n    } else if (isTablet) {\n      return DevicePlatformKind.Tablet;\n    } else {\n      return DevicePlatformKind.Desktop;\n    }\n  }\n\n  isSafari(): boolean {\n    return Browser.safari && window.safari !== undefined && window.safari.pushNotification !== undefined;\n  }\n\n  getBrowserOperatingSystem(): string {\n    /*\n      mac\n      windows - other than Windows Phone\n      windowsphone\n      linux - other than android, chromeos, webos, tizen, and sailfish\n      chromeos\n      android\n      ios - also sets one of iphone/ipad/ipod\n      blackberry\n      firefoxos\n      webos - may also set touchpad\n      bada\n      tizen\n      sailfish\n    */\n    if (Browser.mac) {\n      return \"Mac OS X\";\n    }\n    if (Browser.windows) {\n      return \"Microsoft Windows\";\n    }\n    if (Browser.windowsphone) {\n      return \"Microsoft Windows Phone\";\n    }\n    if (Browser.linux) {\n      return \"Linux\";\n    }\n    if (Browser.chromeos) {\n      return \"Google Chrome OS\";\n    }\n    if (Browser.android) {\n      return \"Google Android\";\n    }\n    if (Browser.ios) {\n      return \"Apple iOS\";\n    }\n    if (Browser.blackberry) {\n      return \"Blackberry\";\n    }\n    if (Browser.firefoxos) {\n      return \"Mozilla Firefox OS\";\n    }\n    if (Browser.webos) {\n      return \"WebOS\";\n    }\n    if (Browser.tizen) {\n      return \"Tizen\";\n    }\n    if (Browser.sailfish) {\n      return \"Sailfish OS\";\n    }\n    return \"Unknown\";\n  }\n\n  getDeliveryPlatform(): DeliveryPlatformKind {\n    // For testing purposes, allows changing the browser user agent\n    const browser = redetectBrowserUserAgent();\n\n    if (this.isSafari()) {\n      return DeliveryPlatformKind.Safari;\n    } else if (Browser.firefox) {\n      return DeliveryPlatformKind.Firefox;\n    } else if (Browser.msedge) {\n      return DeliveryPlatformKind.Edge;\n    } else {\n      return DeliveryPlatformKind.ChromeLike;\n    }\n  }\n\n  serialize() {\n    const serializedBundle: any = {\n      /* Old Parameters */\n      device_type: this.deliveryPlatform,\n      language: this.language,\n      timezone: this.timezone,\n      device_os: this.browserVersion,\n      sdk: this.sdkVersion,\n      notification_types: this.subscriptionState,\n      /* New Parameters */\n      delivery_platform: this.deliveryPlatform,\n      browser_name: this.browserName,\n      browser_version: this.browserVersion,\n      operating_system: this.operatingSystem,\n      operating_system_version: this.operatingSystemVersion,\n      device_platform: this.devicePlatform,\n      device_model: this.deviceModel,\n    };\n\n    if (this.appId) {\n      serializedBundle.app_id = this.appId.value;\n    }\n\n    return serializedBundle;\n  }\n\n  deserialize(_: object): DeviceRecord { throw new NotImplementedError(); }\n}\n","import * as log from 'loglevel';\nimport * as objectAssign from 'object-assign';\n\nimport SubscriptionHelper from '../../helpers/SubscriptionHelper';\nimport SdkEnvironment from '../../managers/SdkEnvironment';\nimport { ProxyFrameInitOptions } from '../../models/ProxyFrameInitOptions';\nimport Postmam from '../../Postmam';\nimport Context from '../../models/Context';\nimport { SubscriptionManager } from '../../managers/SubscriptionManager';\nimport InitHelper from '../../helpers/InitHelper';\nimport ConfigManager from '../../managers/ConfigManager';\n\nexport default class RemoteFrame implements Disposable {\n  protected messenger: Postmam;\n  protected options: ProxyFrameInitOptions;\n\n  // Promise to track whether connecting back to the host\n  // page has finished\n  private loadPromise: {\n    promise: Promise<void>;\n    resolver: Function;\n    rejector: Function;\n  };\n\n  constructor(initOptions: {\n    /*\n      These options are passed from the Rails app as plain raw untyped values.\n\n      They have to be converted to the right types.\n      */\n    appId: string;\n    /* Passed to both the iFrame and popup */\n    subdomainName: string;\n    /* Passed to both the iFrame and popup. Represents Site URL in dashboard config. */\n    origin: string;\n    /* These three flags may be deprecated */\n    continuePressed: boolean;\n    isPopup: boolean;\n    isModal: boolean;\n  }) {\n    this.options = {\n      appId: initOptions.appId,\n      subdomain: initOptions.subdomainName,\n      origin: initOptions.origin,\n      metrics: {\n        enable: false,\n        mixpanelReportingToken: null\n      }\n    };\n  }\n\n  /**\n   * Loads the messenger on the iFrame to communicate with the host page and\n   * assigns init options to an iFrame-only initialization of OneSignal.\n   *\n   * Our main host page will wait for all iFrame scripts to complete since the\n   * host page uses the iFrame onload event to begin sending handshake messages\n   * to the iFrame.\n   *\n   * There is no load timeout here; the iFrame initializes it scripts and waits\n   * forever for the first handshake message.\n   */\n  async initialize(): Promise<void> {\n    const creator = window.opener || window.parent;\n    if (creator == window) {\n      document.write(\n        `<span style='font-size: 14px; color: red; font-family: sans-serif;'>OneSignal: This page cannot be directly opened, and must be opened as a result of a subscription call.</span>`\n      );\n      return Promise.resolve();\n    }\n    // The rest of our SDK isn't refactored enough yet to accept typed objects\n    // Within this class, we can use them, but when we assign them to\n    // OneSignal.config, assign the simple string versions\n    const rasterizedOptions = objectAssign(this.options);\n    rasterizedOptions.appId = rasterizedOptions.appId.value;\n    /* This is necessary, otherwise the subdomain is lost after ConfigManager.getAppConfig */\n    rasterizedOptions.subdomainName = rasterizedOptions.subdomain;\n    rasterizedOptions.origin = rasterizedOptions.origin;\n    OneSignal.config = rasterizedOptions || {};\n\n    const appConfig = await new ConfigManager().getAppConfig(rasterizedOptions);\n    OneSignal.context = new Context(appConfig);\n    OneSignal.context.workerMessenger.listen(true);\n\n    OneSignal.initialized = true;\n\n    (this as any).loadPromise = {};\n    (this as any).loadPromise.promise = new Promise((resolve, reject) => {\n      this.loadPromise.resolver = resolve;\n      this.loadPromise.rejector = reject;\n    });\n\n    this.establishCrossOriginMessaging();\n    return this.loadPromise.promise;\n  }\n\n  establishCrossOriginMessaging(): void {}\n\n  dispose(): void {\n    // Removes all events\n    this.messenger.destroy();\n  }\n\n  protected finishInitialization() {\n    this.loadPromise.resolver();\n  }\n\n  async subscribe() {\n    // Do not register OneSignalSDKUpdaterWorker.js for HTTP popup sites; the file does not exist\n    const isPushEnabled = await OneSignal.isPushNotificationsEnabled();\n    const windowCreator = opener || parent;\n\n    if (!isPushEnabled) {\n      SubscriptionHelper.registerForPush();\n    } else {\n      if (windowCreator) {\n        window.close();\n      }\n    }\n  }\n}\n","import { WorkerMessenger } from '../libraries/WorkerMessenger';\nimport { ServiceWorkerManager } from '../managers/ServiceWorkerManager';\nimport { SubscriptionManager } from '../managers/SubscriptionManager';\nimport { DynamicResourceLoader } from '../services/DynamicResourceLoader';\nimport CookieSyncer from '../modules/CookieSyncer';\nimport { AppConfig } from './AppConfig';\nimport Path from './Path';\nimport SdkEnvironment from '../managers/SdkEnvironment';\nimport { SessionManager } from '../managers/SessionManager';\nimport PermissionManager from '../managers/PermissionManager';\nimport MetricsManager from '../managers/MetricsManager';\n\n\nexport default class Context {\n\n  public appConfig: AppConfig;\n  public dynamicResourceLoader: DynamicResourceLoader;\n  public subscriptionManager: SubscriptionManager;\n  public serviceWorkerManager: ServiceWorkerManager;\n  public workerMessenger: WorkerMessenger;\n  public cookieSyncer: CookieSyncer;\n  public sessionManager: SessionManager;\n  public permissionManager: PermissionManager;\n  public metricsManager: MetricsManager;\n\n  constructor(appConfig: AppConfig) {\n    this.appConfig = appConfig;\n\n    this.cookieSyncer = new CookieSyncer(this, appConfig.cookieSyncEnabled);\n\n    this.subscriptionManager = new SubscriptionManager(this, {\n      safariWebId: appConfig.safariWebId,\n      appId: appConfig.appId,\n      vapidPublicKey: appConfig.vapidPublicKey,\n      onesignalVapidPublicKey: appConfig.onesignalVapidPublicKey,\n    });\n\n    const serviceWorkerManagerConfig = {\n      workerAPath: new Path('/' + SdkEnvironment.getBuildEnvPrefix() + 'OneSignalSDKWorker.js'),\n      workerBPath: new Path('/'+ SdkEnvironment.getBuildEnvPrefix() + 'OneSignalSDKUpdaterWorker.js'),\n      registrationOptions: { scope: '/' }\n    };\n    if (appConfig.userConfig) {\n      if (appConfig.userConfig.path) {\n        serviceWorkerManagerConfig.workerAPath = new Path((appConfig.userConfig.path) + SdkEnvironment.getBuildEnvPrefix() + appConfig.userConfig.serviceWorkerPath);\n        serviceWorkerManagerConfig.workerBPath = new Path((appConfig.userConfig.path) + SdkEnvironment.getBuildEnvPrefix() + appConfig.userConfig.serviceWorkerUpdaterPath);\n      }\n      if (appConfig.userConfig.serviceWorkerParam) {\n        serviceWorkerManagerConfig.registrationOptions = appConfig.userConfig.serviceWorkerParam;\n      }\n    }\n    this.serviceWorkerManager = new ServiceWorkerManager(this, serviceWorkerManagerConfig);\n\n    this.workerMessenger = new WorkerMessenger(this);\n    this.dynamicResourceLoader = new DynamicResourceLoader();\n\n    this.sessionManager = new SessionManager();\n    this.permissionManager = new PermissionManager();\n    this.metricsManager = new MetricsManager(appConfig.metrics.enable, appConfig.metrics.mixpanelReportingToken);\n  }\n}\n","import { AppUserConfig, AppConfig, ConfigIntegrationKind, NotificationClickMatchBehavior, NotificationClickActionBehavior, ServerAppConfig } from '../models/AppConfig';\nimport OneSignalApi from '../OneSignalApi';\nimport InitHelper from '../helpers/InitHelper';\nimport { SdkInitError, SdkInitErrorKind } from '../errors/SdkInitError';\nimport * as objectAssign from 'object-assign';\nimport Badge from '../bell/Badge';\nimport { trimUndefined, contains } from '../utils';\nimport SdkEnvironment from './SdkEnvironment';\nimport { WindowEnvironmentKind } from '../models/WindowEnvironmentKind';\n\nenum ObjectType {\n  Boolean,\n  Text,\n  Number\n}\n\nexport enum IntegrationConfigurationKind {\n  /**\n   * Configuration comes from the dashboard only.\n   */\n  Dashboard,\n  /**\n   * Configuration comes from user-provided JavaScript code only.\n   */\n  JavaScript\n}\n\nexport interface IntegrationCapabilities {\n  configuration: IntegrationConfigurationKind;\n}\n\n/**\n * Handles downloading settings from OneSignal and performing any other initialization-related tasks.\n */\nexport default class ConfigManager {\n  /**\n   * Downloads configuration from the OneSignal dashboard, merges it with user-supplied configuration from JavaScript\n   * code, and returns Web SDK-specific configuration.\n   */\n  public async getAppConfig(userConfig: AppUserConfig): Promise<AppConfig> {\n    try {\n      const serverConfig = await OneSignalApi.downloadServerAppConfig(userConfig.appId);\n      const appConfig = this.getMergedConfig(userConfig, serverConfig);\n      if (appConfig.restrictedOriginEnabled) {\n        if (SdkEnvironment.getWindowEnv() !== WindowEnvironmentKind.ServiceWorker) {\n          if (window.top === window &&\n            !contains(window.location.hostname, \".os.tc\") &&\n            !contains(window.location.hostname, \".onesignal.com\") &&\n            !this.doesCurrentOriginMatchConfigOrigin(appConfig.origin)) {\n            throw new SdkInitError(SdkInitErrorKind.WrongSiteUrl, {\n              siteUrl: appConfig.origin\n            });\n          }\n        }\n      }\n      return appConfig;\n    } catch (e) {\n      if (e) {\n        if (e.code === 1) {\n          throw new SdkInitError(SdkInitErrorKind.InvalidAppId);\n        } else if (e.code === 2) {\n          throw new SdkInitError(SdkInitErrorKind.AppNotConfiguredForWebPush);\n        }\n      }\n      throw e;\n    }\n  }\n\n  private doesCurrentOriginMatchConfigOrigin(configOrigin) {\n    try {\n      return location.origin === new URL(configOrigin).origin;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  private getIntegrationCapabilities(integration: ConfigIntegrationKind): IntegrationCapabilities {\n    switch (integration) {\n      case ConfigIntegrationKind.Custom:\n      case ConfigIntegrationKind.WordPress:\n        return {\n          configuration: IntegrationConfigurationKind.JavaScript,\n        };\n      default:\n        return {\n          configuration: IntegrationConfigurationKind.Dashboard,\n        };\n    }\n  }\n\n  /**\n   * Merges configuration downloaded from the OneSignal dashboard with user-provided JavaScript configuration to produce\n   * a final web SDK-specific configuration.\n   */\n  public getMergedConfig(userConfig: AppUserConfig, serverConfig: ServerAppConfig): AppConfig {\n    const configIntegrationKind = this.getConfigIntegrationKind(serverConfig);\n    return {\n      appId: serverConfig.app_id,\n      subdomain: this.getSubdomainForConfigIntegrationKind(configIntegrationKind, userConfig, serverConfig),\n      origin: serverConfig.config.origin,\n      httpUseOneSignalCom: serverConfig.config.http_use_onesignal_com,\n      cookieSyncEnabled: serverConfig.features.cookie_sync.enable,\n      restrictedOriginEnabled: serverConfig.features.restrict_origin && serverConfig.features.restrict_origin.enable,\n      metrics: {\n        enable: serverConfig.features.metrics.enable,\n        mixpanelReportingToken: serverConfig.features.metrics.mixpanel_reporting_token\n      },\n      safariWebId: serverConfig.config.safari_web_id,\n      vapidPublicKey: serverConfig.config.vapid_public_key,\n      onesignalVapidPublicKey: serverConfig.config.onesignal_vapid_public_key,\n      emailAuthRequired: serverConfig.features.email && serverConfig.features.email.require_auth,\n      userConfig: this.getUserConfigForConfigIntegrationKind(configIntegrationKind, userConfig, serverConfig),\n    };\n  }\n\n  private getConfigIntegrationKind(serverConfig: ServerAppConfig): ConfigIntegrationKind {\n    if (serverConfig.config.integration) {\n      return serverConfig.config.integration.kind;\n    } else {\n      return ConfigIntegrationKind.Custom;\n    }\n  }\n\n  private getUserConfigForConfigIntegrationKind(\n    configIntegrationKind: ConfigIntegrationKind,\n    userConfig: AppUserConfig,\n    serverConfig: ServerAppConfig\n  ): AppUserConfig {\n    const integrationCapabilities = this.getIntegrationCapabilities(configIntegrationKind);\n    switch (integrationCapabilities.configuration) {\n      case IntegrationConfigurationKind.Dashboard:\n       /*\n         Ignores code-based initialization configuration and uses dashboard configuration only.\n        */\n        return {\n          appId: serverConfig.app_id,\n          autoRegister: false,\n          path: serverConfig.config.serviceWorker.path,\n          serviceWorkerPath: serverConfig.config.serviceWorker.workerName,\n          serviceWorkerUpdaterPath: serverConfig.config.serviceWorker.updaterWorkerName,\n          serviceWorkerParam: { scope: serverConfig.config.serviceWorker.registrationScope },\n          subdomainName: serverConfig.config.siteInfo.proxyOrigin,\n          promptOptions: {\n            slidedown: {\n              autoPrompt: serverConfig.config.staticPrompts.slidedown.enabled,\n              actionMessage: serverConfig.config.staticPrompts.slidedown.actionMessage,\n              acceptButtonText: serverConfig.config.staticPrompts.slidedown.acceptButton,\n              cancelButtonText: serverConfig.config.staticPrompts.slidedown.cancelButton\n            },\n            fullscreen: {\n              actionMessage: serverConfig.config.staticPrompts.fullscreen.actionMessage,\n              acceptButton: serverConfig.config.staticPrompts.fullscreen.acceptButton,\n              cancelButton: serverConfig.config.staticPrompts.fullscreen.cancelButton,\n              title: serverConfig.config.staticPrompts.fullscreen.title,\n              message: serverConfig.config.staticPrompts.fullscreen.message,\n              caption: serverConfig.config.staticPrompts.fullscreen.caption,\n              autoAcceptTitle: serverConfig.config.staticPrompts.fullscreen.autoAcceptTitle,\n            }\n          },\n          welcomeNotification: {\n            disable: !serverConfig.config.welcomeNotification.enable,\n            title: serverConfig.config.welcomeNotification.title,\n            message: serverConfig.config.welcomeNotification.message,\n            url: serverConfig.config.welcomeNotification.url\n          },\n          notifyButton: {\n            enable: serverConfig.config.staticPrompts.bell.enabled,\n            displayPredicate: serverConfig.config.staticPrompts.bell.hideWhenSubscribed ?\n              () => {\n                return OneSignal.isPushNotificationsEnabled()\n                  .then(isPushEnabled => {\n                      /* The user is subscribed, so we want to return \"false\" to hide the notify button */\n                      return !isPushEnabled;\n                  });\n              } :\n              null,\n            size: serverConfig.config.staticPrompts.bell.size,\n            position: serverConfig.config.staticPrompts.bell.location,\n            showCredit: false,\n            offset: {\n              bottom: serverConfig.config.staticPrompts.bell.offset.bottom + 'px',\n              left: serverConfig.config.staticPrompts.bell.offset.left + 'px',\n              right: serverConfig.config.staticPrompts.bell.offset.right + 'px'\n            },\n            colors: {\n              'circle.background': serverConfig.config.staticPrompts.bell.color.main,\n              'circle.foreground': serverConfig.config.staticPrompts.bell.color.accent,\n              'badge.background': 'black',\n              'badge.foreground': 'white',\n              'badge.bordercolor': 'black',\n              'pulse.color': serverConfig.config.staticPrompts.bell.color.accent,\n              'dialog.button.background.hovering': serverConfig.config.staticPrompts.bell.color.main,\n              'dialog.button.background.active': serverConfig.config.staticPrompts.bell.color.main,\n              'dialog.button.background': serverConfig.config.staticPrompts.bell.color.main,\n              'dialog.button.foreground': 'white',\n            },\n            text: {\n              'tip.state.unsubscribed': serverConfig.config.staticPrompts.bell.tooltip.unsubscribed,\n              'tip.state.subscribed': serverConfig.config.staticPrompts.bell.tooltip.subscribed,\n              'tip.state.blocked': serverConfig.config.staticPrompts.bell.tooltip.blocked,\n              'message.prenotify': \"Click to subscribe to notifications\",\n              'message.action.subscribed': serverConfig.config.staticPrompts.bell.message.subscribing,\n              'message.action.resubscribed': serverConfig.config.staticPrompts.bell.message.subscribing,\n              'message.action.unsubscribed': serverConfig.config.staticPrompts.bell.message.unsubscribing,\n              'dialog.main.title': serverConfig.config.staticPrompts.bell.dialog.main.title,\n              'dialog.main.button.subscribe': serverConfig.config.staticPrompts.bell.dialog.main.subscribeButton,\n              'dialog.main.button.unsubscribe': serverConfig.config.staticPrompts.bell.dialog.main.unsubscribeButton,\n              'dialog.blocked.title': serverConfig.config.staticPrompts.bell.dialog.blocked.title,\n              'dialog.blocked.message': serverConfig.config.staticPrompts.bell.dialog.blocked.message,\n            }\n          },\n          persistNotification: serverConfig.config.notificationBehavior.display.persist,\n          webhooks: {\n            cors: serverConfig.config.webhooks.corsEnable,\n            'notification.displayed': serverConfig.config.webhooks.notificationDisplayedHook,\n            'notification.clicked': serverConfig.config.webhooks.notificationClickedHook,\n            'notification.dismissed': serverConfig.config.webhooks.notificationDismissedHook,\n          },\n          notificationClickHandlerMatch: serverConfig.config.notificationBehavior.click.match,\n          notificationClickHandlerAction: serverConfig.config.notificationBehavior.click.action,\n          allowLocalhostAsSecureOrigin: serverConfig.config.setupBehavior.allowLocalhostAsSecureOrigin\n        };\n      case IntegrationConfigurationKind.JavaScript:\n        /*\n          Ignores dashboard configuration and uses code-based configuration only.\n        */\n        return objectAssign({}, userConfig, {\n          serviceWorkerParam: typeof OneSignal !== 'undefined' && !!OneSignal.SERVICE_WORKER_PARAM\n            ? OneSignal.SERVICE_WORKER_PARAM\n            : { scope: '/' },\n          serviceWorkerPath: typeof OneSignal !== 'undefined' && !!OneSignal.SERVICE_WORKER_PATH\n              ? OneSignal.SERVICE_WORKER_PATH\n              : 'OneSignalSDKWorker.js',\n          serviceWorkerUpdaterPath: typeof OneSignal !== 'undefined' && !!OneSignal.SERVICE_WORKER_UPDATER_PATH\n              ? OneSignal.SERVICE_WORKER_UPDATER_PATH\n              : 'OneSignalSDUpdaterKWorker.js',\n          path: !!userConfig.path ? userConfig.path : '/'\n        });\n    }\n  }\n\n  /**\n   * Describes how to merge a dashboard-set subdomain with a/lack of user-supplied subdomain.\n   */\n  private getSubdomainForConfigIntegrationKind(\n    configIntegrationKind: ConfigIntegrationKind,\n    userConfig: AppUserConfig,\n    serverConfig: ServerAppConfig\n  ): string {\n    const integrationCapabilities = this.getIntegrationCapabilities(configIntegrationKind);\n    let userValue = userConfig.subdomainName;\n    let serverValue = '';\n\n    switch (integrationCapabilities.configuration) {\n      case IntegrationConfigurationKind.Dashboard:\n        serverValue = serverConfig.config.siteInfo.proxyOriginEnabled ?\n          serverConfig.config.siteInfo.proxyOrigin :\n          undefined;\n        break;\n      case IntegrationConfigurationKind.JavaScript:\n        serverValue = serverConfig.config.subdomain;\n        break;\n    }\n\n    if (serverValue && !this.shouldUseServerConfigSubdomain(userValue, integrationCapabilities)) {\n      return undefined;\n    } else {\n      return serverValue;\n    }\n  }\n\n  private shouldUseServerConfigSubdomain(\n    userProvidedSubdomain: string,\n    capabilities: IntegrationCapabilities\n  ): boolean {\n    switch (capabilities.configuration) {\n      case IntegrationConfigurationKind.Dashboard:\n        /*\n          Dashboard config using the new web config editor always takes precedence.\n         */\n        return true;\n      case IntegrationConfigurationKind.JavaScript:\n        /*\n         * An HTTPS site may be using either a native push integration or a fallback\n         * subdomain integration. Our SDK decides the integration based on whether\n         * init option subdomainName appears and the site's protocol.\n         *\n         * To avoid having developers write JavaScript to customize the SDK,\n         * configuration properties like subdomainName are downloaded on page start.\n         *\n         * New developers setting up web push can omit subdomainName, but existing\n         * developers already having written code to configure OneSignal aren't\n         * removing their code.\n         *\n         * When an HTTPS site is configured with a subdomain on the server-side, we do\n         * not apply it even though we've downloaded this configuration unless the\n         * user also declares it manually in their initialization code.\n         */\n        switch (location.protocol) {\n          case 'https:':\n            return !!userProvidedSubdomain;\n          case 'http:':\n            return true;\n          default:\n            return false;\n        }\n    }\n  }\n}\n","export enum TestEnvironmentKind {\n  None = \"None\",\n  UnitTesting = \"Unit Testing\"\n}\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 40\n// module chunks = 0","\n/**\n * Source: https://github.com/pazguille/emitter-es6\n */\n\nexport type EventHandler = (...args: any[]) => any;\nexport type OnceEventHandler = {\n  listener: EventHandler\n};\n\n interface ListenerMap {\n    [index: string]: (EventHandler | OnceEventHandler)[];\n}\n\n/**\n * Creates a new instance of Emitter.\n * @class\n * @returns {Object} emitter - An instance of Emitter.\n * @example\n * var emitter = new Emitter();\n */\nexport default class Emitter {\n\n  private _events: ListenerMap;\n\n  constructor() {\n    this._events = {};\n  };\n\n  /**\n   * Adds a listener to the collection for a specified event.\n   */\n  public on(event: string, listener: EventHandler): Emitter {\n    this._events[event] = this._events[event] || [];\n    this._events[event].push(listener);\n    return (this as any);\n  };\n\n  /**\n   * Adds a one time listener to the collection for a specified event. It will\n   * execute only once.\n   */\n  public once(event: string, listener: EventHandler): Emitter {\n    let that = this;\n\n    function fn(this: Function) {\n      that.off(event, fn);\n      listener.apply(this, arguments);\n    }\n\n    (fn as any).listener = listener;\n\n    this.on(event, fn);\n\n    return this;\n  };\n\n  /**\n   * Removes a listener from the collection for a specified event.\n   */\n  public off(event: string, listener: EventHandler): Emitter {\n    let listeners = this._events[event];\n\n    if (listeners !== undefined) {\n      for (let j = 0; j < listeners.length; j += 1) {\n        if (listeners[j] === listener || (listeners[j] as OnceEventHandler).listener === listener) {\n          listeners.splice(j, 1);\n          break;\n        }\n      }\n\n      if (listeners.length === 0) {\n        this.removeAllListeners(event);\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Removes all listeners from the collection for a specified event.\n   */\n  public removeAllListeners(event: string): Emitter {\n    try {\n      delete this._events[event];\n    } catch(e) {};\n\n    return this;\n  };\n\n  /**\n   * Returns all listeners from the collection for a specified event.\n   * @public\n   * @function\n   * @name Emitter#listeners\n   * @param {String} event - Event name.\n   * @returns {Array}\n   * @example\n   * me.listeners('ready');\n   */\n  public listeners(event: string): (EventHandler | OnceEventHandler)[] {\n    try {\n      return this._events[event];\n    } catch (e) {\n      return undefined;\n    };\n  };\n\n  /**\n   * Execute each item in the listener collection in order with the specified\n   * data.\n   */\n  public emit(..._: any[]) {\n    let args = [].slice.call(arguments, 0); // converted to array\n    let event = args.shift();\n    let listeners = this._events[event];\n\n    if (listeners !== undefined) {\n      listeners = listeners.slice(0);\n      let len = listeners.length;\n      for (let i = 0; i < len; i += 1) {\n        (listeners[i] as Function).apply(this, args);\n      }\n    }\n\n    return this;\n  };\n\n}\n","import * as log from 'loglevel';\n\nimport Emitter from '../libraries/Emitter';\nimport { contains } from '../utils';\n\nexport default class IndexedDb {\n\n  public emitter: Emitter;\n  private database: IDBDatabase;\n  private openLock: Promise<IDBDatabase>;\n\n  constructor(private databaseName: string) {\n    this.emitter = new Emitter();\n  }\n\n  private open(databaseName: string): Promise<IDBDatabase> {\n    return new Promise<IDBDatabase>(resolve => {\n      try {\n        // Open algorithm: https://www.w3.org/TR/IndexedDB/#h-opening\n        var request: IDBOpenDBRequest = indexedDB.open(databaseName, 1);\n      } catch (e) {\n        // Errors should be thrown on the request.onerror event, but just in case Firefox throws additional errors\n        // for profile schema too high\n      }\n      if (!request) {\n        return null;\n      }\n      request.onerror = this.onDatabaseOpenError;\n      request.onblocked = this.onDatabaseOpenBlocked;\n      request.onupgradeneeded = this.onDatabaseUpgradeNeeded;\n      request.onsuccess = () => {\n        this.database = request.result;\n        this.database.onerror = this.onDatabaseError;\n        this.database.onversionchange = this.onDatabaseVersionChange;\n        resolve(this.database);\n      };\n    });\n  }\n\n  private async ensureDatabaseOpen() {\n    if (!this.openLock) {\n      this.openLock = this.open(this.databaseName);\n    }\n    await this.openLock;\n    return this.database;\n  }\n\n  private onDatabaseOpenError(event) {\n    // Prevent the error from bubbling: https://bugzilla.mozilla.org/show_bug.cgi?id=1331103#c3\n    /**\n     * To prevent error reporting tools like Sentry.io from picking up errors that\n     * the site owner can't do anything about and use up their quota, hide database open\n     * errors.\n     */\n    event.preventDefault();\n    const error = (<any>event.target).error;\n    if (contains(error.message, 'The operation failed for reasons unrelated to the database itself and not covered by any other error code') ||\n      contains(error.message, 'A mutation operation was attempted on a database that did not allow mutations')) {\n      log.warn(\"OneSignal: IndexedDb web storage is not available on this origin since this profile's IndexedDb schema has been upgraded in a newer version of Firefox. See: https://bugzilla.mozilla.org/show_bug.cgi?id=1236557#c6\");\n    } else {\n      log.warn('OneSignal: Fatal error opening IndexedDb database:', error);\n    }\n  }\n\n  /**\n   * Error events bubble. Error events are targeted at the request that generated the error, then the event bubbles to\n   * the transaction, and then finally to the database object. If you want to avoid adding error handlers to every\n   * request, you can instead add a single error handler on the database object.\n   */\n  private onDatabaseError(event) {\n    log.debug('IndexedDb: Generic database error', event.target.errorCode);\n  }\n\n  /**\n   * Occurs when the upgradeneeded should be triggered because of a version change but the database is still in use\n   * (that is, not closed) somewhere, even after the versionchange event was sent.\n   */\n  private onDatabaseOpenBlocked(): void {\n    log.debug('IndexedDb: Blocked event');\n  }\n\n  /**\n   * Occurs when a database structure change (IDBOpenDBRequest.onupgradeneeded event or IDBFactory.deleteDatabase) was\n   * requested elsewhere (most probably in another window/tab on the same computer).\n   *\n   * versionchange Algorithm: https://www.w3.org/TR/IndexedDB/#h-versionchange-transaction-steps\n   *\n   * Ref: https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onversionchange\n   */\n  private onDatabaseVersionChange(_: IDBVersionChangeEvent): void {\n    log.debug('IndexedDb: versionchange event');\n  }\n\n  /**\n   * Occurs when a new version of the database needs to be created, or has not been created before, or a new version\n   * of the database was requested to be opened when calling window.indexedDB.open.\n   *\n   * Ref: https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest/onupgradeneeded\n   */\n  private onDatabaseUpgradeNeeded(event: IDBVersionChangeEvent): void {\n    log.debug('IndexedDb: Database is being rebuilt or upgraded (upgradeneeded event).');\n    const db = (event.target as IDBOpenDBRequest).result;\n    db.createObjectStore(\"Ids\", {\n      keyPath: \"type\"\n    });\n    db.createObjectStore(\"NotificationOpened\", {\n      keyPath: \"url\"\n    });\n    db.createObjectStore(\"Options\", {\n      keyPath: \"key\"\n    });\n    // Wrap in conditional for tests\n    if (typeof OneSignal !== \"undefined\") {\n      OneSignal._isNewVisitor = true;\n    }\n  }\n\n  /**\n   * Asynchronously retrieves the value of the key at the table (if key is specified), or the entire table (if key is not specified).\n   * @param table The table to retrieve the value from.\n   * @param key The key in the table to retrieve the value of. Leave blank to get the entire table.\n   * @returns {Promise} Returns a promise that fulfills when the value(s) are available.\n   */\n  public async get(table: string, key?: string): Promise<any> {\n    await this.ensureDatabaseOpen();\n    if (key) {\n      // Return a table-key value\n      return await new Promise((resolve, reject) => {\n        var request: IDBRequest = this.database.transaction(table).objectStore(table).get(key);\n        request.onsuccess = () => {\n          resolve(request.result);\n        };\n        request.onerror = () => {\n          reject(request.error);\n        };\n      });\n    } else {\n      // Return all values in table\n      return await new Promise((resolve, reject) => {\n        let jsonResult = {};\n        let cursor = this.database.transaction(table).objectStore(table).openCursor();\n        cursor.onsuccess = (event: any) => {\n          var cursorResult: IDBCursorWithValue = event.target.result;\n          if (cursorResult) {\n            let cursorResultKey: any = cursorResult.key;\n            jsonResult[cursorResultKey] = cursorResult.value;\n            cursorResult.continue();\n          } else {\n            resolve(jsonResult);\n          }\n        };\n        cursor.onerror = () => {\n          reject(cursor.error);\n        };\n      });\n    }\n  }\n\n  /**\n   * Asynchronously puts the specified value in the specified table.\n   */\n  public async put(table: string, key: any) {\n    await this.ensureDatabaseOpen();\n    return await new Promise((resolve, reject) => {\n      try {\n        let request = this.database.transaction([table], 'readwrite').objectStore(table).put(key);\n        request.onsuccess = () => {\n          resolve(key);\n        };\n        request.onerror = (e) => {\n          log.error('Database PUT Transaction Error:', e);\n          reject(e);\n        };\n      } catch (e) {\n        log.error('Database PUT Error:', e);\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * Asynchronously removes the specified key from the table, or if the key is not specified, removes all keys in the table.\n   * @returns {Promise} Returns a promise containing a key that is fulfilled when deletion is completed.\n   */\n  public remove(table: string, key?: string) {\n    if (key) {\n      // Remove a single key from a table\n      var method = \"delete\";\n    } else {\n      // Remove all keys from the table (wipe the table)\n      var method = \"clear\";\n    }\n    return new Promise((resolve, reject) => {\n      try {\n        let request = this.database.transaction([table], 'readwrite').objectStore(table)[method](key);\n        request.onsuccess = () => {\n          resolve(key);\n        };\n        request.onerror = (e) => {\n          log.error('Database REMOVE Transaction Error:', e);\n          reject(e);\n        };\n      } catch (e) {\n        log.error('Database REMOVE Error:', e);\n        reject(e);\n      }\n    });\n  }\n}\n","\nimport { Serializable } from './Serializable';\n\n\nexport class EmailProfile implements Serializable {\n  /**\n   * The OneSignal email player ID obtained after creating an email device record with the plain\n   * text email address.\n   */\n  emailId: string;\n  /**\n   * The plain text email address.\n   */\n  emailAddress: string;\n  /**\n   * The SHA-256 hash of the app's auth key and plain text email address in hex format.\n   */\n  emailAuthHash: string;\n\n  serialize() {\n    return {\n      emailAddress: this.emailAddress,\n      emailAuthHash: this.emailAuthHash,\n      emailId: this.emailId,\n    };\n  }\n\n  static deserialize(bundle: any): EmailProfile {\n    const emailProfile = new EmailProfile();\n    emailProfile.emailId = bundle.emailId;\n    emailProfile.emailAddress = bundle.emailAddress;\n    emailProfile.emailAuthHash = bundle.emailAuthHash;\n    return emailProfile;\n  }\n}\n","import * as log from 'loglevel';\n\nimport { decodeHtmlEntities, delay, getConsoleStyle, nothing } from '../utils';\nimport AnimatedElement from './AnimatedElement';\nimport Bell from './Bell';\n\n\nexport default class Message extends AnimatedElement {\n\n  public bell: any;\n  public contentType: string;\n  public queued: any;\n\n  constructor(bell) {\n    super('.onesignal-bell-launcher-message', 'onesignal-bell-launcher-message-opened', null, 'hidden', ['opacity', 'transform'], '.onesignal-bell-launcher-message-body');\n\n    this.bell = bell;\n    this.contentType = '';\n    this.queued = [];\n  }\n\n  static get TIMEOUT() {\n    return 2500;\n  }\n\n  static get TYPES() {\n    return {\n      TIP: 'tip', // Appears on button hover, disappears on button endhover\n      MESSAGE: 'message', // Appears manually for a specified duration, site visitor cannot control its display. Messages override tips\n      QUEUED: 'queued' // This message was a user-queued message\n    };\n  }\n\n  display(type, content, duration = 0) {\n    log.debug(`Calling %cdisplay(${type}, ${content}, ${duration}).`, getConsoleStyle('code'));\n    return (this.shown ? this.hide() : nothing())\n      .then(() => {\n        this.content = decodeHtmlEntities(content);\n        this.contentType = type;\n      })\n      .then(() => {\n        return this.show();\n      })\n      .then(() => delay(duration))\n      .then(() => {\n        return this.hide();\n      })\n      .then(() => {\n        // Reset back to normal content type so stuff can show a gain\n        this.content = this.getTipForState();\n        this.contentType = 'tip';\n      });\n  }\n\n  getTipForState() {\n    if (this.bell.state === Bell.STATES.UNSUBSCRIBED)\n      return this.bell.text['tip.state.unsubscribed'];\n    else if (this.bell.state === Bell.STATES.SUBSCRIBED)\n      return this.bell.text['tip.state.subscribed'];\n    else if (this.bell.state === Bell.STATES.BLOCKED)\n      return this.bell.text['tip.state.blocked'];\n  }\n\n  enqueue(message) {\n    this.queued.push(decodeHtmlEntities(message));\n    return new Promise((resolve) => {\n      if (this.bell.badge.shown) {\n        this.bell.badge.hide()\n          .then(() => this.bell.badge.increment())\n          .then(() => this.bell.badge.show())\n          .then(resolve);\n      } else {\n        this.bell.badge.increment();\n        if (this.bell.initialized)\n          this.bell.badge.show().then(resolve)\n        else resolve();\n      }\n    });\n  }\n\n  dequeue(message) {\n    let dequeuedMessage = this.queued.pop(message);\n    return new Promise((resolve) => {\n      if (this.bell.badge.shown) {\n        this.bell.badge.hide()\n          .then(() => this.bell.badge.decrement())\n          .then((numMessagesLeft) => {\n            if (numMessagesLeft > 0) {\n              return this.bell.badge.show()\n            } else {\n              return Promise.resolve(this);\n            }\n          })\n          .then(resolve(dequeuedMessage));\n      } else {\n        this.bell.badge.decrement();\n        resolve(dequeuedMessage);\n      }\n    });\n  }\n}\n","export enum PermissionPromptType {\n  /**\n   * The \"main\" browser native permission request dialog when prompting for local or push notification permissions.\n   */\n  HttpsPermissionRequest = <any>'HTTPS permission request',\n  /**\n   * The \"popup\" to subdomain.onesignal.com.\n   */\n  FullscreenHttpPermissionMessage = <any>'fullscreen HTTP permission message',\n  /**\n   * The full-screen HTTPS modal with a dimmed backdrop.\n   */\n  FullscreenHttpsPermissionMessage = <any>'fullscreen HTTPS permission message',\n  /**\n   * The \"sliding down\" prompt.\n   */\n  SlidedownPermissionMessage = <any>'slidedown permission message',\n  /**\n   * The \"notify button\".\n   */\n  SubscriptionBell = <any>'subscription bell'\n}\n","import { InvalidArgumentError, InvalidArgumentReason } from '../errors/InvalidArgumentError';\n\n/**\n * Represents a normalized path.\n *\n * Paths spaces are trimmed.\n * Paths without file names will never contain trailing slashes, except for empty paths.\n */\nexport default class Path {\n  private static QUERY_STRING = '?';\n\n  private path: string;\n\n  constructor(path: string) {\n    if (!path) {\n      throw new InvalidArgumentError('path', InvalidArgumentReason.Empty);\n    }\n    this.path = path.trim();\n  }\n\n  getQueryString(): string {\n    // If there are no ? characters, return null\n    // If there are multiple ?, return the substring starting after the first ? all the way to the end\n    const indexOfDelimiter = this.path.indexOf('?');\n    if (indexOfDelimiter === -1) {\n      return null;\n    }\n    if (this.path.length > indexOfDelimiter) {\n      // Return the substring *after the first ? to the end\n      return this.path.substring(indexOfDelimiter + 1);\n    } else {\n      // The last character is ?\n      return null;\n    }\n  }\n\n  getWithoutQueryString(): string {\n    return this.path.split(Path.QUERY_STRING)[0];\n  }\n\n  getFileName(): string {\n    return this.getWithoutQueryString().split('\\\\').pop().split('/').pop();\n  }\n\n  getFileNameWithQuery(): string {\n    return this.path.split('\\\\').pop().split('/').pop();\n  }\n\n  getFullPath() {\n    return this.path;\n  }\n\n  getPathWithoutFileName() {\n    const newPath = this.getWithoutQueryString();\n    const fileNameIndex = newPath.lastIndexOf(this.getFileName());\n    let pathWithoutFileName = newPath.substring(0, fileNameIndex);\n    pathWithoutFileName = pathWithoutFileName.replace(/[\\\\\\/]$/, '');\n    return pathWithoutFileName;\n  }\n}\n","import * as Browser from 'bowser';\nimport * as heir from 'heir';\nimport * as log from 'loglevel';\nimport * as objectAssign from 'object-assign';\nimport * as EventEmitter from 'wolfy87-eventemitter';\n\nimport Environment from './Environment';\nimport AlreadySubscribedError from './errors/AlreadySubscribedError';\nimport { InvalidArgumentError, InvalidArgumentReason } from './errors/InvalidArgumentError';\nimport { InvalidStateError, InvalidStateReason } from './errors/InvalidStateError';\nimport { NotSubscribedError, NotSubscribedReason } from './errors/NotSubscribedError';\nimport PermissionMessageDismissedError from './errors/PermissionMessageDismissedError';\nimport PushPermissionNotGrantedError from './errors/PushPermissionNotGrantedError';\nimport { PushPermissionNotGrantedErrorReason } from './errors/PushPermissionNotGrantedError';\nimport { SdkInitError, SdkInitErrorKind } from './errors/SdkInitError';\nimport Event from './Event';\nimport EventHelper from './helpers/EventHelper';\nimport HttpHelper from './helpers/HttpHelper';\nimport InitHelper from './helpers/InitHelper';\nimport MainHelper from './helpers/MainHelper';\nimport SubscriptionHelper from './helpers/SubscriptionHelper';\nimport TestHelper from './helpers/TestHelper';\nimport LimitStore from './LimitStore';\nimport AltOriginManager from './managers/AltOriginManager';\nimport LegacyManager from './managers/LegacyManager';\nimport SdkEnvironment from './managers/SdkEnvironment';\nimport { ServiceWorkerActiveState, ServiceWorkerManager } from './managers/ServiceWorkerManager';\nimport { SubscriptionManager } from './managers/SubscriptionManager';\nimport { AppConfig } from './models/AppConfig';\nimport Context from './models/Context';\nimport { Notification } from './models/Notification';\nimport { NotificationActionButton } from './models/NotificationActionButton';\nimport { NotificationPermission } from './models/NotificationPermission';\nimport { PermissionPromptType } from './models/PermissionPromptType';\n\nimport { WindowEnvironmentKind } from './models/WindowEnvironmentKind';\nimport ProxyFrame from './modules/frames/ProxyFrame';\nimport ProxyFrameHost from './modules/frames/ProxyFrameHost';\nimport SubscriptionModal from './modules/frames/SubscriptionModal';\nimport SubscriptionModalHost from './modules/frames/SubscriptionModalHost';\nimport SubscriptionPopup from './modules/frames/SubscriptionPopup';\nimport SubscriptionPopupHost from './modules/frames/SubscriptionPopupHost';\nimport OneSignalApi from './OneSignalApi';\nimport Popover from './popover/Popover';\nimport Crypto from './services/Crypto';\nimport Database from './services/Database';\nimport { ResourceLoadState } from './services/DynamicResourceLoader';\nimport IndexedDb from './services/IndexedDb';\nimport {\n  awaitOneSignalInitAndSupported,\n  awaitSdkEvent,\n  executeCallback,\n  getConsoleStyle,\n  isValidEmail,\n  logMethodCall,\n  prepareEmailForHashing,\n} from './utils';\nimport { ValidatorUtils } from './utils/ValidatorUtils';\nimport { DeviceRecord } from './models/DeviceRecord';\nimport { DeprecatedApiError, DeprecatedApiReason } from './errors/DeprecatedApiError';\nimport ConfigManager from './managers/ConfigManager';\nimport TimedLocalStorage from './modules/TimedLocalStorage';\nimport { EmailProfile } from './models/EmailProfile';\nimport TimeoutError from './errors/TimeoutError';\nimport { EmailDeviceRecord } from './models/EmailDeviceRecord';\n\n\nexport default class OneSignal {\n\n  /**\n   * Pass in the full URL of the default page you want to open when a notification is clicked.\n   * @PublicApi\n   */\n  static async setDefaultNotificationUrl(url: string) {\n    if (!ValidatorUtils.isValidUrl(url, { allowNull: true }))\n      throw new InvalidArgumentError('url', InvalidArgumentReason.Malformed);\n    await awaitOneSignalInitAndSupported();\n    logMethodCall('setDefaultNotificationUrl', url);\n    const appState = await Database.getAppState();\n    appState.defaultNotificationUrl = url;\n    await Database.setAppState(appState);\n  }\n\n  /**\n   * Sets the default title to display on notifications. Will default to the page's document.title if you don't call this.\n   * @remarks Either DB value defaultTitle or pageTitle is used when showing a notification title.\n   * @PublicApi\n   */\n  static async setDefaultTitle(title: string) {\n    await awaitOneSignalInitAndSupported();\n    logMethodCall('setDefaultTitle', title);\n    const appState = await Database.getAppState();\n    appState.defaultNotificationTitle = title;\n    await Database.setAppState(appState);\n  }\n\n  /**\n   * Hashes the provided email and uploads to OneSignal.\n   * @remarks The email is voluntarily provided.\n   * @PublicApi\n   */\n  static async syncHashedEmail(email) {\n    if (!email)\n      throw new InvalidArgumentError('email', InvalidArgumentReason.Empty);\n    let sanitizedEmail = prepareEmailForHashing(email);\n    if (!isValidEmail(sanitizedEmail))\n      throw new InvalidArgumentError('email', InvalidArgumentReason.Malformed);\n    await awaitOneSignalInitAndSupported();\n    logMethodCall('syncHashedEmail', email);\n    const { appId } = await Database.getAppConfig();\n    const { deviceId } = await Database.getSubscription();\n    if (!deviceId || !deviceId.value)\n      throw new NotSubscribedError(NotSubscribedReason.NoDeviceId);\n    const result = await OneSignalApi.updatePlayer(appId, deviceId, {\n      em_m: Crypto.md5(sanitizedEmail),\n      em_s: Crypto.sha1(sanitizedEmail),\n      em_s256: Crypto.sha256(sanitizedEmail)\n    });\n    if (result && result.success) {\n      return true;\n    } else {\n      throw result;\n    }\n  }\n\n  /**\n   * @PublicApi\n   */\n  static async setEmail(email: string, options?: SetEmailOptions): Promise<void> {\n    if (!email)\n      throw new InvalidArgumentError('email', InvalidArgumentReason.Empty);\n    if (!isValidEmail(email))\n      throw new InvalidArgumentError('email', InvalidArgumentReason.Malformed);\n    // emailAuthHash is expected to be a 64 character SHA-256 hex hash\n    if (options && options.emailAuthHash && options.emailAuthHash.length !== 64) {\n      throw new InvalidArgumentError('options.emailAuthHash', InvalidArgumentReason.Malformed);\n    }\n    await awaitOneSignalInitAndSupported();\n    logMethodCall('setEmail', email, options);\n\n    const appConfig = await Database.getAppConfig();\n    const { deviceId } = await Database.getSubscription();\n    const existingEmailProfile = await Database.getEmailProfile();\n\n    if (appConfig.emailAuthRequired && !(options && options.emailAuthHash)) {\n      throw new InvalidArgumentError('options.emailAuthHash', InvalidArgumentReason.Empty);\n    }\n\n    const newEmailProfile = new EmailProfile();\n    newEmailProfile.emailId = existingEmailProfile.emailId;\n    newEmailProfile.emailAddress = email;\n    if (options && options.emailAuthHash) {\n      newEmailProfile.emailAuthHash = options.emailAuthHash\n    }\n\n    const isExistingEmailSaved = existingEmailProfile.emailId && existingEmailProfile.emailId.value;\n    if (isExistingEmailSaved && appConfig.emailAuthRequired) {\n      // If we already have a saved email player ID, make a PUT call to update the existing email record\n      newEmailProfile.emailId = await OneSignalApi.updateEmailRecord(\n        appConfig,\n        newEmailProfile,\n        deviceId\n      );\n    } else {\n      // Otherwise, make a POST call to create a new email record\n      newEmailProfile.emailId = await OneSignalApi.createEmailRecord(\n        appConfig,\n        newEmailProfile,\n        deviceId\n      );\n    }\n\n    const isExistingPushRecordSaved = deviceId && deviceId.value;\n    if (\n      /* If we are subscribed to web push */\n      isExistingPushRecordSaved &&\n      (\n        /* And if we previously saved an email ID and it's different from the new returned ID */\n        (\n          !isExistingEmailSaved ||\n          existingEmailProfile.emailId.value !== newEmailProfile.emailId.value\n        ) ||\n        /* Or if we previously saved an email and the email changed */\n        (\n          !existingEmailProfile.emailAddress ||\n          newEmailProfile.emailAddress !== existingEmailProfile.emailAddress\n        )\n      )\n    ) {\n      // Then update the push device record with a reference to the new email ID and email address\n      await OneSignalApi.updatePlayer(\n        appConfig.appId,\n        deviceId,\n        {\n          parent_player_id: newEmailProfile.emailId.value,\n          email: newEmailProfile.emailAddress\n        }\n      );\n    }\n\n    await Database.setEmailProfile(newEmailProfile);\n  }\n\n  /**\n   * @PublicApi\n   */\n  static async logoutEmail() {\n    await awaitOneSignalInitAndSupported();\n\n    const appConfig = await Database.getAppConfig();\n    const emailProfile = await Database.getEmailProfile();\n    const { deviceId } = await Database.getSubscription();\n\n    if (!emailProfile.emailId || !emailProfile.emailId.value) {\n      log.warn(new NotSubscribedError(NotSubscribedReason.NoEmailSet));\n      return;\n    }\n\n    if (!deviceId || !deviceId.value) {\n      log.warn(new NotSubscribedError(NotSubscribedReason.NoDeviceId));\n      return;\n    }\n\n    if (!await OneSignalApi.logoutEmail(appConfig, emailProfile, deviceId)) {\n      log.warn(\"Failed to logout email.\");\n      return;\n    }\n\n    await Database.setEmailProfile(new EmailProfile());\n  }\n\n  /**\n   * Returns true if the current browser supports web push.\n   * @PublicApi\n   */\n  static isPushNotificationsSupported() {\n    logMethodCall('isPushNotificationsSupported');\n    /*\n      Push notification support is checked in the initial entry code. If in an unsupported environment, a stubbed empty\n      version of the SDK will be loaded instead. This file will only be loaded if push notifications are supported.\n     */\n    return true;\n  }\n\n  /**\n   * Initializes the SDK, called by the developer.\n   * @PublicApi\n   */\n  static async init(options) {\n    logMethodCall('init');\n\n    InitHelper.ponyfillSafariFetch();\n    InitHelper.errorIfInitAlreadyCalled();\n\n    const appConfig = await new ConfigManager().getAppConfig(options);\n    log.debug(`OneSignal: Final web app config: %c${JSON.stringify(appConfig, null, 4)}`, getConsoleStyle('code'));\n    OneSignal.context = new Context(appConfig);\n    OneSignal.config = OneSignal.context.appConfig;\n    OneSignal.context.workerMessenger.listen();\n\n    if (Browser.safari && !OneSignal.config.safariWebId) {\n      /**\n       * Don't throw an error for missing Safari config; many users set up\n       * support on Chrome/Firefox and don't intend to support Safari but don't\n       * place conditional initialization checks.\n       */\n      log.warn(new SdkInitError(SdkInitErrorKind.MissingSafariWebId));\n      return;\n    }\n\n    async function __init() {\n      if (OneSignal.__initAlreadyCalled) {\n        return;\n      } else {\n        OneSignal.__initAlreadyCalled = true;\n      }\n\n      MainHelper.fixWordpressManifestIfMisplaced();\n\n      OneSignal.on(OneSignal.EVENTS.NATIVE_PROMPT_PERMISSIONCHANGED, EventHelper.onNotificationPermissionChange);\n      OneSignal.on(OneSignal.EVENTS.SUBSCRIPTION_CHANGED, EventHelper._onSubscriptionChanged);\n      OneSignal.on(OneSignal.EVENTS.SDK_INITIALIZED, InitHelper.onSdkInitialized);\n\n      if (SubscriptionHelper.isUsingSubscriptionWorkaround()) {\n        OneSignal.appConfig = appConfig;\n\n        /**\n         * The user may have forgot to choose a subdomain in his web app setup.\n         *\n         * Or, the user may have an HTTP & HTTPS site while using an HTTPS-only\n         * config on both variants. This would cause the HTTPS site to work\n         * perfectly, while causing errors and preventing web push from working\n         * on the HTTP site.\n         */\n        if (!appConfig.subdomain) {\n          throw new SdkInitError(SdkInitErrorKind.MissingSubdomain);\n        }\n        /**\n         * The iFrame may never load (e.g. OneSignal might be down), in which\n         * case the rest of the SDK's initialization will be blocked. This is a\n         * good thing! We don't want to access IndexedDb before we know which\n         * origin to store data on.\n         */\n        OneSignal.proxyFrameHost = await AltOriginManager.discoverAltOrigin(appConfig);\n      }\n\n      window.addEventListener('focus', () => {\n        // Checks if permission changed everytime a user focuses on the page, since a user has to click out of and back on the page to check permissions\n        MainHelper.checkAndTriggerNotificationPermissionChanged();\n      });\n\n      InitHelper.initSaveState(document.title)\n        .then(() => InitHelper.saveInitOptions())\n        .then(() => {\n          if (SdkEnvironment.getWindowEnv() === WindowEnvironmentKind.CustomIframe) {\n            Event.trigger(OneSignal.EVENTS.SDK_INITIALIZED);\n          } else {\n            InitHelper.internalInit();\n          }\n        });\n    }\n\n    if (document.readyState === 'complete' || document.readyState === 'interactive') {\n      __init();\n    }\n    else {\n      log.debug('OneSignal: Waiting for DOMContentLoaded or readyStateChange event before continuing' +\n        ' initialization...');\n      window.addEventListener('DOMContentLoaded', () => {\n        __init();\n      });\n      document.onreadystatechange = () => {\n        if (document.readyState === 'complete' || document.readyState === 'interactive') {\n          __init();\n        }\n      };\n    }\n  }\n\n  /**\n   * Prompts the user to subscribe using the remote local notification workaround for HTTP sites.\n   * @PublicApi\n   */\n  static async showHttpPermissionRequest(options?: {_sdkCall: boolean}): Promise<any> {\n    log.debug('Called showHttpPermissionRequest(), redirecting to HTTP prompt.');\n\n    OneSignal.showHttpPrompt().catch(e => log.info(e));\n  }\n\n  /**\n   * Shows a sliding modal prompt on the page for users to trigger the HTTP popup window to subscribe.\n   * @PublicApi\n   */\n  static async showHttpPrompt(options?) {\n    if (!options) {\n      options = {};\n    }\n\n    await awaitOneSignalInitAndSupported();\n    /*\n     Only show the HTTP popover if:\n     - Notifications aren't already enabled\n     - The user isn't manually opted out (if the user was manually opted out, we don't want to prompt the user)\n     */\n    if (OneSignal.__isPopoverShowing) {\n      throw new InvalidStateError(InvalidStateReason.RedundantPermissionMessage, {\n        permissionPromptType: PermissionPromptType.SlidedownPermissionMessage\n      });\n    }\n\n    const permission = await OneSignal.getNotificationPermission();\n    const isEnabled = await OneSignal.isPushNotificationsEnabled();\n    const notOptedOut = await OneSignal.getSubscription();\n    const doNotPrompt = await MainHelper.wasHttpsNativePromptDismissed();\n\n    if (doNotPrompt && !options.force) {\n      log.info(new PermissionMessageDismissedError());\n      return;\n    }\n    if (permission === NotificationPermission.Denied) {\n      log.info(new PushPermissionNotGrantedError(PushPermissionNotGrantedErrorReason.Blocked));\n      return;\n    }\n    if (isEnabled) {\n      throw new AlreadySubscribedError();\n    }\n    if (!notOptedOut) {\n      throw new NotSubscribedError(NotSubscribedReason.OptedOut);\n    }\n\n    MainHelper.markHttpPopoverShown();\n\n    const sdkStylesLoadResult = await OneSignal.context.dynamicResourceLoader.loadSdkStylesheet();\n    if (sdkStylesLoadResult !== ResourceLoadState.Loaded) {\n      log.debug('Not showing slidedown permission message because styles failed to load.');\n      return;\n    }\n    OneSignal.popover = new Popover(MainHelper.getSlidedownPermissionMessageOptions());\n    OneSignal.popover.create();\n    log.debug('Showing the HTTP popover.');\n    if (OneSignal.notifyButton &&\n      OneSignal.notifyButton.options.enable &&\n      OneSignal.notifyButton.launcher.state !== 'hidden') {\n      OneSignal.notifyButton.launcher.waitUntilShown()\n        .then(() => {\n          OneSignal.notifyButton.launcher.hide();\n        });\n    }\n    OneSignal.once(Popover.EVENTS.SHOWN, () => {\n      OneSignal.__isPopoverShowing = true;\n    });\n    OneSignal.once(Popover.EVENTS.CLOSED, () => {\n      OneSignal.__isPopoverShowing = false;\n      if (OneSignal.notifyButton &&\n        OneSignal.notifyButton.options.enable) {\n        OneSignal.notifyButton.launcher.show();\n      }\n    });\n    OneSignal.once(Popover.EVENTS.ALLOW_CLICK, () => {\n      OneSignal.popover.close();\n      log.debug(\"Setting flag to not show the popover to the user again.\");\n      TestHelper.markHttpsNativePromptDismissed();\n      OneSignal._sessionInitAlreadyRunning = false;\n      OneSignal.registerForPushNotifications({ autoAccept: true });\n    });\n    OneSignal.once(Popover.EVENTS.CANCEL_CLICK, () => {\n      log.debug(\"Setting flag to not show the popover to the user again.\");\n      TestHelper.markHttpsNativePromptDismissed();\n      OneSignal._sessionInitAlreadyRunning = false;\n    });\n  }\n\n  /**\n   * Prompts the user to subscribe.\n   * @PublicApi\n   */\n  static registerForPushNotifications(options?: any) {\n    // WARNING: Do NOT add callbacks that have to fire to get from here to window.open in _sessionInit.\n    //          Otherwise the pop-up to ask for push permission on HTTP connections will be blocked by Chrome.\n    function __registerForPushNotifications() {\n      if (options && options.httpPermissionRequest && SubscriptionHelper.isUsingSubscriptionWorkaround()) {\n        /*\n          Do not throw an error because it may cause the parent event handler to\n          throw and stop processing the rest of their code. Typically, for this\n          prompt sequence, a custom modal is being shown thanking the user for\n          granting permissions. Throwing an error might cause the modal to stay\n          on screen and not close.\n\n          Only log an error for HTTP sites. A few HTTPS sites are mistakenly be\n          using this API instead of the parameter-less version to register for\n          push notifications.\n         */\n        log.error(new DeprecatedApiError(DeprecatedApiReason.HttpPermissionRequest));\n        return;\n      }\n      if (SubscriptionHelper.isUsingSubscriptionWorkaround()) {\n          /**\n           * Users may be subscribed to either .onesignal.com or .os.tc. By this time\n           * that they are subscribing to the popup, the Proxy Frame has already been\n           * loaded and the user's subscription status has been obtained. We can then\n           * use the Proxy Frame present now and check its URL to see whether the user\n           * is finally subscribed to .onesignal.com or .os.tc.\n           */\n        OneSignal.subscriptionPopupHost = new SubscriptionPopupHost(OneSignal.proxyFrameHost.url, options);\n        OneSignal.subscriptionPopupHost.load();\n      } else {\n        if (!options)\n          options = {};\n        options.fromRegisterFor = true;\n        InitHelper.sessionInit(options);\n      }\n    }\n\n    if (!OneSignal.initialized) {\n      OneSignal.once(OneSignal.EVENTS.SDK_INITIALIZED, () => __registerForPushNotifications());\n    } else {\n      return __registerForPushNotifications();\n    }\n  }\n\n  /**\n   * Returns a promise that resolves to the browser's current notification permission as 'default', 'granted', or 'denied'.\n   * @param callback A callback function that will be called when the browser's current notification permission has been obtained, with one of 'default', 'granted', or 'denied'.\n   * @PublicApi\n   */\n  public static async getNotificationPermission(onComplete?): Promise<NotificationPermission> {\n    await awaitOneSignalInitAndSupported();\n\n    const permission = await OneSignal.context.permissionManager.getNotificationPermission(OneSignal.config.safariWebId);\n\n    if (onComplete) {\n      onComplete(permission);\n    }\n\n    return permission;\n  }\n\n  /**\n   * @PublicApi\n   */\n  static async getTags(callback) {\n    await awaitOneSignalInitAndSupported();\n    logMethodCall('getTags', callback);\n    const { appId } = await Database.getAppConfig();\n    const { deviceId } = await Database.getSubscription();\n    if (!deviceId || !deviceId.value) {\n      // TODO: Throw an error here in future v2; for now it may break existing client implementations.\n      log.info(new NotSubscribedError(NotSubscribedReason.NoDeviceId));\n      return null;\n    }\n    const { tags } = await OneSignalApi.getPlayer(appId, deviceId);\n    executeCallback(callback, tags);\n    return tags;\n  }\n\n  /**\n   * @PublicApi\n   */\n  static async sendTag(key: string, value: any, callback?: Action<Object>): Promise<Object> {\n    const tag = {};\n    tag[key] = value;\n    return await OneSignal.sendTags(tag, callback);\n  }\n\n  /**\n   * @PublicApi\n   */\n  static async sendTags(tags: Object, callback?: Action<Object>): Promise<Object> {\n    await awaitOneSignalInitAndSupported();\n    logMethodCall('sendTags', tags, callback);\n    if (!tags || Object.keys(tags).length === 0) {\n      // TODO: Throw an error here in future v2; for now it may break existing client implementations.\n      log.info(new InvalidArgumentError('tags', InvalidArgumentReason.Empty));\n      return null;\n    }\n    // Our backend considers false as removing a tag, so convert false -> \"false\" to allow storing as a value\n    Object.keys(tags).forEach(key => {\n      if (tags[key] === false)\n        tags[key] = \"false\";\n    });\n    const { appId } = await Database.getAppConfig();\n\n    const emailProfile = await Database.getEmailProfile();\n    if (emailProfile.emailId && emailProfile.emailId.value) {\n      await OneSignalApi.updatePlayer(appId, emailProfile.emailId, {\n        tags: tags,\n        email_auth_hash: emailProfile.emailAuthHash,\n      });\n    }\n\n    var { deviceId } = await Database.getSubscription();\n    if (!deviceId || !deviceId.value) {\n      await awaitSdkEvent(OneSignal.EVENTS.REGISTERED);\n    }\n    // After the user subscribers, he will have a device ID, so get it again\n    var { deviceId: newDeviceId } = await Database.getSubscription();\n    await OneSignalApi.updatePlayer(appId, newDeviceId, {\n      tags: tags\n    });\n    executeCallback(callback, tags);\n    return tags;\n  }\n\n  /**\n   * @PublicApi\n   */\n  static async deleteTag(tag: string): Promise<Array<string>> {\n    return await OneSignal.deleteTags([tag]);\n  }\n\n  /**\n   * @PublicApi\n   */\n  static async deleteTags(tags: Array<string>, callback?: Action<Array<string>>): Promise<Array<string>> {\n    await awaitOneSignalInitAndSupported();\n    logMethodCall('deleteTags', tags, callback);\n    if (!ValidatorUtils.isValidArray(tags))\n      throw new InvalidArgumentError('tags', InvalidArgumentReason.Malformed);\n    if (tags.length === 0) {\n      // TODO: Throw an error here in future v2; for now it may break existing client implementations.\n      log.info(new InvalidArgumentError('tags', InvalidArgumentReason.Empty));\n    }\n    const tagsToSend = {};\n    for (let tag of tags) {\n      tagsToSend[tag] = '';\n    }\n    const deletedTags = await OneSignal.sendTags(tagsToSend);\n    const deletedTagKeys = Object.keys(deletedTags);\n    executeCallback(callback, deletedTagKeys);\n    return deletedTagKeys;\n  }\n\n  /**\n   * @PublicApi\n   */\n  static async addListenerForNotificationOpened(callback?: Action<Notification>) {\n    await awaitOneSignalInitAndSupported();\n    logMethodCall('addListenerForNotificationOpened', callback);\n    OneSignal.once(OneSignal.EVENTS.NOTIFICATION_CLICKED, notification => {\n      executeCallback(callback, notification);\n    });\n    EventHelper.fireStoredNotificationClicks(OneSignal.config.pageUrl || OneSignal.config.userConfig.pageUrl);\n  }\n  /**\n   * @PublicApi\n   * @Deprecated\n   */\n  static async getIdsAvailable(callback?: Action<{userId: string, registrationId: string}>):\n    Promise<{userId: string, registrationId: string}> {\n    await awaitOneSignalInitAndSupported();\n    logMethodCall('getIdsAvailable', callback);\n    const { deviceId, subscriptionToken } = await Database.getSubscription();\n    const bundle = {\n      userId: deviceId.value,\n      registrationId: subscriptionToken\n    };\n    executeCallback(callback, bundle);\n    return bundle;\n  }\n\n  /**\n   * Returns a promise that resolves to true if all required conditions for push messaging are met; otherwise resolves to false.\n   * @param callback A callback function that will be called when the current subscription status has been obtained.\n   * @PublicApi\n   */\n  static async isPushNotificationsEnabled(callback?: Action<boolean>): Promise<boolean> {\n    await awaitOneSignalInitAndSupported();\n    logMethodCall('isPushNotificationsEnabled', callback);\n\n    const context: Context = OneSignal.context;\n    const subscriptionState = await context.subscriptionManager.getSubscriptionState();\n\n    executeCallback(callback, subscriptionState.subscribed);\n    return subscriptionState.subscribed;\n  }\n\n  /**\n   * @PublicApi\n   */\n  static async setSubscription(newSubscription: boolean): Promise<void> {\n    await awaitOneSignalInitAndSupported();\n    logMethodCall('setSubscription', newSubscription);\n    const appConfig = await Database.getAppConfig();\n    const { appId } = appConfig;\n    const subscription = await Database.getSubscription();\n    const { deviceId } = subscription;\n    if (!appConfig.appId)\n      throw new InvalidStateError(InvalidStateReason.MissingAppId);\n    if (!ValidatorUtils.isValidBoolean(newSubscription))\n      throw new InvalidArgumentError('newSubscription', InvalidArgumentReason.Malformed);\n    if (!deviceId || !deviceId.value) {\n      // TODO: Throw an error here in future v2; for now it may break existing client implementations.\n      log.info(new NotSubscribedError(NotSubscribedReason.NoDeviceId));\n      return;\n    }\n    subscription.optedOut = !newSubscription;\n    await OneSignalApi.updatePlayer(appId, deviceId, {\n      notification_types: MainHelper.getNotificationTypeFromOptIn(newSubscription)\n    });\n    await Database.setSubscription(subscription);\n    EventHelper.onInternalSubscriptionSet(subscription.optedOut);\n    EventHelper.checkAndTriggerSubscriptionChanged();\n  }\n\n  /**\n   * @PendingPublicApi\n   */\n  static async isOptedOut(callback?: Action<boolean>): Promise<boolean> {\n    await awaitOneSignalInitAndSupported();\n    logMethodCall('isOptedOut', callback);\n    const { optedOut } = await Database.getSubscription();\n    executeCallback(callback, optedOut);\n    return optedOut;\n  }\n\n  /**\n   * Returns a promise that resolves once the manual subscription override has been set.\n   * @private\n   * @PendingPublicApi\n   */\n  static async optOut(doOptOut: boolean, callback?: Action<void>): Promise<void> {\n    await awaitOneSignalInitAndSupported();\n    logMethodCall('optOut', doOptOut, callback);\n    if (!ValidatorUtils.isValidBoolean(doOptOut))\n      throw new InvalidArgumentError('doOptOut', InvalidArgumentReason.Malformed);\n    await OneSignal.setSubscription(!doOptOut);\n    executeCallback(callback);\n  }\n\n  /**\n   * Returns a promise that resolves to the stored OneSignal email ID if one is set; otherwise null.\n   * @param callback A function accepting one parameter for the OneSignal email ID.\n   * @PublicApi\n   */\n  static async getEmailId(callback?: Action<string>): Promise<string> {\n    await awaitOneSignalInitAndSupported();\n    logMethodCall('getEmailId', callback);\n    const emailProfile = await Database.getEmailProfile();\n    const emailId = emailProfile.emailId;\n    executeCallback(callback, emailId.value);\n    return emailId.value;\n  }\n\n  /**\n   * Returns a promise that resolves to the stored OneSignal user ID if one is set; otherwise null.\n   * @param callback A function accepting one parameter for the OneSignal user ID.\n   * @PublicApi\n   */\n  static async getUserId(callback?: Action<string>): Promise<string> {\n    await awaitOneSignalInitAndSupported();\n    logMethodCall('getUserId', callback);\n    const subscription = await Database.getSubscription();\n    const deviceId = subscription.deviceId;\n    executeCallback(callback, deviceId.value);\n    return deviceId.value;\n  }\n\n  /**\n   * Returns a promise that resolves to the stored push token if one is set; otherwise null.\n   * @PublicApi\n   */\n  static async getRegistrationId(callback?: Action<string>): Promise<string> {\n    await awaitOneSignalInitAndSupported();\n    logMethodCall('getRegistrationId', callback);\n    const subscription = await Database.getSubscription();\n    const subscriptionToken = subscription.subscriptionToken;\n    executeCallback(callback, subscriptionToken);\n    return subscriptionToken;\n  }\n\n  /**\n   * Returns a promise that resolves to false if setSubscription(false) is \"in effect\". Otherwise returns true.\n   * This means a return value of true does not mean the user is subscribed, only that the user did not call\n   * setSubcription(false).\n   * @private\n   * @PublicApi (given to customers)\n   */\n  static async getSubscription(callback?: Action<boolean>): Promise<boolean> {\n    await awaitOneSignalInitAndSupported();\n    logMethodCall('getSubscription', callback);\n    const subscription = await Database.getSubscription();\n    const subscriptionStatus = !subscription.optedOut;\n    executeCallback(callback, subscriptionStatus);\n    return subscriptionStatus;\n  }\n\n  /**\n   * @PublicApi\n   */\n  static async sendSelfNotification(title: string = 'OneSignal Test Message',\n                              message: string = 'This is an example notification.',\n                              url: string = new URL(location.href).origin + '?_osp=do_not_open',\n                              icon: URL,\n                              data: Map<String, any>,\n                              buttons: Array<NotificationActionButton>): Promise<void> {\n    await awaitOneSignalInitAndSupported();\n    logMethodCall('sendSelfNotification', title, message, url, icon, data, buttons);\n    const appConfig = await Database.getAppConfig();\n    const subscription = await Database.getSubscription();\n    if (!appConfig.appId)\n      throw new InvalidStateError(InvalidStateReason.MissingAppId);\n    if (!(await OneSignal.isPushNotificationsEnabled()))\n      throw new NotSubscribedError(NotSubscribedReason.NoDeviceId);\n    if (!ValidatorUtils.isValidUrl(url))\n      throw new InvalidArgumentError('url', InvalidArgumentReason.Malformed);\n    if (!ValidatorUtils.isValidUrl(icon, { allowEmpty: true, requireHttps: true }))\n      throw new InvalidArgumentError('icon', InvalidArgumentReason.Malformed);\n    return await OneSignalApi.sendNotification(appConfig.appId, [subscription.deviceId], {'en': title}, {'en': message},\n                                               url, icon, data, buttons);\n  }\n\n  /**\n   * Used to load OneSignal asynchronously from a webpage.\n   * @InternalApi\n   */\n  static push(item) {\n    if (typeof(item) == \"function\")\n      item();\n    else {\n      var functionName = item.shift();\n      OneSignal[functionName].apply(null, item);\n    }\n  }\n\n  static __doNotShowWelcomeNotification: boolean;\n  static VERSION = Environment.version();\n  static _VERSION = Environment.version();\n  static sdkEnvironment = SdkEnvironment;\n  static _notificationOpenedCallbacks = [];\n  static _idsAvailable_callback = [];\n  static _defaultLaunchURL = null;\n  static config = null;\n  static __isPopoverShowing = false;\n  static _sessionInitAlreadyRunning = false;\n  static _isNotificationEnabledCallback = [];\n  static _subscriptionSet = true;\n  static modalUrl = null;\n  static _windowWidth = 650;\n  static _windowHeight = 568;\n  static _isNewVisitor = false;\n  static _channel = null;\n  static timedLocalStorage = TimedLocalStorage;\n  static initialized = false;\n  static notifyButton = null;\n  static store = LimitStore;\n  static environment = Environment;\n  static database = Database;\n  static event = Event;\n  static browser = Browser;\n  static popover = null;\n  static log = log;\n  static api = OneSignalApi;\n  static indexedDb = IndexedDb;\n  static mainHelper = MainHelper;\n  static subscriptionHelper = SubscriptionHelper;\n  static httpHelper =  HttpHelper;\n  static eventHelper = EventHelper;\n  static initHelper = InitHelper;\n  static testHelper = TestHelper;\n  static objectAssign = objectAssign;\n  static appConfig = null;\n  static subscriptionPopup: SubscriptionPopup;\n  static subscriptionPopupHost: SubscriptionPopupHost;\n  static subscriptionModal: SubscriptionModal;\n  static subscriptionModalHost: SubscriptionModalHost;\n  static proxyFrameHost: ProxyFrameHost;\n  static proxyFrame: ProxyFrame;\n\n  /**\n   * The additional path to the worker file.\n   *\n   * Usually just the filename (in case the file is named differently), but also supports cases where the folder\n   * is different.\n   *\n   * However, the init options 'path' should be used to specify the folder path instead since service workers will not\n   * auto-update correctly on HTTPS site load if the config init options 'path' is not set.\n   */\n  static SERVICE_WORKER_UPDATER_PATH = 'OneSignalSDKUpdaterWorker.js';\n  static SERVICE_WORKER_PATH = 'OneSignalSDKWorker.js';\n\n  /**\n   * By default, the service worker is expected to be accessible at the root scope. If the service worker is only\n   * available with in a sub-directory, SERVICE_WORKER_PARAM must be changed to the sub-directory (with a trailing\n   * slash). This would allow pages to function correctly as not to block the service worker ready call, which would\n   * hang indefinitely if we requested root scope registration but the service was only available in a child scope.\n   */\n  static SERVICE_WORKER_PARAM: { scope: string } = {scope: '/'};\n  static _LOGGING = false;\n  static LOGGING = false;\n  static _usingNativePermissionHook = false;\n  static _initCalled = false;\n  static __initAlreadyCalled = false;\n  static context: Context;\n  static checkAndWipeUserSubscription = function () { }\n  static crypto = Crypto;\n  static DeviceRecord = DeviceRecord;\n  static EmailDeviceRecord = EmailDeviceRecord;\n\n  static notificationPermission = NotificationPermission;\n\n\n  /**\n   * Used by Rails-side HTTP popup. Must keep the same name.\n   * @InternalApi\n   */\n  static _initHttp = HttpHelper.initHttp;\n\n  /**\n   * Used by Rails-side HTTP popup. Must keep the same name.\n   * @InternalApi\n   */\n  static _initPopup = () => OneSignal.subscriptionPopup.subscribe();\n\n  static POSTMAM_COMMANDS = {\n    CONNECTED: 'connect',\n    REMOTE_NOTIFICATION_PERMISSION: 'postmam.remoteNotificationPermission',\n    REMOTE_DATABASE_GET: 'postmam.remoteDatabaseGet',\n    REMOTE_DATABASE_PUT: 'postmam.remoteDatabasePut',\n    REMOTE_DATABASE_REMOVE: 'postmam.remoteDatabaseRemove',\n    REMOTE_OPERATION_COMPLETE: 'postman.operationComplete',\n    REMOTE_RETRIGGER_EVENT: 'postmam.remoteRetriggerEvent',\n    MODAL_LOADED: 'postmam.modalPrompt.loaded',\n    MODAL_PROMPT_ACCEPTED: 'postmam.modalPrompt.accepted',\n    MODAL_PROMPT_REJECTED: 'postmam.modalPrompt.canceled',\n    POPUP_LOADED: 'postmam.popup.loaded',\n    POPUP_ACCEPTED: 'postmam.popup.accepted',\n    POPUP_REJECTED: 'postmam.popup.canceled',\n    POPUP_CLOSING: 'postman.popup.closing',\n    REMOTE_NOTIFICATION_PERMISSION_CHANGED: 'postmam.remoteNotificationPermissionChanged',\n    IFRAME_POPUP_INITIALIZE: 'postmam.iframePopupInitialize',\n    UNSUBSCRIBE_FROM_PUSH: 'postmam.unsubscribeFromPush',\n    SET_SESSION_COUNT: 'postmam.setSessionCount',\n    REQUEST_HOST_URL: 'postmam.requestHostUrl',\n    WINDOW_TIMEOUT: 'postmam.windowTimeout',\n    FINISH_REMOTE_REGISTRATION: 'postmam.finishRemoteRegistration',\n    FINISH_REMOTE_REGISTRATION_IN_PROGRESS: 'postmam.finishRemoteRegistrationInProgress',\n    POPUP_BEGIN_MESSAGEPORT_COMMS: 'postmam.beginMessagePortComms',\n    SERVICEWORKER_COMMAND_REDIRECT: 'postmam.command.redirect',\n    MARK_PROMPT_DISMISSED: 'postmam.markPromptDismissed',\n    IS_SUBSCRIBED: 'postmam.isSubscribed',\n    UNSUBSCRIBE_PROXY_FRAME: 'postman.unsubscribeProxyFrame',\n    GET_EVENT_LISTENER_COUNT: 'postmam.getEventListenerCount',\n    SERVICE_WORKER_STATE: 'postmam.serviceWorkerState',\n    GET_WORKER_VERSION: 'postmam.getWorkerVersion',\n    SUBSCRIPTION_EXPIRATION_STATE: 'postmam.subscriptionExpirationState',\n    PROCESS_EXPIRING_SUBSCRIPTIONS: 'postmam.processExpiringSubscriptions',\n    GET_SUBSCRIPTION_STATE: 'postmam.getSubscriptionState',\n  };\n\n  static EVENTS = {\n    /**\n     * Occurs when the user clicks the \"Continue\" or \"No Thanks\" button on the HTTP popup or HTTPS modal prompt.\n     * For HTTP sites (and HTTPS sites using the modal prompt), this event is fired before the native permission\n     * prompt is shown. This event is mostly used for HTTP sites.\n     */\n    CUSTOM_PROMPT_CLICKED: 'customPromptClick',\n    /**\n     * Occurs when the user clicks \"Allow\" or \"Block\" on the native permission prompt on Chrome, Firefox, or Safari.\n     * This event is used for both HTTP and HTTPS sites and occurs after the user actually grants notification\n     * permissions for the site. Occurs before the user is actually subscribed to push notifications.\n     */\n    NATIVE_PROMPT_PERMISSIONCHANGED: 'notificationPermissionChange',\n    /**\n     * Occurs after the user is officially subscribed to push notifications. The service worker is fully registered\n     * and activated and the user is eligible to receive push notifications at any point after this.\n     */\n    SUBSCRIPTION_CHANGED: 'subscriptionChange',\n    /**\n     * Occurs after a POST call to OneSignal's server to send the welcome notification has completed. The actual\n     * notification arrives shortly after.\n     */\n    WELCOME_NOTIFICATION_SENT: 'sendWelcomeNotification',\n    /**\n     * Occurs when a notification is displayed.\n     */\n    NOTIFICATION_DISPLAYED: 'notificationDisplay',\n    /**\n     * Occurs when a notification is dismissed by the user either clicking 'X' or clearing all notifications\n     * (available in Android). This event is NOT called if the user clicks the notification's body or any of the\n     * action buttons.\n     */\n    NOTIFICATION_DISMISSED: 'notificationDismiss',\n    /**\n     * New event replacing legacy addNotificationOpenedHandler(). Used when the notification was clicked.\n     */\n    NOTIFICATION_CLICKED: 'notificationClick',\n    /**\n     * Occurs after the document ready event fires and, for HTTP sites, the iFrame to subdomain.onesignal.com has\n     * loaded.\n     * Before this event, IndexedDB access is not possible for HTTP sites.\n     */\n    SDK_INITIALIZED: 'initializeInternal',\n    /**\n     * Occurs after the SDK finishes its final internal initialization. The final initialization event.\n     */\n    SDK_INITIALIZED_PUBLIC: 'initialize',\n    /**\n     * Occurs after the user subscribes to push notifications and a new user entry is created on OneSignal's server,\n     * and also occurs when the user begins a new site session and the last_session and last_active is updated on\n     * OneSignal's server.\n     */\n    REGISTERED: 'register',\n    /**\n     * Occurs as the HTTP popup is closing.\n     */\n    POPUP_CLOSING: 'popupClose',\n    /**\n     * Occurs when the native permission prompt is displayed.\n     */\n    PERMISSION_PROMPT_DISPLAYED: 'permissionPromptDisplay',\n    /**\n     * For internal testing only. Used for all sorts of things.\n     */\n    TEST_INIT_OPTION_DISABLED: 'testInitOptionDisabled',\n    TEST_WOULD_DISPLAY: 'testWouldDisplay',\n    POPUP_WINDOW_TIMEOUT: 'popupWindowTimeout',\n  };\n\n  static NOTIFICATION_TYPES = {\n    SUBSCRIBED: 1,\n    UNSUBSCRIBED: -2\n  };\n\n  /** To appease TypeScript, EventEmitter later overrides this */\n  static on(..._) {}\n  static off(..._) {}\n  static once(..._) {}\n}\n\nObject.defineProperty(OneSignal, 'LOGGING', {\n  get: function() {\n    return OneSignal._LOGGING;\n  },\n  set: function(logLevel) {\n    if (logLevel) {\n      log.setDefaultLevel((<any>log).levels.TRACE);\n      OneSignal._LOGGING = true;\n    }\n    else {\n      log.setDefaultLevel((<any>log).levels.WARN);\n      OneSignal._LOGGING = false;\n    }\n  },\n  enumerable: true,\n  configurable: true\n});\n\nheir.merge(OneSignal, new EventEmitter());\n\n\nif (OneSignal.LOGGING)\n  log.setDefaultLevel((<any>log).levels.TRACE);\nelse {\n  log.setDefaultLevel((<any>log).levels.WARN);\n}\n\nLegacyManager.ensureBackwardsCompatibility(OneSignal);\n\nlog.info(`%cOneSignal Web SDK loaded (version ${OneSignal._VERSION}, ${SdkEnvironment.getWindowEnv().toString()} environment).`, getConsoleStyle('bold'));\nlog.debug(`Current Page URL: ${typeof location === \"undefined\" ? \"NodeJS\" : location.href}`);\nlog.debug(`Browser Environment: ${Browser.name} ${Browser.version}`);\n","/**\n * Heir v3.0.0 - http://git.io/F87mKg\n * Oliver Caldwell - http://oli.me.uk/\n * Unlicense - http://unlicense.org/\n */\n\n(function (name, root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    }\n    else if (typeof exports === 'object') {\n        module.exports = factory();\n    }\n    else {\n        root[name] = factory();\n    }\n}('heir', this, function () {\n    /*global define,module*/\n    'use strict';\n\n    var heir = {\n        /**\n         * Causes your desired class to inherit from a source class. This uses\n         * prototypical inheritance so you can override methods without ruining\n         * the parent class.\n         *\n         * This will alter the actual destination class though, it does not\n         * create a new class.\n         *\n         * @param {Function} destination The target class for the inheritance.\n         * @param {Function} source Class to inherit from.\n         * @param {Boolean} addSuper Should we add the _super property to the prototype? Defaults to true.\n         */\n        inherit: function inherit(destination, source, addSuper) {\n            var proto = destination.prototype = heir.createObject(source.prototype);\n            proto.constructor = destination;\n\n            if (addSuper || typeof addSuper === 'undefined') {\n                destination._super = source.prototype;\n            }\n        },\n\n        /**\n         * Creates a new object with the source object nestled within its\n         * prototype chain.\n         *\n         * @param {Object} source Method to insert into the new object's prototype.\n         * @return {Object} An empty object with the source object in it's prototype chain.\n         */\n        createObject: Object.create || function createObject(source) {\n            var Host = function () {};\n            Host.prototype = source;\n            return new Host();\n        },\n\n        /**\n         * Mixes the specified object into your class. This can be used to add\n         * certain capabilities and helper methods to a class that is already\n         * inheriting from some other class. You can mix in as many object as\n         * you want, but only inherit from one.\n         *\n         * These values are mixed into the actual prototype object of your\n         * class, they are not added to the prototype chain like inherit.\n         *\n         * @param {Function} destination Class to mix the object into.\n         * @param {Object} source Object to mix into the class.\n         */\n        mixin: function mixin(destination, source) {\n            return heir.merge(destination.prototype, source);\n        },\n\n        /**\n         * Merges one object into another, change the object in place.\n         *\n         * @param {Object} destination The destination for the merge.\n         * @param {Object} source The source of the properties to merge.\n         */\n        merge: function merge(destination, source) {\n            var key;\n\n            for (key in source) {\n                destination[key] = source[key];\n            }\n        },\n\n        /**\n         * Shortcut for `Object.prototype.hasOwnProperty`.\n         *\n         * Uses `Object.prototype.hasOwnPropety` rather than\n         * `object.hasOwnProperty` as it could be overwritten.\n         *\n         * @param {Object} object The object to check\n         * @param {String} key The key to check for.\n         * @return {Boolean} Does object have key as an own propety?\n         */\n        hasOwn: function hasOwn(object, key) {\n            return Object.prototype.hasOwnProperty.call(object, key);\n        }\n    };\n\n    return heir;\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/heir/heir.js\n// module id = 48\n// module chunks = 0","/*!\n * EventEmitter v5.1.0 - git.io/ee\n * Unlicense - http://unlicense.org/\n * Oliver Caldwell - http://oli.me.uk/\n * @preserve\n */\n\n;(function (exports) {\n    'use strict';\n\n    /**\n     * Class for managing events.\n     * Can be extended to provide event functionality in other classes.\n     *\n     * @class EventEmitter Manages event registering and emitting.\n     */\n    function EventEmitter() {}\n\n    // Shortcuts to improve speed and size\n    var proto = EventEmitter.prototype;\n    var originalGlobalValue = exports.EventEmitter;\n\n    /**\n     * Finds the index of the listener for the event in its storage array.\n     *\n     * @param {Function[]} listeners Array of listeners to search through.\n     * @param {Function} listener Method to look for.\n     * @return {Number} Index of the specified listener, -1 if not found\n     * @api private\n     */\n    function indexOfListener(listeners, listener) {\n        var i = listeners.length;\n        while (i--) {\n            if (listeners[i].listener === listener) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * Alias a method while keeping the context correct, to allow for overwriting of target method.\n     *\n     * @param {String} name The name of the target method.\n     * @return {Function} The aliased method\n     * @api private\n     */\n    function alias(name) {\n        return function aliasClosure() {\n            return this[name].apply(this, arguments);\n        };\n    }\n\n    /**\n     * Returns the listener array for the specified event.\n     * Will initialise the event object and listener arrays if required.\n     * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.\n     * Each property in the object response is an array of listener functions.\n     *\n     * @param {String|RegExp} evt Name of the event to return the listeners from.\n     * @return {Function[]|Object} All listener functions for the event.\n     */\n    proto.getListeners = function getListeners(evt) {\n        var events = this._getEvents();\n        var response;\n        var key;\n\n        // Return a concatenated array of all matching events if\n        // the selector is a regular expression.\n        if (evt instanceof RegExp) {\n            response = {};\n            for (key in events) {\n                if (events.hasOwnProperty(key) && evt.test(key)) {\n                    response[key] = events[key];\n                }\n            }\n        }\n        else {\n            response = events[evt] || (events[evt] = []);\n        }\n\n        return response;\n    };\n\n    /**\n     * Takes a list of listener objects and flattens it into a list of listener functions.\n     *\n     * @param {Object[]} listeners Raw listener objects.\n     * @return {Function[]} Just the listener functions.\n     */\n    proto.flattenListeners = function flattenListeners(listeners) {\n        var flatListeners = [];\n        var i;\n\n        for (i = 0; i < listeners.length; i += 1) {\n            flatListeners.push(listeners[i].listener);\n        }\n\n        return flatListeners;\n    };\n\n    /**\n     * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.\n     *\n     * @param {String|RegExp} evt Name of the event to return the listeners from.\n     * @return {Object} All listener functions for an event in an object.\n     */\n    proto.getListenersAsObject = function getListenersAsObject(evt) {\n        var listeners = this.getListeners(evt);\n        var response;\n\n        if (listeners instanceof Array) {\n            response = {};\n            response[evt] = listeners;\n        }\n\n        return response || listeners;\n    };\n\n    function isValidListener (listener) {\n        if (typeof listener === 'function' || listener instanceof RegExp) {\n            return true\n        } else if (listener && typeof listener === 'object') {\n            return isValidListener(listener.listener)\n        } else {\n            return false\n        }\n    }\n\n    /**\n     * Adds a listener function to the specified event.\n     * The listener will not be added if it is a duplicate.\n     * If the listener returns true then it will be removed after it is called.\n     * If you pass a regular expression as the event name then the listener will be added to all events that match it.\n     *\n     * @param {String|RegExp} evt Name of the event to attach the listener to.\n     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.addListener = function addListener(evt, listener) {\n        if (!isValidListener(listener)) {\n            throw new TypeError('listener must be a function');\n        }\n\n        var listeners = this.getListenersAsObject(evt);\n        var listenerIsWrapped = typeof listener === 'object';\n        var key;\n\n        for (key in listeners) {\n            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {\n                listeners[key].push(listenerIsWrapped ? listener : {\n                    listener: listener,\n                    once: false\n                });\n            }\n        }\n\n        return this;\n    };\n\n    /**\n     * Alias of addListener\n     */\n    proto.on = alias('addListener');\n\n    /**\n     * Semi-alias of addListener. It will add a listener that will be\n     * automatically removed after its first execution.\n     *\n     * @param {String|RegExp} evt Name of the event to attach the listener to.\n     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.addOnceListener = function addOnceListener(evt, listener) {\n        return this.addListener(evt, {\n            listener: listener,\n            once: true\n        });\n    };\n\n    /**\n     * Alias of addOnceListener.\n     */\n    proto.once = alias('addOnceListener');\n\n    /**\n     * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.\n     * You need to tell it what event names should be matched by a regex.\n     *\n     * @param {String} evt Name of the event to create.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.defineEvent = function defineEvent(evt) {\n        this.getListeners(evt);\n        return this;\n    };\n\n    /**\n     * Uses defineEvent to define multiple events.\n     *\n     * @param {String[]} evts An array of event names to define.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.defineEvents = function defineEvents(evts) {\n        for (var i = 0; i < evts.length; i += 1) {\n            this.defineEvent(evts[i]);\n        }\n        return this;\n    };\n\n    /**\n     * Removes a listener function from the specified event.\n     * When passed a regular expression as the event name, it will remove the listener from all events that match it.\n     *\n     * @param {String|RegExp} evt Name of the event to remove the listener from.\n     * @param {Function} listener Method to remove from the event.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.removeListener = function removeListener(evt, listener) {\n        var listeners = this.getListenersAsObject(evt);\n        var index;\n        var key;\n\n        for (key in listeners) {\n            if (listeners.hasOwnProperty(key)) {\n                index = indexOfListener(listeners[key], listener);\n\n                if (index !== -1) {\n                    listeners[key].splice(index, 1);\n                }\n            }\n        }\n\n        return this;\n    };\n\n    /**\n     * Alias of removeListener\n     */\n    proto.off = alias('removeListener');\n\n    /**\n     * Adds listeners in bulk using the manipulateListeners method.\n     * If you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.\n     * You can also pass it a regular expression to add the array of listeners to all events that match it.\n     * Yeah, this function does quite a bit. That's probably a bad thing.\n     *\n     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.\n     * @param {Function[]} [listeners] An optional array of listener functions to add.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.addListeners = function addListeners(evt, listeners) {\n        // Pass through to manipulateListeners\n        return this.manipulateListeners(false, evt, listeners);\n    };\n\n    /**\n     * Removes listeners in bulk using the manipulateListeners method.\n     * If you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.\n     * You can also pass it an event name and an array of listeners to be removed.\n     * You can also pass it a regular expression to remove the listeners from all events that match it.\n     *\n     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.\n     * @param {Function[]} [listeners] An optional array of listener functions to remove.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.removeListeners = function removeListeners(evt, listeners) {\n        // Pass through to manipulateListeners\n        return this.manipulateListeners(true, evt, listeners);\n    };\n\n    /**\n     * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.\n     * The first argument will determine if the listeners are removed (true) or added (false).\n     * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.\n     * You can also pass it an event name and an array of listeners to be added/removed.\n     * You can also pass it a regular expression to manipulate the listeners of all events that match it.\n     *\n     * @param {Boolean} remove True if you want to remove listeners, false if you want to add.\n     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.\n     * @param {Function[]} [listeners] An optional array of listener functions to add/remove.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {\n        var i;\n        var value;\n        var single = remove ? this.removeListener : this.addListener;\n        var multiple = remove ? this.removeListeners : this.addListeners;\n\n        // If evt is an object then pass each of its properties to this method\n        if (typeof evt === 'object' && !(evt instanceof RegExp)) {\n            for (i in evt) {\n                if (evt.hasOwnProperty(i) && (value = evt[i])) {\n                    // Pass the single listener straight through to the singular method\n                    if (typeof value === 'function') {\n                        single.call(this, i, value);\n                    }\n                    else {\n                        // Otherwise pass back to the multiple function\n                        multiple.call(this, i, value);\n                    }\n                }\n            }\n        }\n        else {\n            // So evt must be a string\n            // And listeners must be an array of listeners\n            // Loop over it and pass each one to the multiple method\n            i = listeners.length;\n            while (i--) {\n                single.call(this, evt, listeners[i]);\n            }\n        }\n\n        return this;\n    };\n\n    /**\n     * Removes all listeners from a specified event.\n     * If you do not specify an event then all listeners will be removed.\n     * That means every event will be emptied.\n     * You can also pass a regex to remove all events that match it.\n     *\n     * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.removeEvent = function removeEvent(evt) {\n        var type = typeof evt;\n        var events = this._getEvents();\n        var key;\n\n        // Remove different things depending on the state of evt\n        if (type === 'string') {\n            // Remove all listeners for the specified event\n            delete events[evt];\n        }\n        else if (evt instanceof RegExp) {\n            // Remove all events matching the regex.\n            for (key in events) {\n                if (events.hasOwnProperty(key) && evt.test(key)) {\n                    delete events[key];\n                }\n            }\n        }\n        else {\n            // Remove all listeners in all events\n            delete this._events;\n        }\n\n        return this;\n    };\n\n    /**\n     * Alias of removeEvent.\n     *\n     * Added to mirror the node API.\n     */\n    proto.removeAllListeners = alias('removeEvent');\n\n    /**\n     * Emits an event of your choice.\n     * When emitted, every listener attached to that event will be executed.\n     * If you pass the optional argument array then those arguments will be passed to every listener upon execution.\n     * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.\n     * So they will not arrive within the array on the other side, they will be separate.\n     * You can also pass a regular expression to emit to all events that match it.\n     *\n     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.\n     * @param {Array} [args] Optional array of arguments to be passed to each listener.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.emitEvent = function emitEvent(evt, args) {\n        var listenersMap = this.getListenersAsObject(evt);\n        var listeners;\n        var listener;\n        var i;\n        var key;\n        var response;\n\n        for (key in listenersMap) {\n            if (listenersMap.hasOwnProperty(key)) {\n                listeners = listenersMap[key].slice(0);\n\n                for (i = 0; i < listeners.length; i++) {\n                    // If the listener returns true then it shall be removed from the event\n                    // The function is executed either with a basic call or an apply if there is an args array\n                    listener = listeners[i];\n\n                    if (listener.once === true) {\n                        this.removeListener(evt, listener.listener);\n                    }\n\n                    response = listener.listener.apply(this, args || []);\n\n                    if (response === this._getOnceReturnValue()) {\n                        this.removeListener(evt, listener.listener);\n                    }\n                }\n            }\n        }\n\n        return this;\n    };\n\n    /**\n     * Alias of emitEvent\n     */\n    proto.trigger = alias('emitEvent');\n\n    /**\n     * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.\n     * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.\n     *\n     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.\n     * @param {...*} Optional additional arguments to be passed to each listener.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.emit = function emit(evt) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return this.emitEvent(evt, args);\n    };\n\n    /**\n     * Sets the current value to check against when executing listeners. If a\n     * listeners return value matches the one set here then it will be removed\n     * after execution. This value defaults to true.\n     *\n     * @param {*} value The new value to check for when executing listeners.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.setOnceReturnValue = function setOnceReturnValue(value) {\n        this._onceReturnValue = value;\n        return this;\n    };\n\n    /**\n     * Fetches the current value to check against when executing listeners. If\n     * the listeners return value matches this one then it should be removed\n     * automatically. It will return true by default.\n     *\n     * @return {*|Boolean} The current value to check for or the default, true.\n     * @api private\n     */\n    proto._getOnceReturnValue = function _getOnceReturnValue() {\n        if (this.hasOwnProperty('_onceReturnValue')) {\n            return this._onceReturnValue;\n        }\n        else {\n            return true;\n        }\n    };\n\n    /**\n     * Fetches the events object and creates one if required.\n     *\n     * @return {Object} The events storage object.\n     * @api private\n     */\n    proto._getEvents = function _getEvents() {\n        return this._events || (this._events = {});\n    };\n\n    /**\n     * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.\n     *\n     * @return {Function} Non conflicting EventEmitter class.\n     */\n    EventEmitter.noConflict = function noConflict() {\n        exports.EventEmitter = originalGlobalValue;\n        return EventEmitter;\n    };\n\n    // Expose the class either via AMD, CommonJS or the global object\n    if (typeof define === 'function' && define.amd) {\n        define(function () {\n            return EventEmitter;\n        });\n    }\n    else if (typeof module === 'object' && module.exports){\n        module.exports = EventEmitter;\n    }\n    else {\n        exports.EventEmitter = EventEmitter;\n    }\n}(this || {}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/wolfy87-eventemitter/EventEmitter.js\n// module id = 49\n// module chunks = 0","import OneSignalError from './OneSignalError';\n\n\nexport default class AlreadySubscribedError extends OneSignalError {\n  constructor() {\n    super('This operation can only be performed when the user is not subscribed.');\n  }\n}\n","import OneSignalError from \"./OneSignalError\";\r\n\r\n\r\nexport default class PermissionMessageDismissedError extends OneSignalError {\r\n  constructor() {\r\n    super('The permission message was previously dismissed.');\r\n  }\r\n}","import { WindowEnvironmentKind } from '../models/WindowEnvironmentKind';\nimport SdkEnvironment from './SdkEnvironment';\n\n\n/**\n * Creates method proxies for once-supported methods.\n */\nexport default class LegacyManager {\n  static ensureBackwardsCompatibility(oneSignal) {\n    LegacyManager.environmentPolyfill(oneSignal);\n    LegacyManager.postmams(oneSignal);\n  }\n\n  static environmentPolyfill(oneSignal) {\n    oneSignal.environment = {};\n    oneSignal.environment.getEnv = function () { return ''; }\n    oneSignal.environment.isPopup = function () {\n      return SdkEnvironment.getWindowEnv() === WindowEnvironmentKind.OneSignalSubscriptionPopup;\n    }\n    oneSignal.environment.isIframe = function () {\n      return SdkEnvironment.getWindowEnv() === WindowEnvironmentKind.OneSignalProxyFrame;\n    }\n  }\n\n  static postmams(oneSignal) {\n    const postmamMessageFunc = function message(this: any) {\n      this.messenger.message.apply(this.messenger, arguments);\n    }\n\n    const postmamPostMessageFunc = function postMessage(this: any) {\n      this.messenger.postMessage.apply(this.messenger, arguments);\n    }\n\n    function assignPostmamLegacyFunctions(postmamLikeObject) {\n      postmamLikeObject.message = postmamMessageFunc;\n      postmamLikeObject.postMessage = postmamPostMessageFunc;\n    }\n\n    if (oneSignal.proxyFrame) {\n      oneSignal.iframePostmam = oneSignal.proxyFrame;\n      assignPostmamLegacyFunctions(oneSignal.iframePostmam);\n    }\n    if (oneSignal.subscriptionPopup) {\n      oneSignal.popupPostmam = oneSignal.subscriptionPopup;\n      assignPostmamLegacyFunctions(oneSignal.popupPostmam);\n    }\n    if (oneSignal.subscriptionModal) {\n      oneSignal.modalPostmam = oneSignal.subscriptionModal;\n      assignPostmamLegacyFunctions(oneSignal.modalPostmam);\n    }\n  }\n}\n","import * as Browser from 'bowser';\nimport * as log from 'loglevel';\nimport * as objectAssign from 'object-assign';\n\nimport AlreadySubscribedError from '../errors/AlreadySubscribedError';\nimport { InvalidStateError, InvalidStateReason } from '../errors/InvalidStateError';\nimport PermissionMessageDismissedError from '../errors/PermissionMessageDismissedError';\nimport Event from '../Event';\nimport LimitStore from '../LimitStore';\nimport { NotificationPermission } from '../models/NotificationPermission';\nimport SdkEnvironment from '../managers/SdkEnvironment';\nimport { AppConfig, AppUserConfig, serializeAppConfig } from '../models/AppConfig';\nimport { WindowEnvironmentKind } from '../models/WindowEnvironmentKind';\nimport SubscriptionModalHost from '../modules/frames/SubscriptionModalHost';\nimport Database from '../services/Database';\nimport { getConsoleStyle, once } from '../utils';\nimport EventHelper from './EventHelper';\nimport MainHelper from './MainHelper';\nimport SubscriptionHelper from './SubscriptionHelper';\nimport { SdkInitError, SdkInitErrorKind } from '../errors/SdkInitError';\nimport OneSignalApi from '../OneSignalApi';\nimport CookieSyncer from '../modules/CookieSyncer';\nimport { SubscriptionManager } from '../managers/SubscriptionManager';\nimport { ServiceWorkerManager } from '../managers/ServiceWorkerManager';\nimport Path from '../models/Path';\nimport Context from '../models/Context';\nimport { WorkerMessenger, WorkerMessengerCommand } from '../libraries/WorkerMessenger';\nimport { DynamicResourceLoader } from '../services/DynamicResourceLoader';\nimport { DeviceRecord } from '../models/DeviceRecord';\nimport PushPermissionNotGrantedError from '../errors/PushPermissionNotGrantedError';\nimport { PageViewMetricEngagement } from '../managers/MetricsManager';\nimport { PushDeviceRecord } from '../models/PushDeviceRecord';\nimport { EmailDeviceRecord } from '../models/EmailDeviceRecord';\nimport { SubscriptionStrategyKind } from \"../models/SubscriptionStrategyKind\";\nimport { IntegrationKind } from '../models/IntegrationKind';\nimport { Subscription } from \"../models/Subscription\";\nimport ProxyFrameHost from '../modules/frames/ProxyFrameHost';\n\ndeclare var OneSignal: any;\n\nexport default class InitHelper {\n  static async storeInitialValues() {\n    const isPushEnabled = await OneSignal.isPushNotificationsEnabled();\n    const notificationPermission = await OneSignal.getNotificationPermission();\n    const isOptedOut = await OneSignal.isOptedOut();\n    LimitStore.put('subscription.optedOut', isOptedOut);\n    await Database.put('Options', { key: 'isPushEnabled', value: isPushEnabled }),\n    await Database.put('Options', {\n      key: 'notificationPermission',\n      value: notificationPermission\n    });\n  }\n\n  /** Entry method for any environment that sets expiring subscriptions. */\n  public static async processExpiringSubscriptions() {\n    const context: Context = OneSignal.context;\n\n    log.debug(\"Checking subscription expiration...\");\n    const isSubscriptionExpiring = await context.subscriptionManager.isSubscriptionExpiring();\n    if (!isSubscriptionExpiring) {\n      log.debug(\"Subscription is not considered expired.\");\n      return;\n    }\n\n    const integrationKind = await SdkEnvironment.getIntegration();\n    const windowEnv = await SdkEnvironment.getWindowEnv();\n\n    log.debug(\"Subscription is considered expiring. Current Integration:\", integrationKind);\n    switch (integrationKind) {\n      /*\n        Resubscribe via the service worker.\n\n        For Secure, we can definitely resubscribe via the current page, but for SecureProxy, we\n        used to not be able to subscribe for push within secure child frames. The common supported\n        and safe way is to resubscribe via the service worker.\n       */\n      case IntegrationKind.Secure:\n        const rawPushSubscription = await context.subscriptionManager.subscribe(SubscriptionStrategyKind.SubscribeNew);\n        await context.subscriptionManager.registerSubscription(rawPushSubscription);\n        break;\n      case IntegrationKind.SecureProxy:\n        if (windowEnv === WindowEnvironmentKind.OneSignalProxyFrame) {\n          const newSubscription = await new Promise<Subscription>(resolve => {\n            context.workerMessenger.once(WorkerMessengerCommand.SubscribeNew, subscription => {\n              resolve(Subscription.deserialize(subscription));\n            });\n            context.workerMessenger.unicast(WorkerMessengerCommand.SubscribeNew, serializeAppConfig(context.appConfig));\n          });\n          log.debug(\"Finished registering brand new subscription:\", newSubscription);\n        } else {\n          const proxyFrame: ProxyFrameHost = OneSignal.proxyFrameHost;\n          await proxyFrame.runCommand(OneSignal.POSTMAM_COMMANDS.PROCESS_EXPIRING_SUBSCRIPTIONS);\n        }\n        break;\n      case IntegrationKind.InsecureProxy:\n        /*\n          We can't really do anything here except remove a value checked by\n          isPushNotificationsEnabled to simulate unsubscribing.\n         */\n        await Database.remove(\"Ids\", \"registrationId\");\n        log.debug(\"Unsubscribed expiring HTTP subscription by removing registration ID.\");\n        break;\n    }\n  }\n\n  /**\n   * This event occurs after init.\n   * For HTTPS sites, this event is called after init.\n   * For HTTP sites, this event is called after the iFrame is created, and a message is received from the iFrame signaling cross-origin messaging is ready.\n   * @private\n   */\n  static async onSdkInitialized() {\n    const context: Context = OneSignal.context;\n\n    // Store initial values of notification permission, user ID, and manual subscription status\n    // This is done so that the values can be later compared to see if anything changed\n    // This is done here for HTTPS, it is done after the call to _addSessionIframe in sessionInit for HTTP sites, since the iframe is needed for communication\n    await InitHelper.storeInitialValues();\n    await InitHelper.installNativePromptPermissionChangedHook();\n    if (await context.permissionManager.getNotificationPermission(context.appConfig.safariWebId) === NotificationPermission.Granted) {\n      /*\n        If the user has already granted permission, the user has previously\n        already subscribed. Don't show welcome notifications if the user is\n        automatically resubscribed.\n      */\n      OneSignal.__doNotShowWelcomeNotification = true;\n    }\n\n    if (\n      navigator.serviceWorker &&\n      window.location.protocol === 'https:' &&\n      !await SubscriptionHelper.isFrameContextInsecure()\n    ) {\n      try {\n        const registration = await navigator.serviceWorker.getRegistration();\n        if (registration && registration.active) {\n          MainHelper.establishServiceWorkerChannel();\n        }\n      } catch (e) { }\n    }\n\n    await InitHelper.processExpiringSubscriptions();\n    await MainHelper.showNotifyButton();\n\n    if (Browser.safari && OneSignal.config.userConfig.autoRegister === false) {\n      const isPushEnabled = await OneSignal.isPushNotificationsEnabled();\n      if (isPushEnabled) {\n        /*  The user is on Safari and *specifically* set autoRegister to false.\n          The normal case for a user on Safari is to not set anything related to autoRegister.\n          With autoRegister false, we don't automatically show the permission prompt on Safari.\n          However, if push notifications are already enabled, we're actually going to make the same\n          subscribe call and register the device token, because this will return the same device\n          token and allow us to update the user's session count and last active.\n          For sites that omit autoRegister, autoRegister is assumed to be true. For Safari, the session count\n          and last active is updated from this registration call.\n          */\n        InitHelper.sessionInit({ __sdkCall: true });\n      }\n    }\n\n    if (SubscriptionHelper.isUsingSubscriptionWorkaround() && context.sessionManager.isFirstPageView()) {\n      /*\n       The user is on an HTTP site and they accessed this site by opening a new window or tab (starting a new\n       session). This means we should increment their session_count and last_active by calling\n       registerWithOneSignal(). Without this call, the user's session and last_active is not updated. We only\n       do this if the user is actually registered with OneSignal though.\n       */\n      log.debug(`(${SdkEnvironment.getWindowEnv().toString()}) Updating session info for HTTP site.`);\n      const isPushEnabled = await OneSignal.isPushNotificationsEnabled();\n      if (isPushEnabled) {\n        const context: Context = OneSignal.context;\n        const { deviceId } = await Database.getSubscription();\n        await OneSignalApi.updateUserSession(deviceId, new PushDeviceRecord(null));\n      }\n    }\n\n    await InitHelper.updateEmailSessionCount();\n    context.cookieSyncer.install();\n    await InitHelper.showPromptsFromWebConfigEditor();\n\n    Event.trigger(OneSignal.EVENTS.SDK_INITIALIZED_PUBLIC);\n  }\n\n  public static async updateEmailSessionCount() {\n    const context: Context = OneSignal.context;\n    /* Both HTTP and HTTPS pages can update email session by API request without origin/push feature restrictions */\n    if (context.sessionManager.isFirstPageView()) {\n      const emailProfile = await Database.getEmailProfile();\n      if (emailProfile.emailId && emailProfile.emailId.value) {\n        OneSignalApi.updateUserSession(\n          emailProfile.emailId,\n          new EmailDeviceRecord(null, emailProfile.emailAuthHash)\n        );\n      }\n    }\n  }\n\n  private static async showPromptsFromWebConfigEditor() {\n    const config: AppConfig = OneSignal.config;\n    if (!(await OneSignal.isPushNotificationsEnabled()) &&\n      config.userConfig.promptOptions &&\n      config.userConfig.promptOptions.slidedown &&\n      config.userConfig.promptOptions.slidedown.autoPrompt &&\n      !(await OneSignal.isOptedOut())) {\n      OneSignal.showHttpPrompt();\n    }\n  }\n\n  static async installNativePromptPermissionChangedHook() {\n    if (navigator.permissions && !(Browser.firefox && Number(Browser.version) <= 45)) {\n      OneSignal._usingNativePermissionHook = true;\n      // If the browser natively supports hooking the subscription prompt permission change event,\n      // use it instead of our SDK method\n      const permissionStatus = await navigator.permissions.query({ name: 'notifications' });\n      permissionStatus.onchange = function() {\n        EventHelper.triggerNotificationPermissionChanged();\n      };\n    }\n  }\n\n  static saveInitOptions() {\n    let opPromises = [];\n    if (OneSignal.config.userConfig.persistNotification === false) {\n      opPromises.push(Database.put('Options', { key: 'persistNotification', value: false }));\n    } else {\n      if (OneSignal.config.userConfig.persistNotification === true) {\n        opPromises.push(Database.put('Options', { key: 'persistNotification', value: 'force' }));\n      } else {\n        opPromises.push(Database.put('Options', { key: 'persistNotification', value: true }));\n      }\n    }\n\n    let webhookOptions = OneSignal.config.userConfig.webhooks;\n    ['notification.displayed', 'notification.clicked', 'notification.dismissed'].forEach(event => {\n      if (webhookOptions && webhookOptions[event]) {\n        opPromises.push(Database.put('Options', { key: `webhooks.${event}`, value: webhookOptions[event] }));\n      } else {\n        opPromises.push(Database.put('Options', { key: `webhooks.${event}`, value: false }));\n      }\n    });\n    if (webhookOptions && webhookOptions.cors) {\n      opPromises.push(Database.put('Options', { key: `webhooks.cors`, value: true }));\n    } else {\n      opPromises.push(Database.put('Options', { key: `webhooks.cors`, value: false }));\n    }\n\n    if (OneSignal.config.userConfig.notificationClickHandlerMatch) {\n      opPromises.push(\n        Database.put('Options', {\n          key: 'notificationClickHandlerMatch',\n          value: OneSignal.config.userConfig.notificationClickHandlerMatch\n        })\n      );\n    } else {\n      opPromises.push(Database.put('Options', { key: 'notificationClickHandlerMatch', value: 'exact' }));\n    }\n\n    if (OneSignal.config.userConfig.notificationClickHandlerAction) {\n      opPromises.push(\n        Database.put('Options', {\n          key: 'notificationClickHandlerAction',\n          value: OneSignal.config.userConfig.notificationClickHandlerAction\n        })\n      );\n    } else {\n      opPromises.push(Database.put('Options', { key: 'notificationClickHandlerAction', value: 'navigate' }));\n    }\n    return Promise.all(opPromises);\n  }\n\n  static async internalInit() {\n    log.debug('Called %cinternalInit()', getConsoleStyle('code'));\n\n    const context: Context = OneSignal.context;\n\n    // Always check for an updated service worker\n    context.serviceWorkerManager.updateWorker();\n\n    context.sessionManager.incrementPageViewCount();\n\n    // HTTPS - Only register for push notifications once per session or if the user changes notification permission to Ask or Allow.\n    if (\n      sessionStorage.getItem('ONE_SIGNAL_SESSION') &&\n      !SubscriptionHelper.isUsingSubscriptionWorkaround() &&\n      (window.Notification.permission == 'denied' ||\n        sessionStorage.getItem('ONE_SIGNAL_NOTIFICATION_PERMISSION') == window.Notification.permission)\n    ) {\n      Event.trigger(OneSignal.EVENTS.SDK_INITIALIZED);\n      return;\n    }\n\n    sessionStorage.setItem('ONE_SIGNAL_NOTIFICATION_PERMISSION', window.Notification.permission);\n\n    if (Browser.safari && OneSignal.config.userConfig.autoRegister === false) {\n      log.debug('On Safari and autoregister is false, skipping sessionInit().');\n      // This *seems* to trigger on either Safari's autoregister false or Chrome HTTP\n      // Chrome HTTP gets an SDK_INITIALIZED event from the iFrame postMessage, so don't call it here\n      if (!SubscriptionHelper.isUsingSubscriptionWorkaround()) {\n        Event.trigger(OneSignal.EVENTS.SDK_INITIALIZED);\n      }\n      return;\n    }\n\n    if (OneSignal.config.userConfig.autoRegister === false && !OneSignal.config.subdomain) {\n      log.debug('Skipping internal init. Not auto-registering and no subdomain.');\n      /* 3/25: If a user is already registered, re-register them in case the clicked Blocked and then Allow (which immediately invalidates the GCM token as soon as you click Blocked) */\n      Event.trigger(OneSignal.EVENTS.SDK_INITIALIZED);\n      const isPushEnabled = await OneSignal.isPushNotificationsEnabled();\n      if (isPushEnabled && !SubscriptionHelper.isUsingSubscriptionWorkaround()) {\n        log.info(\n          'Because the user is already subscribed and has enabled notifications, we will re-register their GCM token.'\n        );\n        // Resubscribes them, and in case their GCM registration token was invalid, gets a new one\n        SubscriptionHelper.registerForPush();\n      }\n      return;\n    }\n\n    if (document.visibilityState !== 'visible') {\n      once(\n        document,\n        'visibilitychange',\n        (_, destroyEventListener) => {\n          if (document.visibilityState === 'visible') {\n            destroyEventListener();\n            InitHelper.sessionInit({ __sdkCall: true });\n          }\n        },\n        true\n      );\n      return;\n    }\n\n    InitHelper.sessionInit({ __sdkCall: true });\n  }\n\n  // overridingPageTitle: Only for the HTTP Iframe, pass the page title in from the top frame\n  static async initSaveState(overridingPageTitle: string) {\n    const appId = await MainHelper.getAppId();\n    await Database.put('Ids', { type: 'appId', id: appId.value });\n    const initialPageTitle = overridingPageTitle || document.title || 'Notification';\n    await Database.put('Options', { key: 'pageTitle', value: initialPageTitle });\n    log.info(`OneSignal: Set pageTitle to be '${initialPageTitle}'.`);\n    const config: AppConfig = OneSignal.config;\n    await Database.put('Options', { key: 'emailAuthRequired', value: !!config.emailAuthRequired })\n  }\n\n  static sessionInit(options) {\n    const appConfig: AppConfig = OneSignal.context.appConfig;\n\n    log.debug(`Called %csessionInit(${JSON.stringify(options)})`, getConsoleStyle('code'));\n    if (OneSignal._sessionInitAlreadyRunning) {\n      log.debug('Returning from sessionInit because it has already been called.');\n      return;\n    } else {\n      OneSignal._sessionInitAlreadyRunning = true;\n    }\n\n    if (options.modalPrompt && options.fromRegisterFor) {\n      /*\n        Show the HTTPS fullscreen modal permission message.\n       */\n      OneSignal.subscriptionModalHost = new SubscriptionModalHost(appConfig.appId, options);\n      OneSignal.subscriptionModalHost.load();\n    } else if (!SubscriptionHelper.isUsingSubscriptionWorkaround()) {\n      /*\n        Show HTTPS modal prompt.\n       */\n      if (options.__sdkCall && MainHelper.wasHttpsNativePromptDismissed()) {\n        log.debug('OneSignal: Not automatically showing native HTTPS prompt because the user previously dismissed it.');\n        OneSignal._sessionInitAlreadyRunning = false;\n      } else {\n        /* We don't want to resubscribe if the user is opted out, and we can't check on HTTP, because the promise will\n        prevent the popup from opening. */\n        if (SubscriptionHelper.isUsingSubscriptionWorkaround()) {\n          SubscriptionHelper.registerForPush();\n        } else {\n          OneSignal.isOptedOut().then(isOptedOut => {\n            if (!isOptedOut) {\n             /*\n              * Chrome 63 on Android permission prompts are permanent without a dismiss option. To avoid\n              * permanent blocks, we want to replace sites automatically showing the native browser request\n              * with a slide prompt first.\n              */\n              if (\n                (\n                  !options ||\n                  options && !options.fromRegisterFor\n                ) &&\n                Browser.chrome &&\n                Number(Browser.version) >= 63 &&\n                (Browser.tablet || Browser.mobile)\n                ) {\n                OneSignal.showHttpPrompt();\n              } else {\n               SubscriptionHelper.registerForPush();\n              }\n            } else {\n              OneSignal._sessionInitAlreadyRunning = false;\n            }\n          });\n        }\n      }\n    } else {\n      if (OneSignal.config.userConfig.autoRegister !== true) {\n        log.debug('OneSignal: Not automatically showing popover because autoRegister is not specifically true.');\n      }\n      if (MainHelper.isHttpPromptAlreadyShown()) {\n        log.debug('OneSignal: Not automatically showing popover because it was previously shown in the same session.');\n      }\n      if (OneSignal.config.userConfig.autoRegister === true && !MainHelper.isHttpPromptAlreadyShown()) {\n        OneSignal.showHttpPrompt().catch(e => {\n          if (\n            (e instanceof InvalidStateError &&\n              (e as any).reason === InvalidStateReason[InvalidStateReason.RedundantPermissionMessage]) ||\n            e instanceof PermissionMessageDismissedError ||\n            e instanceof AlreadySubscribedError ||\n            e instanceof PushPermissionNotGrantedError\n          ) {\n            log.debug('[Prompt Not Showing]', e);\n            // Another prompt is being shown, that's okay\n          } else log.info(e);\n        });\n      }\n      OneSignal._sessionInitAlreadyRunning = false;\n    }\n\n    Event.trigger(OneSignal.EVENTS.SDK_INITIALIZED);\n  }\n\n  static async ponyfillSafariFetch() {\n    // If Safari - add 'fetch' pollyfill if it isn't already added.\n    if (Browser.safari && typeof window.fetch == 'undefined') {\n      log.debug('Loading fetch polyfill for Safari..');\n      try {\n        await new DynamicResourceLoader().loadFetchPolyfill();\n        log.debug('Done loading fetch polyfill.');\n      } catch (e) {\n        log.debug('Error loading fetch polyfill:', e);\n      }\n    }\n  }\n\n  static async errorIfInitAlreadyCalled() {\n    if (OneSignal._initCalled) {\n      throw new SdkInitError(SdkInitErrorKind.MultipleInitialization);\n    }\n    OneSignal._initCalled = true;\n  }\n}\n","import * as objectAssign from 'object-assign';\nimport SdkEnvironment from '../managers/SdkEnvironment';\nimport { BuildEnvironmentKind } from '../models/BuildEnvironmentKind';\nimport Environment from '../Environment';\n\nexport const enum ResourceType {\n  Stylesheet,\n  Script\n}\n\nexport const enum ResourceLoadState {\n  /**\n   * The remote resource was fetched and loaded successfully.\n   */\n  Loaded,\n  /**\n   * The remote resource failed to be loaded (e.g. not found or network offline).\n   */\n  Failed\n}\n\ninterface DynamicResourceLoaderCache {\n  [key: string]: Promise<ResourceLoadState>;\n}\n\nexport class DynamicResourceLoader {\n  private cache: DynamicResourceLoaderCache;\n\n  constructor() {\n    this.cache = {};\n  }\n\n  getCache(): DynamicResourceLoaderCache {\n    // Cache is private; return a cloned copy just for testing\n    return objectAssign({}, this.cache);\n  }\n\n  async loadSdkStylesheet(): Promise<ResourceLoadState> {\n    const originForEnv = SdkEnvironment.getOneSignalApiUrl().origin;\n    return await this.loadIfNew(\n      ResourceType.Stylesheet,\n      new URL(`${originForEnv}/sdks/OneSignalSDKStyles.css?v=${Environment.getSdkStylesVersionHash()}`)\n    );\n  }\n\n  async loadFetchPolyfill(): Promise<ResourceLoadState> {\n    return await this.loadIfNew(\n      ResourceType.Script,\n      new URL('https://cdnjs.cloudflare.com/ajax/libs/fetch/2.0.3/fetch.min.js')\n    );\n  }\n\n  /**\n   * Attempts to load a resource by adding it to the document's <head>.\n   * Caches any previous load attempt's result and does not retry loading a previous resource.\n   */\n  async loadIfNew(type: ResourceType, url: URL): Promise<ResourceLoadState> {\n    // Load for first time\n    if (!this.cache[url.toString()]) {\n      this.cache[url.toString()] = DynamicResourceLoader.load(type, url);\n    }\n    // Resource is loading; multiple calls can be made to this while the same resource is loading\n    // Waiting on the Promise is what we want here\n    return await this.cache[url.toString()];\n  }\n\n  /**\n   * Attempts to load a resource by adding it to the document's <head>.\n   * Each call creates a new DOM element and fetch attempt.\n   */\n  static async load(type: ResourceType, url: URL): Promise<ResourceLoadState> {\n    try {\n      await new Promise((resolve, reject) => {\n        switch (type) {\n          case ResourceType.Script:\n            var domElement: HTMLElement = document.createElement('script');\n            domElement.setAttribute('type', 'text/javascript');\n            domElement.setAttribute('async', 'async');\n            domElement.setAttribute('src', url.toString());\n            break;\n          case ResourceType.Stylesheet:\n            var domElement: HTMLElement = document.createElement('link');\n            domElement.setAttribute('rel', 'stylesheet');\n            domElement.setAttribute('href', url.toString());\n            break;\n        }\n        domElement.onerror = reject;\n        domElement.onload = resolve;\n        document.querySelector('head').appendChild(domElement);\n      });\n      return ResourceLoadState.Loaded;\n    } catch (e) {\n      return ResourceLoadState.Failed;\n    }\n  }\n}\n","import * as Browser from 'bowser';\n\nimport Environment from '../Environment';\nimport NotImplementedError from '../errors/NotImplementedError';\nimport { DeliveryPlatformKind } from './DeliveryPlatformKind';\nimport { DevicePlatformKind } from './DevicePlatformKind';\nimport { RawPushSubscription } from './RawPushSubscription';\nimport { Serializable } from './Serializable';\nimport { SubscriptionStateKind } from './SubscriptionStateKind';\n\nimport { DeviceRecord } from './DeviceRecord';\n\n\n/**\n * Describes an email device record.\n */\nexport class EmailDeviceRecord extends DeviceRecord {\n\n  /**\n   * @param email Omitting this parameter does not void the record's identifier.\n   */\n  constructor(\n    public email: string,\n    public emailAuthHash: string\n  ) {\n    super();\n  }\n\n  serialize() {\n    const serializedBundle: any = super.serialize();\n\n    if (this.email) {\n      serializedBundle.identifier = this.email;\n    }\n    if (this.emailAuthHash) {\n      serializedBundle.email_auth_hash = this.emailAuthHash;\n    }\n\n    return serializedBundle;\n  }\n\n  deserialize(_: object): EmailDeviceRecord { throw new NotImplementedError(); }\n}\n","import * as log from 'loglevel';\n\nimport SdkEnvironment from '../managers/SdkEnvironment';\nimport Database from '../services/Database';\nimport SubscriptionHelper from './SubscriptionHelper';\nimport TimedLocalStorage from '../modules/TimedLocalStorage';\n\ndeclare var OneSignal: any;\n\nexport default class TestHelper {\n  /**\n   * Creates an expiring local storage entry to note that the user does not want to be disturbed.\n   */\n  static async markHttpsNativePromptDismissed() {\n    /**\n     * Note: LocalStorage is set both on subdomain.onesignal.com and the main site.\n     *\n     * When checking whether the prompt was previously dismissed, certain code cannot be\n     * asynchronous otherwise the browser treats it like a blocked popup, so LocalStorage is\n     * synchronous while IndexedDb access / PostMessage querying across origins are both\n     * asynchronous.\n     */\n    if (SubscriptionHelper.isUsingSubscriptionWorkaround()) {\n      await new Promise((resolve, reject) => {\n        OneSignal.proxyFrameHost.message(OneSignal.POSTMAM_COMMANDS.MARK_PROMPT_DISMISSED, {}, reply => {\n          if (reply.data === OneSignal.POSTMAM_COMMANDS.REMOTE_OPERATION_COMPLETE) {\n            resolve();\n          } else {\n            reject();\n          }\n        });\n      });\n    }\n    let dismissCount = await Database.get<number>('Options', 'promptDismissCount');\n    if (!dismissCount) {\n      dismissCount = 0;\n    }\n    /**\n     * This will be run twice for HTTP sites, since we share IndexedDb, so we don't run it for HTTP sites.\n     */\n    if (!SubscriptionHelper.isUsingSubscriptionWorkaround()) {\n      dismissCount += 1;\n    }\n\n    let dismissDays = 3;\n    if (dismissCount == 2) {\n      dismissDays = 7;\n    } else if (dismissCount > 2) {\n      dismissDays = 30;\n    }\n    log.debug(`(${SdkEnvironment.getWindowEnv().toString()}) OneSignal: User dismissed the native notification prompt; reprompt after ${dismissDays} days.`);\n    await Database.put('Options', { key: 'promptDismissCount', value: dismissCount });\n\n    const dismissMinutes = dismissDays * 24 * 60;\n    return TimedLocalStorage.setItem('onesignal-notification-prompt', 'dismissed', dismissMinutes);\n  }\n}\n","import OneSignalError from \"./OneSignalError\";\n\n\nexport enum SubscriptionErrorReason {\n  InvalidSafariSetup,\n  Blocked,\n  Dismissed\n}\n\nexport default class SubscriptionError extends OneSignalError {\n  reason: string;\n\n  constructor(reason: SubscriptionErrorReason) {\n    switch (reason) {\n      case SubscriptionErrorReason.InvalidSafariSetup:\n        super('The Safari site URL, icon size, or push certificate is invalid, or Safari is in a private session.');\n        break;\n      case SubscriptionErrorReason.Blocked:\n        super('Notification permissions are blocked.');\n        break;\n      case SubscriptionErrorReason.Dismissed:\n        super('The notification permission prompt was dismissed.');\n        break;\n    }\n  }\n}\n","import { Serializable } from './Serializable';\nimport { SubscriptionStateKind } from './SubscriptionStateKind';\nexport class RawPushSubscription implements Serializable {\n  /**\n     * The GCM/FCM registration token, along with the full URL. Not used for Safari.\n     */\n  w3cEndpoint: URL;\n  w3cP256dh: string;\n  w3cAuth: string;\n  /**\n     * A Safari-only push subscription device token. Not used for Chrome/Firefox.\n     */\n  safariDeviceToken: string;\n  /**\n   * A full RawPushSubscription object of the existing W3C subscription, if any.\n   *\n   * This is used to determine whether the subscription changed, so we know\n   * whether to contact OneSignal to update the subscription.\n   */\n  existingW3cPushSubscription: RawPushSubscription;\n  /**\n   * The existing Safari subscription device token, if it exists.\n   *\n   * This is used to determine whether the subscription changed, so we know\n   * whether to contact OneSignal to update the subscription.\n   */\n  existingSafariDeviceToken: string;\n\n  /**\n   * Returns true if an existing recorded W3C or Safari subscription is\n   * identical to the current subscription.\n   */\n  public isNewSubscription(): boolean {\n    if (this.existingW3cPushSubscription) {\n      return this.existingW3cPushSubscription.w3cEndpoint.toString() !== this.w3cEndpoint.toString() ||\n        this.existingW3cPushSubscription.w3cP256dh !== this.w3cP256dh ||\n        this.existingW3cPushSubscription.w3cAuth !== this.w3cAuth;\n    } else if (this.existingSafariDeviceToken) {\n      return this.existingSafariDeviceToken !== this.safariDeviceToken;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * Given a native W3C browser push subscription, takes the endpoint, p256dh,\n   * and auth.\n   *\n   * @param pushSubscription A native browser W3C push subscription.\n   */\n  public static setFromW3cSubscription(pushSubscription: PushSubscription): RawPushSubscription {\n    const rawPushSubscription = new RawPushSubscription();\n\n    if (pushSubscription) {\n      rawPushSubscription.w3cEndpoint = new URL(pushSubscription.endpoint);\n\n      // Retrieve p256dh and auth for encrypted web push protocol\n      if (pushSubscription.getKey) {\n        // p256dh and auth are both ArrayBuffer\n        let p256dh = null;\n        try {\n          p256dh = pushSubscription.getKey('p256dh');\n        } catch (e) {\n          // User is most likely running < Chrome < 50\n        }\n        let auth = null;\n        try {\n          auth = pushSubscription.getKey('auth');\n        } catch (e) {\n          // User is most likely running < Firefox 45\n        }\n\n        if (p256dh) {\n          // Base64 encode the ArrayBuffer (not URL-Safe, using standard Base64)\n          let p256dh_base64encoded = btoa(String.fromCharCode.apply(null, new Uint8Array(p256dh)));\n          rawPushSubscription.w3cP256dh = p256dh_base64encoded;\n        }\n        if (auth) {\n          // Base64 encode the ArrayBuffer (not URL-Safe, using standard Base64)\n          let auth_base64encoded = btoa(String.fromCharCode.apply(null, new Uint8Array(auth)));\n          rawPushSubscription.w3cAuth = auth_base64encoded;\n        }\n      }\n    }\n\n    return rawPushSubscription;\n  }\n\n  /**\n   * Given a native browser Safari push subscription, sets the device token\n   * property.\n   *\n   * @param safariDeviceToken A native browser Safari push subscription.\n   */\n  public setFromSafariSubscription(safariDeviceToken: string) {\n    this.safariDeviceToken = safariDeviceToken;\n  }\n\n  public serialize() {\n    const serializedBundle: any = {\n      /* Old Parameters */\n      w3cEndpoint: this.w3cEndpoint.toString(),\n      w3cP256dh: this.w3cP256dh,\n      w3cAuth: this.w3cAuth,\n      safariDeviceToken: this.safariDeviceToken,\n      existingPushSubscription: this.existingW3cPushSubscription ? this.existingW3cPushSubscription.serialize() : null,\n      existingSafariDeviceToken: this.existingSafariDeviceToken\n    };\n\n    return serializedBundle;\n  }\n\n  public static deserialize(bundle: any): RawPushSubscription {\n    const subscription = new RawPushSubscription();\n    if (!bundle) {\n      return subscription;\n    }\n    try {\n      subscription.w3cEndpoint = new URL(bundle.w3cEndpoint);\n    } catch (e) {\n      // w3cEndpoint will be null for Safari\n    }\n    subscription.w3cP256dh = bundle.w3cP256dh;\n    subscription.w3cAuth = bundle.w3cAuth;\n    subscription.existingW3cPushSubscription = bundle.existingPushSubscription\n      ? RawPushSubscription.deserialize(bundle.existingPushSubscription)\n      : null;\n    subscription.safariDeviceToken = bundle.safariDeviceToken;\n    subscription.existingSafariDeviceToken = bundle.existingSafariDeviceToken;\n    return subscription;\n  }\n}\n","/**\n * Used for VAPID, converts the VAPID public key into a byte format the browser accepts.\n */\nexport function base64ToUint8Array(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n\n/**\n * Used for VAPID, converts a browser-provided ArrayBuffer of the applicationServerKey back to its string form.\n */\nexport function arrayBufferToBase64(arrayBuffer: ArrayBufferLike): string {\n  var base64 = '';\n  var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n  var bytes = new Uint8Array(arrayBuffer);\n  var byteLength = bytes.byteLength;\n  var byteRemainder = byteLength % 3;\n  var mainLength = byteLength - byteRemainder;\n\n  var a, b, c, d;\n  var chunk;\n\n  // Main loop deals with bytes in chunks of 3\n  for (var i = 0; i < mainLength; i = i + 3) {\n    // Combine the three bytes into a single integer\n    chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n\n    // Use bitmasks to extract 6-bit segments from the triplet\n    a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18\n    b = (chunk & 258048) >> 12; // 258048   = (2^6 - 1) << 12\n    c = (chunk & 4032) >> 6; // 4032     = (2^6 - 1) << 6\n    d = chunk & 63; // 63       = 2^6 - 1\n\n    // Convert the raw binary segments to the appropriate ASCII encoding\n    base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];\n  }\n\n  // Deal with the remaining bytes and padding\n  if (byteRemainder == 1) {\n    chunk = bytes[mainLength];\n\n    a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2\n\n    // Set the 4 least significant bits to zero\n    b = (chunk & 3) << 4; // 3   = 2^2 - 1\n\n    base64 += encodings[a] + encodings[b] + '==';\n  } else if (byteRemainder == 2) {\n    chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];\n\n    a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10\n    b = (chunk & 1008) >> 4; // 1008  = (2^6 - 1) << 4\n\n    // Set the 2 least significant bits to zero\n    c = (chunk & 15) << 2; // 15    = 2^4 - 1\n\n    base64 += encodings[a] + encodings[b] + encodings[c] + '=';\n  }\n\n  return base64;\n}\n\n/**\n * From: https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding\n */\nexport function base64Encode(str) {\n  // first we use encodeURIComponent to get percent-encoded UTF-8,\n  // then we convert the percent encodings into raw bytes which\n  // can be fed into btoa.\n  return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g,\n      function toSolidBytes(match, p1) {\n          return String.fromCharCode(('0x' as any) + p1);\n  }));\n}\n\nexport function base64Decode(str) {\n  // Going backwards: from bytestream, to percent-encoding, to original string.\n  return decodeURIComponent(atob(str).split('').map(function(c) {\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(''));\n}\n","import * as objectAssign from 'object-assign';\nimport { base64Encode } from '../utils/Encoding';\nimport Environment from '../Environment';\n\nabstract class MetricEvent {\n  abstract getEventName();\n  getPropertiesAsJson() {\n    /* Origin and URL are available from the service worker as well */\n    return {\n      origin: location.origin,\n      url: location.href,\n      sdkVersion: Environment.version()\n    }\n  }\n}\n\nabstract class MetricEngagement {\n  abstract getProfileName();\n  abstract getOperationData();\n}\n\nexport enum ApiUsageMetricKind {\n  HttpPermissionRequest = 'HttpPermissionRequest'\n}\n\nexport class ApiUsageMetricEvent extends MetricEvent {\n  constructor(public apiName: ApiUsageMetricKind) {\n    super();\n  }\n\n  getEventName() {\n    return 'api-usage';\n  }\n\n  getPropertiesAsJson() {\n    return objectAssign({}, {\n      api: this.apiName.toString(),\n    }, super.getPropertiesAsJson());\n  }\n}\n\nexport class PageViewMetricEngagement extends MetricEngagement {\n  constructor() {\n    super();\n  }\n\n  getProfileName() {\n    return \"all_websites\";\n  }\n\n  getDateUtc() {\n    const date = new Date();\n    return `${date.getUTCMonth() + 1}_${date.getUTCDate()}_${date.getUTCFullYear()}`;\n  }\n\n  getOperationData() {\n    const payload = {\n      $add: {\n\n      },\n      $ignore_time: true\n    };\n\n    payload[`$add`][`pageview_${this.getDateUtc()}`] = 1;\n\n    return payload;\n  }\n}\n\nexport default class MetricsManager {\n  private isFeatureEnabled: boolean;\n  private mixpanelReportingToken: string;\n\n  constructor(isFeatureEnabled: boolean, mixpanelReportingToken: string) {\n    this.isFeatureEnabled = isFeatureEnabled;\n    this.mixpanelReportingToken = mixpanelReportingToken;\n  }\n\n  static get MIXPANEL_REPORTING_URL() {\n    return 'https://api.mixpanel.com';\n  }\n\n  isEnabled(): boolean {\n    return this.isFeatureEnabled && !!this.mixpanelReportingToken;\n  }\n\n  reportEvent(event: MetricEvent) {\n    if (!this.isEnabled()) {\n      return Promise.resolve(null);\n    }\n\n    const queryParamsData = {\n      event: event.getEventName(),\n      properties: objectAssign({}, {\n        token: this.mixpanelReportingToken,\n      }, event.getPropertiesAsJson())\n    };\n    const queryParams = base64Encode(JSON.stringify(queryParamsData));\n\n    const requestOptions = {\n      method: 'GET',\n      headers: new Headers(),\n      cache: 'no-cache',\n    };\n\n    return fetch(`${MetricsManager.MIXPANEL_REPORTING_URL}/track/?data=${queryParams}`, requestOptions);\n  }\n\n  reportEngagement(engagement: MetricEngagement) {\n    if (!this.isEnabled()) {\n      return Promise.resolve(null);\n    }\n\n    let queryParamsData = {\n      $token: this.mixpanelReportingToken,\n      $distinct_id: engagement.getProfileName(),\n    };\n    queryParamsData = objectAssign({}, queryParamsData, engagement.getOperationData());\n    const queryParams = base64Encode(JSON.stringify(queryParamsData));\n\n    const requestOptions = {\n      method: 'GET',\n      headers: new Headers(),\n      cache: 'no-cache',\n    };\n\n    return fetch(`${MetricsManager.MIXPANEL_REPORTING_URL}/engage/?data=${queryParams}`, requestOptions);\n  }\n\n  shouldCollectPageView() {\n    const date = new Date();\n    return (\n      (date.getUTCMonth() + 1) <= 2 &&\n      date.getUTCDate() <= 10 &&\n      date.getUTCFullYear() <= 2018 &&\n      (date.getUTCMonth() + 1) >= 2 &&\n      date.getUTCDate() >= 8 &&\n      date.getUTCFullYear() >= 2018\n    );\n  }\n\n  reportPageView() {\n    // Collect for a couple days from feature release date\n    if (this.shouldCollectPageView()) {\n      this.reportEngagement(new PageViewMetricEngagement());\n    }\n  }\n}\n","import Environment from './Environment';\nimport { getSdkLoadCount, incrementSdkLoadCount, isPushNotificationsSupported } from './utils';\nimport * as log from 'loglevel';\nimport SdkEnvironment from './managers/SdkEnvironment';\nimport { WindowEnvironmentKind } from './models/WindowEnvironmentKind';\n\nexport function oneSignalSdkInit() {\n  if (Environment.isBrowser()) {\n    incrementSdkLoadCount();\n    if (getSdkLoadCount() > 1) {\n      log.warn(`OneSignal: The web push SDK is included more than once. For optimal performance, please include our ` +\n        `SDK only once on your page.`);\n      log.debug(`OneSignal: Exiting from SDK initialization to prevent double-initialization errors. ` +\n        `Occurred ${getSdkLoadCount()} times.`);\n    } else {\n      // We're running in the host page, iFrame of the host page, or popup window\n      // Load OneSignal's web SDK\n      if (typeof OneSignal !== \"undefined\")\n        var predefinedOneSignalPushes = OneSignal;\n\n      if (isPushNotificationsSupported()) {\n        (window as any).OneSignal = require('./OneSignal').default;\n      } else {\n        log.debug('OneSignal: Push notifications are not supported. A stubbed version of the SDK will be initialized.');\n\n        (window as any).OneSignal = require('./OneSignalStub').default;\n      }\n\n      if (predefinedOneSignalPushes)\n        for (var i = 0; i < predefinedOneSignalPushes.length; i++)\n          OneSignal.push(predefinedOneSignalPushes[i]);\n    }\n  }\n  else if (SdkEnvironment.getWindowEnv() === WindowEnvironmentKind.ServiceWorker) {\n    // We're running as the service worker\n    (self as any).OneSignal = require('./service-worker/ServiceWorker').default;\n  }\n}\n\noneSignalSdkInit();\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _extendableBuiltin(cls) {\n  function ExtendableBuiltin() {\n    cls.apply(this, arguments);\n  }\n\n  ExtendableBuiltin.prototype = Object.create(cls.prototype, {\n    constructor: {\n      value: cls,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(ExtendableBuiltin, cls);\n  } else {\n    ExtendableBuiltin.__proto__ = cls;\n  }\n\n  return ExtendableBuiltin;\n}\n\nvar ExtendableError = function (_extendableBuiltin2) {\n  _inherits(ExtendableError, _extendableBuiltin2);\n\n  function ExtendableError() {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n    _classCallCheck(this, ExtendableError);\n\n    // extending Error is weird and does not propagate `message`\n    var _this = _possibleConstructorReturn(this, (ExtendableError.__proto__ || Object.getPrototypeOf(ExtendableError)).call(this, message));\n\n    Object.defineProperty(_this, 'message', {\n      configurable: true,\n      enumerable: false,\n      value: message,\n      writable: true\n    });\n\n    Object.defineProperty(_this, 'name', {\n      configurable: true,\n      enumerable: false,\n      value: _this.constructor.name,\n      writable: true\n    });\n\n    if (Error.hasOwnProperty('captureStackTrace')) {\n      Error.captureStackTrace(_this, _this.constructor);\n      return _possibleConstructorReturn(_this);\n    }\n\n    Object.defineProperty(_this, 'stack', {\n      configurable: true,\n      enumerable: false,\n      value: new Error(message).stack,\n      writable: true\n    });\n    return _this;\n  }\n\n  return ExtendableError;\n}(_extendableBuiltin(Error));\n\nexports.default = ExtendableError;\nmodule.exports = exports['default'];\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/es6-error/lib/index.js\n// module id = 62\n// module chunks = 0","module.exports = function() {\r\n\tthrow new Error(\"define cannot be used indirect\");\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/amd-define.js\n// module id = 63\n// module chunks = 0","import OneSignalError from \"./OneSignalError\";\n\n\nexport default class TimeoutError extends OneSignalError {\n  constructor(public message: string = \"The asynchronous operation has timed out.\") {\n    super(message);\n  }\n}\n","import {Notification} from \"./Notification\";\r\nimport {Timestamp} from \"./Timestamp\";\r\nclass AppState {\r\n    defaultNotificationUrl: string;\r\n    defaultNotificationTitle: string;\r\n\r\n    /**\r\n     * Whether the user is currently completely subscribed, including not opted out. Database cached version of\r\n     * isPushNotificationsEnabled().\r\n     */\r\n    lastKnownPushEnabled: boolean;\r\n\r\n    clickedNotifications: Map<URL, [Notification, Timestamp]>\r\n}\r\n\r\nexport { AppState };","import { Notification } from \"./Notification\";\r\n\r\n\r\nclass ServiceWorkerState {\r\n  workerVersion: number;\r\n  updaterWorkerVersion: number;\r\n  backupNotification: Notification;\r\n}\r\n\r\nexport { ServiceWorkerState };","/**\n * Module exports.\n */\n\nmodule.exports = jsonp;\n\n/**\n * Callback index.\n */\n\nvar count = 0;\n\n/**\n * Noop function.\n */\n\nfunction noop(){}\n\n/**\n * JSONP handler\n *\n * Options:\n *  - param {String} qs parameter (`callback`)\n *  - prefix {String} qs parameter (`__jp`)\n *  - name {String} qs parameter (`prefix` + incr)\n *  - timeout {Number} how long after a timeout error is emitted (`60000`)\n *\n * @param {String} url\n * @param {Object|Function} optional options / callback\n * @param {Function} optional callback\n */\n\nfunction jsonp(url, opts, fn){\n  if ('function' == typeof opts) {\n    fn = opts;\n    opts = {};\n  }\n  if (!opts) opts = {};\n\n  var prefix = opts.prefix || '__jp';\n\n  // use the callback name that was passed if one was provided.\n  // otherwise generate a unique name by incrementing our counter.\n  var id = opts.name || (prefix + (count++));\n\n  var param = opts.param || 'callback';\n  var timeout = null != opts.timeout ? opts.timeout : 60000;\n  var enc = encodeURIComponent;\n  var target = document.getElementsByTagName('script')[0] || document.head;\n  var script;\n  var timer;\n\n\n  if (timeout) {\n    timer = setTimeout(function(){\n      cleanup();\n      if (fn) fn(new Error('Timeout'));\n    }, timeout);\n  }\n\n  function cleanup(){\n    if (script.parentNode) script.parentNode.removeChild(script);\n    window[id] = noop;\n    if (timer) clearTimeout(timer);\n  }\n\n  function cancel(){\n    if (window[id]) {\n      cleanup();\n    }\n  }\n\n  window[id] = function(data){\n    cleanup();\n    if (fn) fn(null, data);\n  };\n\n  // add qs component\n  url += (~url.indexOf('?') ? '&' : '?') + param + '=' + enc(id);\n  url = url.replace('?&', '?');\n\n  // create script\n  script = document.createElement('script');\n  script.src = url;\n  target.parentNode.insertBefore(script, target);\n\n  return cancel;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/jsonp/index.js\n// module id = 67\n// module chunks = 0","import OneSignalError from \"./OneSignalError\";\n\n\nexport enum OneSignalApiErrorKind {\n  MissingAppId\n}\n\nexport class OneSignalApiError extends OneSignalError {\n  reason: string;\n\n  constructor(reason: OneSignalApiErrorKind) {\n    switch (reason) {\n      case OneSignalApiErrorKind.MissingAppId:\n        super('The API call is missing an app ID.');\n        break;\n    }\n  }\n}\n","import ActiveAnimatedElement from './ActiveAnimatedElement';\nimport AnimatedElement from './AnimatedElement';\n\n\nexport default class Badge extends ActiveAnimatedElement {\n\n  constructor() {\n    super('.onesignal-bell-launcher-badge', 'onesignal-bell-launcher-badge-opened', null, 'onesignal-bell-launcher-badge-active', null, 'hidden');\n  }\n\n  increment(): void {\n    // If it IS a number (is not not a number)\n    if (!isNaN(this.content as any)) {\n      let badgeNumber = +this.content; // Coerce to int\n      badgeNumber += 1;\n      this.content = badgeNumber.toString();\n    }\n  }\n\n  show(): Promise<AnimatedElement> {\n    const promise = super.show();\n    OneSignal.notifyButton.setCustomColorsIfSpecified();\n    return promise;\n  }\n\n  decrement() {\n    // If it IS a number (is not not a number)\n    if (!isNaN(this.content as any)) {\n      let badgeNumber = +this.content; // Coerce to int\n      badgeNumber -= 1;\n      if (badgeNumber > 0)\n        this.content = badgeNumber.toString();\n      else\n        this.content = '';\n    }\n  }\n}\n","import {removeDomElement, addDomElement} from \"../utils\";\nimport Event from \"../Event\";\nimport ActiveAnimatedElement from \"./ActiveAnimatedElement\";\nimport Bell from \"./Bell\";\nimport LimitStore from \"../LimitStore\";\nimport Message from \"./Message\";\nimport SubscriptionHelper from \"../helpers/SubscriptionHelper\";\n\n\nexport default class Button extends ActiveAnimatedElement {\n\n  public events: any;\n  public bell: any;\n\n  constructor(bell) {\n    super('.onesignal-bell-launcher-button', null, null, 'onesignal-bell-launcher-button-active', null, 'shown', '');\n\n    this.bell = bell;\n    this.events = {\n      mouse: 'bell.launcher.button.mouse'\n    };\n\n    this.element.addEventListener('touchstart', () => {\n      this.onHovering();\n      this.onTap();\n    }, { passive: true });\n\n    this.element.addEventListener('mouseenter', () => {\n      this.onHovering();\n    });\n\n    this.element.addEventListener('mouseleave', () => {\n      this.onHovered();\n    });\n    this.element.addEventListener('touchmove', () => {\n      this.onHovered();\n    }, { passive: true });\n\n    this.element.addEventListener('mousedown', () => {\n      this.onTap();\n    });\n\n    this.element.addEventListener('mouseup', () => {\n      this.onEndTap();\n    });\n\n    this.element.addEventListener('click', () => {\n      this.onHovered();\n      this.onClick();\n    });\n  }\n\n  onHovering() {\n    if (LimitStore.isEmpty(this.events.mouse) || LimitStore.getLast(this.events.mouse) === 'out') {\n      Event.trigger(Bell.EVENTS.HOVERING);\n    }\n    LimitStore.put(this.events.mouse, 'over');\n  }\n\n  onHovered() {\n    LimitStore.put(this.events.mouse, 'out');\n    Event.trigger(Bell.EVENTS.HOVERED);\n  }\n\n  onTap() {\n    this.pulse();\n    this.activate();\n    this.bell.badge.activate();\n  }\n\n  onEndTap() {\n    this.inactivate();\n    this.bell.badge.inactivate();\n  }\n\n  onClick() {\n    Event.trigger(Bell.EVENTS.BELL_CLICK);\n    Event.trigger(Bell.EVENTS.LAUNCHER_CLICK);\n\n    if (this.bell.message.shown && this.bell.message.contentType == Message.TYPES.MESSAGE) {\n      // A message is being shown, it'll disappear soon\n      return;\n    }\n\n    var optedOut = LimitStore.getLast('subscription.optedOut');\n    if (this.bell.unsubscribed) {\n      if (optedOut) {\n        // The user is manually opted out, but still \"really\" subscribed\n        this.bell.launcher.activateIfInactive().then(() => {\n          this.bell.showDialogProcedure();\n        });\n      }\n      else {\n        // The user is actually subscribed, register him for notifications\n        OneSignal.registerForPushNotifications();\n        this.bell._ignoreSubscriptionState = true;\n        OneSignal.once(OneSignal.EVENTS.SUBSCRIPTION_CHANGED, () => {\n          this.bell.message.display(Message.TYPES.MESSAGE, this.bell.text['message.action.subscribed'], Message.TIMEOUT)\n            .then(() => {\n              this.bell._ignoreSubscriptionState = false;\n              this.bell.launcher.inactivate();\n            });\n        });\n      }\n    }\n    else if (this.bell.subscribed) {\n      this.bell.launcher.activateIfInactive().then(() => {\n        this.bell.showDialogProcedure();\n      });\n    }\n    else if (this.bell.blocked) {\n      if (SubscriptionHelper.isUsingSubscriptionWorkaround()) {\n        // Show the HTTP popup so users can re-allow notifications\n        OneSignal.registerForPushNotifications();\n      } else {\n        this.bell.launcher.activateIfInactive().then(() => {\n          this.bell.showDialogProcedure();\n        });\n      }\n    }\n    return this.bell.message.hide();\n  }\n\n  pulse() {\n    removeDomElement('.pulse-ring');\n    addDomElement(this.element, 'beforeend', '<div class=\"pulse-ring\"></div>');\n    this.bell.setCustomColorsIfSpecified();\n  }\n}\n","import * as Browser from 'bowser';\n\nimport Event from '../Event';\nimport SdkEnvironment from '../managers/SdkEnvironment';\nimport { addDomElement, clearDomElementChildren, isChromeLikeBrowser } from '../utils';\nimport AnimatedElement from './AnimatedElement';\nimport Bell from './Bell';\n\n\n\nexport default class Dialog extends AnimatedElement {\n\n  public bell: any;\n  public subscribeButtonId: any;\n  public unsubscribeButtonId: any;\n  public notificationIcons: any;\n\n  constructor(bell) {\n    super('.onesignal-bell-launcher-dialog', 'onesignal-bell-launcher-dialog-opened', null, 'hidden', ['opacity', 'transform'], '.onesignal-bell-launcher-dialog-body');\n\n    this.bell = bell;\n    this.subscribeButtonId = '#onesignal-bell-container .onesignal-bell-launcher #subscribe-button';\n    this.unsubscribeButtonId = '#onesignal-bell-container .onesignal-bell-launcher #unsubscribe-button';\n    this.notificationIcons = null;\n  }\n\n  getPlatformNotificationIcon() {\n    if (this.notificationIcons) {\n      if (isChromeLikeBrowser() || Browser.firefox || Browser.msedge) {\n        return this.notificationIcons.chrome || this.notificationIcons.safari;\n      }\n      else if (Browser.safari) {\n        return this.notificationIcons.safari || this.notificationIcons.chrome;\n      }\n    }\n    else return null;\n  }\n\n  show() {\n    return this.updateBellLauncherDialogBody()\n      .then(() => super.show());\n  }\n\n  get subscribeButtonSelectorId() {\n    return 'subscribe-button';\n  }\n\n  get unsubscribeButtonSelectorId() {\n    return 'unsubscribe-button';\n  }\n\n  get subscribeButton() {\n    return this.element.querySelector('#' + this.subscribeButtonSelectorId);\n  }\n\n  get unsubscribeButton() {\n    return this.element.querySelector('#' + this.unsubscribeButtonSelectorId);\n  }\n\n  updateBellLauncherDialogBody() {\n    return OneSignal.getSubscription().then((currentSetSubscription) => {\n      clearDomElementChildren(document.querySelector(this.nestedContentSelector));\n      let contents = 'Nothing to show.';\n\n      var footer = '';\n      if (this.bell.options.showCredit) {\n        footer = `<div class=\"divider\"></div><div class=\"kickback\">Powered by <a href=\"https://onesignal.com\" class=\"kickback\" target=\"_blank\">OneSignal</a></div>`;\n      }\n\n      if (this.bell.state === Bell.STATES.SUBSCRIBED && currentSetSubscription === true ||\n        this.bell.state === Bell.STATES.UNSUBSCRIBED && currentSetSubscription === false) {\n\n        let notificationIconHtml = '';\n        let imageUrl = this.getPlatformNotificationIcon();\n        if (imageUrl) {\n          notificationIconHtml = `<div class=\"push-notification-icon\"><img src=\"${imageUrl}\"></div>`\n        } else {\n          notificationIconHtml = `<div class=\"push-notification-icon push-notification-icon-default\"></div>`\n        }\n\n        let buttonHtml = '';\n        if (this.bell.state !== Bell.STATES.SUBSCRIBED)\n          buttonHtml = `<button type=\"button\" class=\"action\" id=\"${this.subscribeButtonSelectorId}\">${this.bell.text['dialog.main.button.subscribe']}</button>`;\n        else\n          buttonHtml = `<button type=\"button\" class=\"action\" id=\"${this.unsubscribeButtonSelectorId}\">${this.bell.text['dialog.main.button.unsubscribe']}</button>`;\n\n        contents = `<h1>${this.bell.text['dialog.main.title']}</h1><div class=\"divider\"></div><div class=\"push-notification\">${notificationIconHtml}<div class=\"push-notification-text-container\"><div class=\"push-notification-text push-notification-text-short\"></div><div class=\"push-notification-text\"></div><div class=\"push-notification-text push-notification-text-medium\"></div><div class=\"push-notification-text\"></div><div class=\"push-notification-text push-notification-text-medium\"></div></div></div><div class=\"action-container\">${buttonHtml}</div>${footer}`;\n      }\n      else if (this.bell.state === Bell.STATES.BLOCKED) {\n        let imageUrl = null;\n        if (Browser.chrome) {\n          if (!Browser.mobile && !Browser.tablet) {\n            imageUrl = SdkEnvironment.getOneSignalApiUrl().origin + '/bell/chrome-unblock.jpg';\n          }\n        }\n        else if (Browser.firefox)\n          imageUrl = SdkEnvironment.getOneSignalApiUrl().origin + '/bell/firefox-unblock.jpg';\n        else if (Browser.safari)\n          imageUrl = SdkEnvironment.getOneSignalApiUrl().origin + '/bell/safari-unblock.jpg';\n\n        let instructionsHtml = '';\n        if (imageUrl) {\n          instructionsHtml = `<a href=\"${imageUrl}\" target=\"_blank\"><img src=\"${imageUrl}\"></a></div>`;\n        }\n\n        if ((Browser.mobile || Browser.tablet) && Browser.chrome) {\n          instructionsHtml = `<ol><li>Access <strong>Settings</strong> by tapping the three menu dots <strong>⋮</strong></li><li>Click <strong>Site settings</strong> under Advanced.</li><li>Click <strong>Notifications</strong>.</li><li>Find and click this entry for this website.</li><li>Click <strong>Notifications</strong> and set it to <strong>Allow</strong>.</li></ol>`;\n        }\n        contents = `<h1>${this.bell.text['dialog.blocked.title']}</h1><div class=\"divider\"></div><div class=\"instructions\"><p>${this.bell.text['dialog.blocked.message']}</p>${instructionsHtml}</div>${footer}`;\n      }\n      addDomElement(document.querySelector(this.nestedContentSelector), 'beforeend', contents);\n      if (this.subscribeButton) {\n        this.subscribeButton.addEventListener('click', () => {\n          /*\n            The welcome notification should only be shown if the user is\n            subscribing for the first time and resubscribing via the notify\n            button.\n\n            If permission is already granted, __doNotShowWelcomeNotification is\n            set to true to prevent showing a notification, but we actually want\n            a notification shown in this resubscription case.\n           */\n          OneSignal.__doNotShowWelcomeNotification = false;\n          Event.trigger(Bell.EVENTS.SUBSCRIBE_CLICK);\n        });\n      }\n      if (this.unsubscribeButton) {\n        this.unsubscribeButton.addEventListener('click', () => Event.trigger(Bell.EVENTS.UNSUBSCRIBE_CLICK));\n      }\n      this.bell.setCustomColorsIfSpecified();\n    });\n  }\n}\n","import * as log from 'loglevel';\n\nimport { InvalidStateError, InvalidStateReason } from '../errors/InvalidStateError';\nimport { addCssClass, contains, hasCssClass, nothing, once, removeCssClass } from '../utils';\nimport ActiveAnimatedElement from './ActiveAnimatedElement';\n\n\nexport default class Launcher extends ActiveAnimatedElement {\n\n  public bell: any;\n  public wasInactive: boolean;\n\n  constructor(bell) {\n    super('.onesignal-bell-launcher', 'onesignal-bell-launcher-active', null, null, 'onesignal-bell-launcher-inactive', 'hidden', 'active');\n\n    this.bell = bell;\n    this.wasInactive = false;\n  }\n\n  async resize(size) {\n    if (!this.element) {\n      // Notify button doesn't exist\n      throw new InvalidStateError(InvalidStateReason.MissingDomElement);\n    }\n\n    // If the size is the same, do nothing and resolve an empty promise\n    if ((size === 'small' && hasCssClass(this.element, 'onesignal-bell-launcher-sm')) ||\n        (size === 'medium' && hasCssClass(this.element, 'onesignal-bell-launcher-md')) ||\n        (size === 'large' && hasCssClass(this.element, 'onesignal-bell-launcher-lg'))) {\n      return Promise.resolve(this);\n    }\n    removeCssClass(this.element, 'onesignal-bell-launcher-sm');\n    removeCssClass(this.element, 'onesignal-bell-launcher-md');\n    removeCssClass(this.element, 'onesignal-bell-launcher-lg');\n    if (size === 'small') {\n      addCssClass(this.element, 'onesignal-bell-launcher-sm');\n    }\n    else if (size === 'medium') {\n      addCssClass(this.element, 'onesignal-bell-launcher-md');\n    }\n    else if (size === 'large') {\n      addCssClass(this.element, 'onesignal-bell-launcher-lg');\n    }\n    else {\n      throw new Error('Invalid OneSignal bell size ' + size);\n    }\n    if (!this.shown) {\n      return this;\n    }\n    else {\n      return await new Promise((resolve) => {\n        // Once the launcher has finished shrinking down\n        if (this.targetTransitionEvents.length == 0) {\n          return resolve(this);\n        } else {\n          var timerId = setTimeout(() => {\n            log.debug(`Launcher did not completely resize (state: ${this.state}, activeState: ${this.activeState}).`)\n          }, this.transitionCheckTimeout);\n          once(this.element, 'transitionend', (event, destroyListenerFn) => {\n            if (event.target === this.element &&\n              contains(this.targetTransitionEvents, event.propertyName)) {\n              clearTimeout(timerId);\n              // Uninstall the event listener for transitionend\n              destroyListenerFn();\n              return resolve(this);\n            }\n          }, true);\n        }\n      });\n    }\n  }\n\n  activateIfInactive() {\n    if (this.inactive) {\n      this.wasInactive = true;\n      return this.activate();\n    }\n    else return nothing();\n  }\n\n  inactivateIfWasInactive() {\n    if (this.wasInactive) {\n      this.wasInactive = false;\n      return this.inactivate();\n    }\n    else return nothing();\n  }\n\n  clearIfWasInactive() {\n    this.wasInactive = false;\n  }\n\n  inactivate() {\n    return this.bell.message.hide()\n      .then(() => {\n        if (this.bell.badge.content.length > 0) {\n          return this.bell.badge.hide()\n            .then(() => Promise.all([super.inactivate(), this.resize('small')]))\n            .then(() => this.bell.badge.show());\n        }\n        else {\n          return Promise.all([super.inactivate(), this.resize('small')]);\n        }\n      });\n  }\n\n  activate() {\n    if (this.bell.badge.content.length > 0) {\n      return this.bell.badge.hide()\n        .then(() => Promise.all([super.activate(), this.resize(this.bell.options.size)]));\n    }\n    else {\n      return Promise.all([super.activate(), this.resize(this.bell.options.size)]);\n    }\n  }\n}\n","import OneSignalError from \"./OneSignalError\";\n\n\nexport enum NotSubscribedReason {\n  Unknown,\n  NoDeviceId,\n  NoEmailSet,\n  OptedOut\n}\n\nexport class NotSubscribedError extends OneSignalError {\n  reason: string;\n\n  constructor(reason: NotSubscribedReason) {\n    switch (reason) {\n      case NotSubscribedReason.Unknown || NotSubscribedReason.NoDeviceId:\n        super('This operation can only be performed after the user is subscribed.');\n        break;\n      case NotSubscribedReason.NoEmailSet:\n        super('No email is currently set.');\n        break;\n      case NotSubscribedReason.OptedOut:\n        super('The user has manually opted out of receiving of notifications. This operation can only be performed after the user is fully resubscribed.');\n        break;\n    }\n    this.reason = NotSubscribedReason[reason];\n  }\n}\n","import * as log from 'loglevel';\n\nimport Event from '../Event';\nimport LegacyManager from '../managers/LegacyManager';\nimport SdkEnvironment from '../managers/SdkEnvironment';\nimport { WindowEnvironmentKind } from '../models/WindowEnvironmentKind';\nimport ProxyFrame from '../modules/frames/ProxyFrame';\nimport SubscriptionModal from '../modules/frames/SubscriptionModal';\nimport SubscriptionPopup from '../modules/frames/SubscriptionPopup';\nimport { getConsoleStyle } from '../utils';\nimport SubscriptionHelper from './SubscriptionHelper';\n\ndeclare var OneSignal: any;\n\n\nexport default class HttpHelper {\n\n  // Http only - Only called from iframe's init.js\n  static async initHttp(options) {\n    log.debug(`Called %cinitHttp(${JSON.stringify(options, null, 4)})`, getConsoleStyle('code'));\n\n    switch (SdkEnvironment.getWindowEnv()) {\n      case WindowEnvironmentKind.OneSignalProxyFrame:\n        OneSignal.proxyFrame = new ProxyFrame(options);\n        await OneSignal.proxyFrame.initialize();\n        /**\n         * Our Rails-side subscription popup/modal depends on\n         * OneSignal.iframePostmam, OneSignal.popupPostmam, and\n         * OneSignal.modalPostmam, which don't exist anymore.\n         */\n        LegacyManager.ensureBackwardsCompatibility(OneSignal);\n        break;\n      case WindowEnvironmentKind.OneSignalSubscriptionPopup:\n        OneSignal.subscriptionPopup = new SubscriptionPopup(options);\n        await OneSignal.subscriptionPopup.initialize();\n        /**\n         * Our Rails-side subscription popup/modal depends on\n         * OneSignal.iframePostmam, OneSignal.popupPostmam, and\n         * OneSignal.modalPostmam, which don't exist anymore.\n         */\n        LegacyManager.ensureBackwardsCompatibility(OneSignal);\n        Event.trigger('httpInitialize');\n        break;\n      case WindowEnvironmentKind.OneSignalSubscriptionModal:\n        OneSignal.subscriptionModal = new SubscriptionModal(options);\n\n        /*\n          WARNING: Do not await on modal initialization; the modal uses direct\n          postmessage and does not establish a \"connection\" to wait on\n        */\n        /*\n          WARNING: The establishCrossOriginMessaging() statement is necessary.\n          The common base class implementation of initialize() does an\n          asynchronous download of settings, but the modal needs the 'messenger'\n          variable (created by calling establishCrossOriginmessaging()) to exist\n          immediately. The hacky way to solve this for now is to force this part\n          of the initialization earlier.\n        */\n        OneSignal.subscriptionModal.establishCrossOriginMessaging();\n        OneSignal.subscriptionModal.initialize();\n\n        /* Our Rails-side subscription popup/modal depends on\n         * OneSignal.iframePostmam, OneSignal.popupPostmam, and\n         * OneSignal.modalPostmam, which don't exist anymore.\n         */\n        LegacyManager.ensureBackwardsCompatibility(OneSignal);\n        Event.trigger('httpInitialize');\n        break;\n      default:\n        log.error(\"Unsupported HTTP initialization branch.\");\n        break;\n    }\n  }\n}\n","import * as log from 'loglevel';\nimport * as objectAssign from 'object-assign';\n\nimport { InvalidStateReason } from '../../errors/InvalidStateError';\nimport Event from '../../Event';\nimport HttpHelper from '../../helpers/HttpHelper';\nimport InitHelper from '../../helpers/InitHelper';\nimport MainHelper from '../../helpers/MainHelper';\nimport TestHelper from '../../helpers/TestHelper';\nimport SdkEnvironment from '../../managers/SdkEnvironment';\nimport { MessengerMessageEvent } from '../../models/MessengerMessageEvent';\nimport Postmam from '../../Postmam';\nimport Database from '../../services/Database';\nimport { unsubscribeFromPush } from '../../utils';\nimport RemoteFrame from './RemoteFrame';\nimport Context from '../../models/Context';\n\n/**\n * The actual OneSignal proxy frame contents / implementation, that is loaded\n * into the iFrame URL as subdomain.onesignal.com/webPushIFrame or\n * subdomain.os.tc/webPushIFrame. *\n */\nexport default class ProxyFrame extends RemoteFrame {\n  public messenger: Postmam;\n\n  /**\n   * Loads the messenger on the iFrame to communicate with the host page and\n   * assigns init options to an iFrame-only initialization of OneSignal.\n   *\n   * Our main host page will wait for all iFrame scripts to complete since the\n   * host page uses the iFrame onload event to begin sending handshake messages\n   * to the iFrame.\n   *\n   * There is no load timeout here; the iFrame initializes it scripts and waits\n   * forever for the first handshake message.\n   */\n  initialize(): Promise<void> {\n    const promise = super.initialize();\n    Event.trigger('httpInitialize');\n    return promise;\n  }\n\n  establishCrossOriginMessaging() {\n    if (this.messenger) {\n      this.messenger.destroy();\n    }\n    this.messenger = new Postmam(window, this.options.origin, this.options.origin);\n    this.messenger.on(OneSignal.POSTMAM_COMMANDS.CONNECTED, this.onMessengerConnect.bind(this));\n    this.messenger.on(OneSignal.POSTMAM_COMMANDS.IFRAME_POPUP_INITIALIZE, this.onProxyFrameInitializing.bind(this));\n    this.messenger.on(OneSignal.POSTMAM_COMMANDS.REMOTE_NOTIFICATION_PERMISSION,\n      this.onRemoteNotificationPermission.bind(this));\n    this.messenger.on(OneSignal.POSTMAM_COMMANDS.REMOTE_DATABASE_GET, this.onRemoteDatabaseGet.bind(this));\n    this.messenger.on(OneSignal.POSTMAM_COMMANDS.REMOTE_DATABASE_PUT, this.onRemoteDatabasePut.bind(this));\n    this.messenger.on(OneSignal.POSTMAM_COMMANDS.REMOTE_DATABASE_REMOVE, this.onRemoteDatabaseRemove.bind(this));\n    this.messenger.on(OneSignal.POSTMAM_COMMANDS.UNSUBSCRIBE_FROM_PUSH, this.onUnsubscribeFromPush.bind(this));\n    this.messenger.on(OneSignal.POSTMAM_COMMANDS.MARK_PROMPT_DISMISSED, this.onMarkPromptDismissed.bind(this));\n    this.messenger.on(OneSignal.POSTMAM_COMMANDS.IS_SUBSCRIBED, this.onIsSubscribed.bind(this));\n    this.messenger.on(OneSignal.POSTMAM_COMMANDS.UNSUBSCRIBE_PROXY_FRAME, this.onUnsubscribeProxyFrame.bind(this));\n    this.messenger.on(OneSignal.POSTMAM_COMMANDS.SERVICE_WORKER_STATE, this.onServiceWorkerState.bind(this));\n    this.messenger.on(OneSignal.POSTMAM_COMMANDS.GET_WORKER_VERSION, this.onWorkerVersion.bind(this));\n    this.messenger.on(OneSignal.POSTMAM_COMMANDS.SUBSCRIPTION_EXPIRATION_STATE,\n      this.onSubscriptionExpirationState.bind(this));\n    this.messenger.on(OneSignal.POSTMAM_COMMANDS.PROCESS_EXPIRING_SUBSCRIPTIONS,\n      this.onProcessExpiringSubscriptions.bind(this));\n    this.messenger.on(OneSignal.POSTMAM_COMMANDS.GET_SUBSCRIPTION_STATE,\n      this.onGetSubscriptionState.bind(this));\n    this.messenger.listen();\n  }\n\n  retriggerRemoteEvent(eventName: string, eventData: any) {\n    this.messenger.message(OneSignal.POSTMAM_COMMANDS.REMOTE_RETRIGGER_EVENT, {eventName, eventData});\n  }\n\n  async onMessengerConnect(_: MessengerMessageEvent) {\n    log.debug(`(${SdkEnvironment.getWindowEnv().toString()}) Successfully established cross-origin communication.`);\n    this.finishInitialization();\n    return false;\n  }\n\n  async onProxyFrameInitializing(message: MessengerMessageEvent) {\n    log.info(`(${SdkEnvironment.getWindowEnv().toString()}) The iFrame has just received initOptions from the host page!`);\n\n    OneSignal.config = objectAssign(message.data.hostInitOptions, OneSignal.config, {\n      pageUrl: message.data.pageUrl,\n      pageTitle: message.data.pageTitle\n    });\n\n    InitHelper.installNativePromptPermissionChangedHook();\n\n    // 3/30/16: For HTTP sites, put the host page URL as default URL if one doesn't exist already\n    const defaultUrl = await Database.get('Options', 'defaultUrl');\n    if (!defaultUrl) {\n      await Database.put('Options', {key: 'defaultUrl', value: new URL(OneSignal.config.pageUrl).origin});\n    }\n\n    /**\n     * When a user is on http://example.com and receives a notification, we want to open a new window only if the\n     * notification's URL is different from http://example.com. The service worker, which only controls\n     * subdomain.onesignal.com, doesn't know that the host URL is http://example.com. Although defaultUrl above\n     * sets the HTTP's origin, this can be modified if users call setDefaultTitle(). lastKnownHostUrl therefore\n     * stores the last visited full page URL.\n     */\n    await Database.put('Options', { key: 'lastKnownHostUrl', value: OneSignal.config.pageUrl });\n    await InitHelper.initSaveState(OneSignal.config.pageTitle);\n    await InitHelper.storeInitialValues();\n    await InitHelper.saveInitOptions();\n\n    if (navigator.serviceWorker && window.location.protocol === 'https:') {\n      try {\n        MainHelper.establishServiceWorkerChannel();\n      } catch (e) {\n        log.error(`Error interacting with Service Worker inside an HTTP-hosted iFrame:`, e);\n      }\n    }\n\n    message.reply(OneSignal.POSTMAM_COMMANDS.REMOTE_OPERATION_COMPLETE);\n  }\n\n  async onRemoteNotificationPermission(message: MessengerMessageEvent) {\n    const context: Context = OneSignal.context;\n    const permission = await context.permissionManager.getReportedNotificationPermission(context.appConfig.safariWebId);\n    message.reply(permission);\n    return false;\n  }\n\n  async onRemoteDatabaseGet(message: MessengerMessageEvent) {\n    // retrievals is an array of key-value pairs e.g. [{table: 'Ids', keys:\n    // 'someId'}, {table: 'Ids', keys: 'someId'}]\n    const retrievals: Array<{table, key}> = message.data;\n    const retrievalOpPromises = [];\n    for (let retrieval of retrievals) {\n      const {table, key} = retrieval;\n      retrievalOpPromises.push(Database.get(table, key));\n    }\n    const results = await Promise.all(retrievalOpPromises);\n    message.reply(results);\n    return false;\n  }\n\n  async onRemoteDatabasePut(message: MessengerMessageEvent) {\n    // insertions is an array of key-value pairs e.g. [table: {'Options': keypath: {key: persistNotification, value: '...'}}, {table: 'Ids', keypath: {type: 'userId', id: '...'}]\n    // It's formatted that way because our IndexedDB database is formatted that way\n    const insertions: Array<{table, keypath}> = message.data;\n    let insertionOpPromises = [];\n    for (let insertion of insertions) {\n      let {table, keypath} = insertion;\n      insertionOpPromises.push(Database.put(table, keypath));\n    }\n    await Promise.all(insertionOpPromises);\n    message.reply(OneSignal.POSTMAM_COMMANDS.REMOTE_OPERATION_COMPLETE);\n    return false;\n  }\n\n  async onRemoteDatabaseRemove(message: MessengerMessageEvent) {\n    // removals is an array of key-value pairs e.g. [table: {'Options': keypath: {key: persistNotification, value: '...'}}, {table: 'Ids', keypath: {type: 'userId', id: '...'}]\n    // It's formatted that way because our IndexedDB database is formatted that way\n    const removals: Array<{table, keypath}> = message.data;\n    let removalOpPromises = [];\n    for (let removal of removals) {\n      let {table, keypath} = removal;\n      removalOpPromises.push(Database.remove(table, keypath));\n    }\n    await Promise.all(removalOpPromises);\n    message.reply(OneSignal.POSTMAM_COMMANDS.REMOTE_OPERATION_COMPLETE);\n    return false;\n  }\n\n  async onUnsubscribeFromPush(message: MessengerMessageEvent) {\n    log.debug('(Reposted from iFrame -> Host) User unsubscribed but permission granted. Re-prompting the user for push.');\n    try {\n      await unsubscribeFromPush();\n      message.reply(OneSignal.POSTMAM_COMMANDS.REMOTE_OPERATION_COMPLETE);\n    } catch (e) {\n      log.debug('Failed to unsubscribe from push remotely:', e);\n    }\n  }\n\n  async onMarkPromptDismissed(message: MessengerMessageEvent) {\n    log.debug('(Reposted from iFrame -> Host) Marking prompt as dismissed.');\n    await TestHelper.markHttpsNativePromptDismissed();\n    message.reply(OneSignal.POSTMAM_COMMANDS.REMOTE_OPERATION_COMPLETE);\n    return false;\n  }\n\n  async onIsSubscribed(message: MessengerMessageEvent) {\n    const isSubscribed = await OneSignal.isPushNotificationsEnabled();\n    message.reply(isSubscribed);\n    return false;\n  }\n\n  async onUnsubscribeProxyFrame(message: MessengerMessageEvent) {\n    const isSubscribed = await OneSignal.isPushNotificationsEnabled();\n    if (isSubscribed) {\n      /*\n        Set a flag to prevent a notification from being sent from OneSignal's\n        side. The subscription stored locally on the browser is live and\n        messageable, but we can't query it or unsubscribe from it since we're on\n        an insecure origin. The most we can do is have our SDK delete the stored\n        information to pretend we're not subscribed on both the client SDK side\n        and the server side.\n      */\n      // Set a flag remotely to prevent notifications from being sent\n      await OneSignal.setSubscription(false);\n      // Orphan the subscription by removing data stored about it\n      // This causes our SDK to think we're no longer subscribed on this frame\n      await OneSignal.database.rebuild();\n    }\n    message.reply(OneSignal.POSTMAM_COMMANDS.REMOTE_OPERATION_COMPLETE);\n    return false;\n  }\n\n  async onServiceWorkerState(message: MessengerMessageEvent) {\n    const context: Context = OneSignal.context;\n    const result = await context.serviceWorkerManager.getActiveState();\n    message.reply(result);\n    return false;\n  }\n\n  async onWorkerVersion(message: MessengerMessageEvent) {\n    const context: Context = OneSignal.context;\n    const result = await context.serviceWorkerManager.getWorkerVersion();\n    message.reply(result);\n    return false;\n  }\n\n  async onSubscriptionExpirationState(message: MessengerMessageEvent) {\n    const context: Context = OneSignal.context;\n    const result = await context.subscriptionManager.isSubscriptionExpiring();\n    message.reply(result);\n    return false;\n  }\n\n  async onProcessExpiringSubscriptions(message: MessengerMessageEvent) {\n    const context: Context = OneSignal.context;\n    const result = await InitHelper.processExpiringSubscriptions();\n    message.reply(OneSignal.POSTMAM_COMMANDS.REMOTE_OPERATION_COMPLETE);\n    return false;\n  }\n\n  async onGetSubscriptionState(message: MessengerMessageEvent) {\n    const context: Context = OneSignal.context;\n    const result = await context.subscriptionManager.getSubscriptionState();\n    message.reply(result);\n    return false;\n  }\n}\n","import * as log from 'loglevel';\n\nimport Event from '../../Event';\nimport MainHelper from '../../helpers/MainHelper';\nimport SubscriptionHelper from '../../helpers/SubscriptionHelper';\nimport SdkEnvironment from '../../managers/SdkEnvironment';\nimport { MessengerMessageEvent } from '../../models/MessengerMessageEvent';\nimport Postmam from '../../Postmam';\n\n/**\n * The actual OneSignal proxy frame contents / implementation, that is loaded\n * into the iFrame URL as subdomain.onesignal.com/webPushIFrame or\n * subdomain.os.tc/webPushIFrame. *\n */\nexport default class SubscriptionModalHost implements Disposable {\n  private messenger: Postmam;\n  private appId: string;\n  private modal: HTMLIFrameElement;\n  private url: URL;\n  private registrationOptions: any;\n\n  constructor(appId: string, registrationOptions: any) {\n    this.appId = appId;\n    this.registrationOptions = registrationOptions;\n  }\n\n  /**\n   * Loads the messenger on the iFrame to communicate with the host page and\n   * assigns init options to an iFrame-only initialization of OneSignal.\n   *\n   * Our main host page will wait for all iFrame scripts to complete since the\n   * host page uses the iFrame onload event to begin sending handshake messages\n   * to the iFrame.\n   *\n   * There is no load timeout here; the iFrame initializes it scripts and waits\n   * forever for the first handshake message.\n   */\n  async load(): Promise<void> {\n    const isPushEnabled = await OneSignal.isPushNotificationsEnabled();\n    const notificationPermission = await OneSignal.getNotificationPermission();\n    this.url = SdkEnvironment.getOneSignalApiUrl();\n    this.url.pathname = 'webPushModal';\n    this.url.search = `${MainHelper.getPromptOptionsQueryString()}&id=${this.appId.value}&httpsPrompt=true&pushEnabled=${isPushEnabled}&permissionBlocked=${(notificationPermission as any) === 'denied'}&promptType=modal`;\n    log.info(`Loading iFrame for HTTPS subscription modal at ${this.url.toString()}`);\n\n    this.modal = this.createHiddenSubscriptionDomModal(this.url.toString());\n\n    this.establishCrossOriginMessaging();\n  }\n\n  createHiddenSubscriptionDomModal(url) {\n    let iframeContainer = document.createElement('div');\n    iframeContainer.setAttribute('id', 'OneSignal-iframe-modal');\n    iframeContainer.setAttribute('style', 'display:none !important');\n    iframeContainer.innerHTML = '<div id=\"notif-permission\" style=\"background: rgba(0, 0, 0, 0.7); position: fixed;' +\n      ' top: 0; left: 0; right: 0; bottom: 0; z-index: 3000000000; display: flex;' +\n      ' align-items: center; justify-content: center;\"></div>';\n    document.body.appendChild(iframeContainer);\n\n    let iframeContainerStyle = document.createElement('style');\n    iframeContainerStyle.innerHTML = `@media (max-width: 560px) { .OneSignal-permission-iframe { width: 100%; height: 100%;} }`;\n    document.getElementsByTagName('head')[0].appendChild(iframeContainerStyle);\n\n    let iframe = document.createElement(\"iframe\");\n    iframe.className = \"OneSignal-permission-iframe\";\n    iframe.setAttribute('frameborder', '0');\n    iframe.width = OneSignal._windowWidth.toString();\n    iframe.height = OneSignal._windowHeight.toString();\n    iframe.src = url;\n\n    document.getElementById(\"notif-permission\").appendChild(iframe);\n    return iframe;\n  }\n\n  removeFrame() {\n    const existingInstance = document.querySelector('#OneSignal-iframe-modal');\n    if (existingInstance) {\n      existingInstance.remove();\n    }\n  }\n\n  showSubscriptionDomModal() {\n    const iframeContainer = document.getElementById('OneSignal-iframe-modal');\n    iframeContainer.setAttribute('style', '');\n  }\n\n  establishCrossOriginMessaging() {\n    this.messenger = new Postmam(this.modal, this.url.origin, this.url.origin);\n    this.messenger.startPostMessageReceive();\n\n    this.messenger.once(OneSignal.POSTMAM_COMMANDS.MODAL_LOADED, this.onModalLoaded.bind(this));\n    this.messenger.once(OneSignal.POSTMAM_COMMANDS.MODAL_PROMPT_ACCEPTED, this.onModalAccepted.bind(this));\n    this.messenger.once(OneSignal.POSTMAM_COMMANDS.MODAL_PROMPT_REJECTED, this.onModalRejected.bind(this));\n    this.messenger.once(OneSignal.POSTMAM_COMMANDS.POPUP_CLOSING, this.onModalClosing.bind(this));\n  }\n\n  onModalLoaded(_: MessengerMessageEvent) {\n    this.showSubscriptionDomModal();\n    Event.trigger('modalLoaded');\n  }\n\n  async onModalAccepted(_: MessengerMessageEvent) {\n    log.debug('User accepted the HTTPS modal prompt.', location.origin);\n    OneSignal._sessionInitAlreadyRunning = false;\n    this.dispose();\n    MainHelper.triggerCustomPromptClicked('granted');\n    log.debug('Calling setSubscription(true)');\n    await SubscriptionHelper.registerForPush();\n    await OneSignal.setSubscription(true);\n  }\n\n  onModalRejected(_: MessengerMessageEvent) {\n    log.debug('User rejected the HTTPS modal prompt.');\n    OneSignal._sessionInitAlreadyRunning = false;\n    this.dispose();\n    MainHelper.triggerCustomPromptClicked('denied');\n  }\n\n  onModalClosing(_: MessengerMessageEvent) {\n    log.info('Detected modal is closing.');\n    this.dispose();\n  }\n\n  dispose() {\n    if (this.messenger) {\n      // Removes all events\n      this.messenger.destroy();\n    }\n    this.removeFrame();\n  }\n\n  /**\n   * Shortcut method to messenger.message().\n   */\n  message() {\n    this.messenger.message.apply(this.messenger, arguments);\n  }\n}\n","export enum DeliveryPlatformKind {\n  ChromeLike = 5,\n  Safari = 7,\n  Firefox = 8,\n  Edge = 12,\n}\n","export enum DevicePlatformKind {\n  Mobile = \"mobile\",\n  Tablet = \"tablet\",\n  Desktop = \"desktop\",\n}\n","import * as Browser from 'bowser';\nimport * as log from 'loglevel';\n\nimport Environment from '../Environment';\nimport { InvalidStateError, InvalidStateReason } from '../errors/InvalidStateError';\nimport PushPermissionNotGrantedError from '../errors/PushPermissionNotGrantedError';\nimport { PushPermissionNotGrantedErrorReason } from '../errors/PushPermissionNotGrantedError';\nimport { SdkInitError, SdkInitErrorKind } from '../errors/SdkInitError';\nimport SubscriptionError from '../errors/SubscriptionError';\nimport { SubscriptionErrorReason } from '../errors/SubscriptionError';\nimport Event from '../Event';\nimport EventHelper from '../helpers/EventHelper';\nimport MainHelper from '../helpers/MainHelper';\nimport Context from '../models/Context';\nimport { DeliveryPlatformKind } from '../models/DeliveryPlatformKind';\nimport { NotificationPermission } from '../models/NotificationPermission';\nimport { DeviceRecord } from '../models/DeviceRecord';\nimport { RawPushSubscription } from '../models/RawPushSubscription';\nimport { SubscriptionStateKind } from '../models/SubscriptionStateKind';\nimport { WindowEnvironmentKind } from '../models/WindowEnvironmentKind';\nimport OneSignalApi from '../OneSignalApi';\nimport Database from '../services/Database';\nimport SdkEnvironment from './SdkEnvironment';\nimport { Subscription } from '../models/Subscription';\nimport { UnsubscriptionStrategy } from '../models/UnsubscriptionStrategy';\nimport NotImplementedError from '../errors/NotImplementedError';\nimport { base64ToUint8Array } from '../utils/Encoding';\nimport { PushDeviceRecord } from '../models/PushDeviceRecord';\nimport { SubscriptionStrategyKind } from \"../models/SubscriptionStrategyKind\";\nimport SubscriptionHelper from '../helpers/SubscriptionHelper';\nimport { ServiceWorkerActiveState } from './ServiceWorkerManager';\nimport { IntegrationKind } from '../models/IntegrationKind';\nimport ProxyFrameHost from '../modules/frames/ProxyFrameHost';\n\nexport interface SubscriptionManagerConfig {\n  safariWebId: string;\n  appId: string;\n  /**\n   * The VAPID public key to use for Chrome-like browsers, including Opera and Yandex browser.\n   */\n  vapidPublicKey: string;\n  /**\n   * A globally shared VAPID public key to use for the Firefox browser, which does not use VAPID for authentication but for application identification and uses a single\n   */\n  onesignalVapidPublicKey: string;\n}\n\nexport class SubscriptionManager {\n  private context: Context;\n  private config: SubscriptionManagerConfig;\n\n  constructor(context: Context, config: SubscriptionManagerConfig) {\n    this.context = context;\n    this.config = config;\n  }\n\n  static isSafari(): boolean {\n    return Browser.safari && window.safari !== undefined && window.safari.pushNotification !== undefined;\n  }\n\n  /**\n   * Subscribes for a web push subscription.\n   *\n   * This method is aware of different subscription environments like subscribing from a webpage,\n   * service worker, or OneSignal HTTP popup and will select the correct method. This is intended to\n   * be the single public API for obtaining a raw web push subscription (i.e. what the browser\n   * returns from a successful subscription).\n   */\n  public async subscribe(subscriptionStrategy: SubscriptionStrategyKind): Promise<RawPushSubscription> {\n    const env = SdkEnvironment.getWindowEnv();\n\n    switch (env) {\n      case WindowEnvironmentKind.CustomIframe:\n      case WindowEnvironmentKind.Unknown:\n      case WindowEnvironmentKind.OneSignalProxyFrame:\n        throw new InvalidStateError(InvalidStateReason.UnsupportedEnvironment);\n    }\n\n    let rawPushSubscription: RawPushSubscription;\n\n    switch (env) {\n      case WindowEnvironmentKind.ServiceWorker:\n        rawPushSubscription = await this.subscribeFcmFromWorker(subscriptionStrategy);\n        break;\n      case WindowEnvironmentKind.Host:\n      case WindowEnvironmentKind.OneSignalSubscriptionModal:\n      case WindowEnvironmentKind.OneSignalSubscriptionPopup:\n        /*\n          Check our notification permission before subscribing.\n\n          - If notifications are blocked, we can't subscribe.\n          - If notifications are granted, the user should be completely resubscribed.\n          - If notifications permissions are untouched, the user will be prompted and then\n            subscribed.\n\n          Subscribing is only possible on the top-level frame, so there's no permission ambiguity\n          here.\n        */\n        if ((await OneSignal.getNotificationPermission()) === NotificationPermission.Denied) {\n          throw new PushPermissionNotGrantedError(PushPermissionNotGrantedErrorReason.Blocked);\n        }\n\n        if (SubscriptionManager.isSafari()) {\n          rawPushSubscription = await this.subscribeSafari();\n        } else {\n          rawPushSubscription = await this.subscribeFcmFromPage(subscriptionStrategy);\n        }\n        break;\n    }\n\n    return rawPushSubscription;\n  }\n\n  /**\n   * Creates a device record from the provided raw push subscription and forwards this device record\n   * to OneSignal to create or update the device ID.\n   *\n   * @param rawPushSubscription The raw push subscription obtained from calling subscribe(). This\n   * can be null, in which case OneSignal's device record is set to unsubscribed.\n   *\n   * @param subscriptionState Describes whether the device record is subscribed, unsubscribed, or in\n   * another state. By default, this is set from the availability of rawPushSubscription (exists:\n   * Subscribed, null: Unsubscribed). Other use cases may result in creation of a device record that\n   * warrants a special subscription state. For example, a device ID can be retrieved by providing\n   * an identifier, and a new device record will be created if the identifier didn't exist. These\n   * records are marked with a special subscription state for tracking purposes.\n   */\n  public async registerSubscription(\n    pushSubscription: RawPushSubscription,\n    subscriptionState?: SubscriptionStateKind,\n  ): Promise<Subscription> {\n    /*\n      This may be called after the RawPushSubscription has been serialized across a postMessage\n      frame. This means it will only have object properties and none of the functions. We have to\n      recreate the RawPushSubscription.\n\n      Keep in mind pushSubscription can be null in cases where resubscription isn't possible\n      (blocked permission).\n    */\n    if (pushSubscription) {\n      pushSubscription = RawPushSubscription.deserialize(pushSubscription);\n    }\n\n    const deviceRecord = PushDeviceRecord.createFromPushSubscription(\n      this.config.appId,\n      pushSubscription,\n      subscriptionState\n    );\n\n    deviceRecord.appId = this.config.appId;\n\n    deviceRecord.subscriptionState = SubscriptionStateKind.Subscribed;\n\n    let newDeviceId: string;\n    if (await this.isAlreadyRegisteredWithOneSignal()) {\n      const { deviceId } = await Database.getSubscription();\n\n      if (!pushSubscription || pushSubscription.isNewSubscription()) {\n        newDeviceId = await OneSignalApi.updateUserSession(deviceId, deviceRecord);\n        log.info(\"Updated the subscriber's OneSignal session:\", deviceRecord);\n      } else {\n        // The subscription hasn't changed; don't register with OneSignal and reuse the existing device ID\n        newDeviceId = deviceId;\n        log.debug(\n          'The existing push subscription was resubscribed, but not registering with OneSignal because the ' +\n          'new subscription is identical.'\n        );\n      }\n    } else {\n      const id = await OneSignalApi.createUser(deviceRecord);\n      newDeviceId = id;\n      log.info(\"Subscribed to web push and registered with OneSignal:\", deviceRecord);\n    }\n\n    await this.associateSubscriptionWithEmail(newDeviceId);\n\n    if (SdkEnvironment.getWindowEnv() !== WindowEnvironmentKind.ServiceWorker) {\n      Event.trigger(OneSignal.EVENTS.REGISTERED);\n    }\n\n    // Get the existing subscription settings to prevent overriding opt out\n    const subscription = await Database.getSubscription();\n    subscription.deviceId = newDeviceId;\n    if (pushSubscription) {\n      if (SubscriptionManager.isSafari()) {\n        subscription.subscriptionToken = pushSubscription.safariDeviceToken;\n      } else {\n        subscription.subscriptionToken = pushSubscription.w3cEndpoint.toString();\n      }\n    } else {\n      subscription.subscriptionToken = null;\n    }\n\n    await Database.setSubscription(subscription);\n\n    if (typeof OneSignal !== \"undefined\") {\n      OneSignal._sessionInitAlreadyRunning = false;\n    }\n    return subscription;\n  }\n\n  /**\n   * Used before subscribing for push, we request notification permissions\n   * before installing the service worker to prevent non-subscribers from\n   * querying our server for an updated service worker every 24 hours.\n   */\n  private async requestPresubscribeNotificationPermission(): Promise<NotificationPermission> {\n    return SubscriptionManager.requestNotificationPermission();\n  }\n\n  public async unsubscribe(strategy: UnsubscriptionStrategy) {\n    if (strategy === UnsubscriptionStrategy.DestroySubscription) {\n      throw new NotImplementedError();\n    } else if (strategy === UnsubscriptionStrategy.MarkUnsubscribed) {\n      if (SdkEnvironment.getWindowEnv() === WindowEnvironmentKind.ServiceWorker) {\n        const { deviceId } = await Database.getSubscription();\n\n        await OneSignalApi.updatePlayer(this.context.appConfig.appId, deviceId, {\n          notification_types: SubscriptionStateKind.MutedByApi\n        });\n\n        await Database.put('Options', { key: 'optedOut', value: true });\n      } else {\n        throw new NotImplementedError();\n      }\n    } else {\n      throw new NotImplementedError();\n    }\n  }\n\n  /**\n   * Calls Notification.requestPermission(), but returns a Promise instead of\n   * accepting a callback like the actual Notification.requestPermission();\n   */\n  public static requestNotificationPermission(): Promise<NotificationPermission> {\n    return new Promise(resolve => window.Notification.requestPermission(resolve));\n  }\n\n  /**\n   * Called after registering a subscription with OneSignal to associate this subscription with an\n   * email record if one exists.\n   */\n  public async associateSubscriptionWithEmail(newDeviceId: string) {\n    const emailProfile = await Database.getEmailProfile();\n    if (!emailProfile.emailId || !emailProfile.emailId.value) {\n      return;\n    }\n\n    // Update the push device record with a reference to the new email ID and email address\n    await OneSignalApi.updatePlayer(\n      this.config.appId,\n      newDeviceId,\n      {\n        parent_player_id: emailProfile.emailId.value,\n        email: emailProfile.emailAddress\n      }\n    );\n  }\n\n  private async isAlreadyRegisteredWithOneSignal() {\n    const { deviceId } = await Database.getSubscription();\n    return !!deviceId.value;\n  }\n\n  private subscribeSafariPromptPermission(): Promise<string | null> {\n    return new Promise<string>(resolve => {\n      window.safari.pushNotification.requestPermission(\n        `${SdkEnvironment.getOneSignalApiUrl().toString()}/safari`,\n        this.config.safariWebId,\n        {\n          app_id: this.config.appId.value\n        },\n        response => {\n          if ((response as any).deviceToken) {\n            resolve((response as any).deviceToken.toLowerCase());\n          } else {\n            resolve(null);\n          }\n        }\n      );\n    });\n  }\n\n  private async subscribeSafari(): Promise<RawPushSubscription> {\n    const pushSubscriptionDetails = new RawPushSubscription();\n    if (!this.config.safariWebId) {\n      throw new SdkInitError(SdkInitErrorKind.MissingSafariWebId);\n    }\n\n    const { deviceToken: existingDeviceToken } = window.safari.pushNotification.permission(this.config.safariWebId);\n    pushSubscriptionDetails.existingSafariDeviceToken = existingDeviceToken;\n\n    if (!existingDeviceToken) {\n      /*\n        We're about to show the Safari native permission request. It can fail for a number of\n        reasons, e.g.:\n          - Setup-related reasons when developers just starting to get set up\n            - Address bar URL doesn't match safari certificate allowed origins (case-sensitive)\n            - Safari web ID doesn't match provided web ID\n            - Browsing in a Safari private window\n            - Bad icon DPI\n\n        but shouldn't fail for sites that have already gotten Safari working.\n\n        We'll show the permissionPromptDisplay event if the Safari user isn't already subscribed,\n        otherwise an already subscribed Safari user would not see the permission request again.\n       */\n      Event.trigger(OneSignal.EVENTS.PERMISSION_PROMPT_DISPLAYED);\n    }\n    const deviceToken = await this.subscribeSafariPromptPermission();\n    EventHelper.triggerNotificationPermissionChanged();\n    if (deviceToken) {\n      pushSubscriptionDetails.setFromSafariSubscription(deviceToken);\n    } else {\n      throw new SubscriptionError(SubscriptionErrorReason.InvalidSafariSetup);\n    }\n    return pushSubscriptionDetails;\n  }\n\n  private async subscribeFcmFromPage(\n    subscriptionStrategy: SubscriptionStrategyKind\n  ): Promise<RawPushSubscription> {\n    /*\n      Before installing the service worker, request notification permissions. If\n      the visitor doesn't grant permissions, this saves bandwidth bleeding from\n      an unused install service worker periodically fetching an updated version\n      from our CDN.\n    */\n\n    /*\n      Trigger the permissionPromptDisplay event to the best of our knowledge.\n    */\n    if (\n      SdkEnvironment.getWindowEnv() !== WindowEnvironmentKind.ServiceWorker &&\n      window.Notification.permission === NotificationPermission.Default\n    ) {\n      Event.trigger(OneSignal.EVENTS.PERMISSION_PROMPT_DISPLAYED);\n      const permission = await this.requestPresubscribeNotificationPermission();\n\n      /*\n        Notification permission changes are already broadcast by the page's\n        notificationpermissionchange handler. This means that allowing or\n        denying the permission prompt will cause double events. However, the\n        native event handler does not broadcast an event for dismissing the\n        prompt, because going from \"default\" permissions to \"default\"\n        permissions isn't a change. We specifically broadcast \"default\" to \"default\" changes.\n       */\n      if (permission === NotificationPermission.Default) {\n        EventHelper.triggerNotificationPermissionChanged(true);\n      }\n      // If the user did not grant push permissions, throw and exit\n      switch (permission) {\n        case NotificationPermission.Default:\n          log.debug('Exiting subscription and not registering worker because the permission was dismissed.');\n          OneSignal._sessionInitAlreadyRunning = false;\n          OneSignal._isRegisteringForPush = false;\n          throw new PushPermissionNotGrantedError(PushPermissionNotGrantedErrorReason.Dismissed);\n        case NotificationPermission.Denied:\n          log.debug('Exiting subscription and not registering worker because the permission was blocked.');\n          OneSignal._sessionInitAlreadyRunning = false;\n          OneSignal._isRegisteringForPush = false;\n          throw new PushPermissionNotGrantedError(PushPermissionNotGrantedErrorReason.Blocked);\n      }\n    }\n\n    /* Now that permissions have been granted, install the service worker */\n    if (await this.context.serviceWorkerManager.shouldInstallWorker()) {\n      await this.context.serviceWorkerManager.installWorker();\n    }\n\n    log.debug('Waiting for the service worker to activate...');\n    const workerRegistration = await navigator.serviceWorker.ready;\n    log.debug('Service worker is ready to continue subscribing.');\n\n    return await this.subscribeFcmVapidOrLegacyKey(workerRegistration.pushManager, subscriptionStrategy);\n  }\n\n  public async subscribeFcmFromWorker(\n    subscriptionStrategy: SubscriptionStrategyKind\n  ): Promise<RawPushSubscription> {\n    /*\n      We're running inside of the service worker.\n\n      Check to make sure our registration is activated, otherwise we can't\n      subscribe for push.\n\n      HACK: Firefox doesn't set self.registration.active in the service worker\n      context. From a non-service worker context, like\n      navigator.serviceWorker.getRegistration().active, the property actually is\n      set, but it's just not set within the service worker context.\n\n      Because of this, we're not able to check for this property on Firefox.\n     */\n    if (!self.registration.active && !Browser.firefox) {\n      throw new InvalidStateError(InvalidStateReason.ServiceWorkerNotActivated);\n      /*\n        Or should we wait for the service worker to be ready?\n\n        await new Promise(resolve => self.onactivate = resolve);\n       */\n    }\n\n    /*\n      Check to make sure push permissions have been granted.\n     */\n    const pushPermission = await self.registration.pushManager.permissionState({ userVisibleOnly: true });\n    if (pushPermission === 'denied') {\n      throw new PushPermissionNotGrantedError(PushPermissionNotGrantedErrorReason.Blocked);\n    } else if (pushPermission === 'prompt') {\n      throw new PushPermissionNotGrantedError(PushPermissionNotGrantedErrorReason.Default);\n    }\n\n    return await this.subscribeFcmVapidOrLegacyKey(self.registration.pushManager, subscriptionStrategy);\n  }\n\n  /**\n   * Returns the correct VAPID key to use for subscription based on the browser type.\n   *\n   * If the VAPID key isn't present, undefined is returned instead of null.\n   */\n  public getVapidKeyForBrowser(): ArrayBuffer {\n    // Specifically return undefined instead of null if the key isn't available\n    let key = undefined;\n\n    if (Browser.firefox) {\n      /*\n        Firefox uses VAPID for application identification instead of\n        authentication, and so all apps share an identification key.\n       */\n      key = this.config.onesignalVapidPublicKey;\n    } else {\n      /*\n        Chrome and Chrome-like browsers including Opera and Yandex use VAPID for\n        authentication, and so each app uses a uniquely generated key.\n       */\n      key = this.config.vapidPublicKey;\n    }\n\n    if (key) {\n      return <ArrayBuffer>base64ToUint8Array(key).buffer;\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * Uses the browser's PushManager interface to actually subscribe for a web push subscription.\n   *\n   * @param pushManager An instance of the browser's push manager, either from the page or from the\n   * service worker.\n   *\n   * @param subscriptionStrategy Given an existing push subscription, describes whether the existing\n   * push subscription is resubscribed as-is leaving it unchanged, or unsubscribed to make room for\n   * a new push subscription.\n   */\n  public async subscribeFcmVapidOrLegacyKey(\n    pushManager: PushManager,\n    subscriptionStrategy: SubscriptionStrategyKind\n  ): Promise<RawPushSubscription> {\n    /*\n      Always try subscribing using VAPID by providing an applicationServerKey, except for cases\n      where the user is already subscribed, handled below. If browser doesn't support VAPID's\n      applicationServerKey property, our extra options will be safely ignored, and a non-VAPID\n      subscription will be automatically returned.\n     */\n    let subscriptionOptions = {\n      userVisibleOnly: true,\n      applicationServerKey: this.getVapidKeyForBrowser() ? this.getVapidKeyForBrowser() : undefined\n    };\n\n    let newPushSubscription: PushSubscription;\n\n    /*\n      Is there an existing push subscription?\n\n      If so, and if we're on Chrome 54+, we can use its details to resubscribe\n      without any extra info needed.\n     */\n    const existingPushSubscription = await pushManager.getSubscription();\n\n    /* Record the subscription created at timestamp only if this is a new subscription */\n    let shouldRecordSubscriptionCreatedAt = !existingPushSubscription;\n\n    /* Depending on the subscription strategy, handle existing subscription in various ways */\n    switch (subscriptionStrategy) {\n      case SubscriptionStrategyKind.ResubscribeExisting:\n        /* Use the existing push subscription's PushSubscriptionOptions if it exists to resubscribe\n        an identical unchanged subscription, or unsubscribe this existing push subscription if\n        PushSubscriptionOptions is null. */\n\n        if (existingPushSubscription && existingPushSubscription.options) {\n          log.debug('[Subscription Manager] An existing push subscription exists and options is not null. ' +\n            'Using existing options to resubscribe.');\n          /*\n            Hopefully we're on Chrome 54+, so we can use PushSubscriptionOptions to get the exact\n            applicationServerKey to use, without needing to assume a manifest.json exists or passing\n            in our VAPID key and dealing with potential mismatched sender ID issues.\n          */\n\n          /*\n            Overwrite our subscription options to use the exact same subscription options we used to\n            subscribe in the first place. The previous always-use-VAPID assignment is overriden by\n            this assignment.\n          */\n          subscriptionOptions = existingPushSubscription.options;\n\n          /* If we're not subscribing a new subscription, don't overwrite the created at timestamp */\n          shouldRecordSubscriptionCreatedAt = false;\n        } else if (existingPushSubscription && !existingPushSubscription.options) {\n          log.debug('[Subscription Manager] An existing push subscription exists and options is null. ' +\n            'Unsubscribing from push first now.');\n          /*\n            There isn't a great solution if PushSubscriptionOptions (supported on Chrome 54+) isn't\n            supported.\n\n            We want to subscribe the user, but we don't know whether the user was subscribed via\n            GCM's manifest.json or FCM's VAPID.\n\n            This bug (https://bugs.chromium.org/p/chromium/issues/detail?id=692577) shows that a\n            mismatched sender ID error is possible if you subscribe via FCM's VAPID while the user\n            was originally subscribed via GCM's manifest.json (fails silently).\n\n            Because of this, we should unsubscribe the user from push first and then resubscribe\n            them.\n          */\n          await existingPushSubscription.unsubscribe();\n\n          /* We're unsubscribing, so we want to store the created at timestamp */\n          shouldRecordSubscriptionCreatedAt = false;\n        }\n        break;\n      case SubscriptionStrategyKind.SubscribeNew:\n        /* Since we want a new subscription every time with this strategy, just unsubscribe. */\n        if (existingPushSubscription) {\n          log.debug('[Subscription Manager] Unsubscribing existing push subscription.');\n          await existingPushSubscription.unsubscribe();\n        }\n\n        // Always record the subscription if we're resubscribing\n        shouldRecordSubscriptionCreatedAt = true;\n        break;\n    }\n\n    // Actually subscribe the user to push\n    log.debug('[Subscription Manager] Subscribing to web push with these options:', subscriptionOptions);\n    newPushSubscription = await pushManager.subscribe(subscriptionOptions);\n\n    if (shouldRecordSubscriptionCreatedAt) {\n      const bundle = await Database.getSubscription();\n      bundle.createdAt = new Date().getTime();\n      bundle.expirationTime = newPushSubscription.expirationTime;\n      await Database.setSubscription(bundle);\n    }\n\n    // Create our own custom object from the browser's native PushSubscription object\n    const pushSubscriptionDetails = RawPushSubscription.setFromW3cSubscription(newPushSubscription);\n    if (existingPushSubscription) {\n      pushSubscriptionDetails.existingW3cPushSubscription =\n        RawPushSubscription.setFromW3cSubscription(existingPushSubscription);\n    }\n    return pushSubscriptionDetails;\n  }\n\n  public async isSubscriptionExpiring(): Promise<boolean> {\n    const integrationKind = await SdkEnvironment.getIntegration();\n    const windowEnv = await SdkEnvironment.getWindowEnv();\n\n    switch (integrationKind) {\n      case IntegrationKind.Secure:\n        return await this.isSubscriptionExpiringForSecureIntegration();\n      case IntegrationKind.SecureProxy:\n        if (windowEnv === WindowEnvironmentKind.Host) {\n          const proxyFrameHost: ProxyFrameHost = OneSignal.proxyFrameHost;\n          if (!proxyFrameHost) {\n            throw new InvalidStateError(InvalidStateReason.NoProxyFrame);\n          } else {\n            return await proxyFrameHost.runCommand<boolean>(\n              OneSignal.POSTMAM_COMMANDS.SUBSCRIPTION_EXPIRATION_STATE\n            );\n          }\n        } else {\n          return await this.isSubscriptionExpiringForSecureIntegration();\n        }\n      case IntegrationKind.InsecureProxy:\n        /* If we're in an insecure frame context, check the stored expiration since we can't access\n        the actual push subscription. */\n        const { expirationTime } = await Database.getSubscription();\n        if (!expirationTime) {\n          /* If an existing subscription does not have a stored expiration time, do not\n          treat it as expired. The subscription may have been created before this feature was added,\n          or the browser may not assign any expiration time. */\n          return false;\n        }\n\n        /* The current time (in UTC) is past the expiration time (also in UTC) */\n        return new Date().getTime() >= expirationTime;\n    }\n  }\n\n  private async isSubscriptionExpiringForSecureIntegration() {\n    const serviceWorkerState = await this.context.serviceWorkerManager.getActiveState();\n    if (!(\n      serviceWorkerState === ServiceWorkerActiveState.WorkerA ||\n      serviceWorkerState === ServiceWorkerActiveState.WorkerB)) {\n        /* If the service worker isn't activated, there's no subscription to look for */\n        return false;\n    }\n    const serviceWorkerRegistration = await navigator.serviceWorker.getRegistration();\n\n    const pushSubscription = await serviceWorkerRegistration.pushManager.getSubscription();\n    if (!pushSubscription) {\n      /* Not subscribed to web push */\n      return false;\n    }\n\n    if (!pushSubscription.expirationTime) {\n      /* No push subscription expiration time */\n      return false;\n    }\n\n    let { createdAt: subscriptionCreatedAt } = await Database.getSubscription();\n\n    if (!subscriptionCreatedAt) {\n      /* If we don't have a record of when the subscription was created, set it into the future to\n      guarantee expiration and obtain a new subscription */\n      const ONE_YEAR = 1000 * 60 * 60 * 24 * 365;\n      subscriptionCreatedAt = new Date().getTime() + ONE_YEAR;\n    }\n\n    const midpointExpirationTime =\n      subscriptionCreatedAt + ((pushSubscription.expirationTime - subscriptionCreatedAt) / 2);\n\n    return pushSubscription.expirationTime && (\n      /* The current time (in UTC) is past the expiration time (also in UTC) */\n      new Date().getTime() >= pushSubscription.expirationTime ||\n      new Date().getTime() >= midpointExpirationTime\n    );\n  }\n\n  /**\n   * Returns an object describing the user's actual push subscription state and opt-out status.\n   */\n  public async getSubscriptionState(): Promise<PushSubscriptionState> {\n    const windowEnv = SdkEnvironment.getWindowEnv();\n\n    switch (windowEnv) {\n      case WindowEnvironmentKind.ServiceWorker:\n        const pushSubscription = await self.registration.pushManager.getSubscription();\n        const { optedOut } = await Database.getSubscription();\n        return {\n          subscribed: !!pushSubscription,\n          optedOut: optedOut\n        };\n      default:\n        /* Regular browser window environments */\n        const integration = await SdkEnvironment.getIntegration();\n\n        switch (integration) {\n          case IntegrationKind.Secure:\n            return this.getSubscriptionStateForSecure();\n          case IntegrationKind.SecureProxy:\n            switch (windowEnv) {\n              case WindowEnvironmentKind.OneSignalProxyFrame:\n              case WindowEnvironmentKind.OneSignalSubscriptionPopup:\n              case WindowEnvironmentKind.OneSignalSubscriptionModal:\n                return this.getSubscriptionStateForSecure();\n              default:\n                /* Re-run this command in the proxy frame */\n                const proxyFrameHost: ProxyFrameHost = OneSignal.proxyFrameHost;\n                const pushSubscriptionState = await proxyFrameHost.runCommand<PushSubscriptionState>(\n                  OneSignal.POSTMAM_COMMANDS.GET_SUBSCRIPTION_STATE\n                );\n                return pushSubscriptionState;\n            }\n          case IntegrationKind.InsecureProxy:\n            return await this.getSubscriptionStateForInsecure();\n          default:\n            throw new InvalidStateError(InvalidStateReason.UnsupportedEnvironment);\n        }\n    }\n  }\n\n  private async getSubscriptionStateForSecure(): Promise<PushSubscriptionState> {\n    const { deviceId, subscriptionToken, optedOut } = await Database.getSubscription();\n    const workerState = await this.context.serviceWorkerManager.getActiveState();\n    const workerRegistration = await navigator.serviceWorker.getRegistration();\n    const notificationPermission =\n      await this.context.permissionManager.getNotificationPermission(this.context.appConfig.safariWebId);\n    const isWorkerActive = (\n      workerState === ServiceWorkerActiveState.WorkerA ||\n      workerState === ServiceWorkerActiveState.WorkerB\n    );\n\n    if (!workerRegistration) {\n      /* You can't be subscribed without a service worker registration */\n      return {\n        subscribed: false,\n        optedOut: optedOut,\n      };\n    }\n    const pushSubscription = await workerRegistration.pushManager.getSubscription();\n\n    const isPushEnabled = !!(\n      pushSubscription &&\n      deviceId && deviceId.value &&\n      notificationPermission === NotificationPermission.Granted &&\n      isWorkerActive\n    );\n\n    return {\n      subscribed: isPushEnabled,\n      optedOut: optedOut,\n    };\n  }\n\n  private async getSubscriptionStateForInsecure(): Promise<PushSubscriptionState> {\n    /* For HTTP, we need to rely on stored values; we never have access to the actual data */\n    const { deviceId, subscriptionToken, optedOut } = await Database.getSubscription();\n    const notificationPermission =\n      await this.context.permissionManager.getNotificationPermission(this.context.appConfig.safariWebId);\n\n    const isPushEnabled = !!(\n      deviceId && deviceId.value &&\n      subscriptionToken &&\n      notificationPermission === NotificationPermission.Granted\n    );\n\n    return {\n      subscribed: isPushEnabled,\n      optedOut: optedOut,\n    };\n  }\n}\n","import * as log from 'loglevel';\nimport Context from '../models/Context';\nimport { ResourceType } from \"../services/DynamicResourceLoader\";\n\nexport default class CookieSyncer {\n  private isFeatureEnabled: boolean;\n  private context: Context;\n\n  constructor(context: Context, isFeatureEnabled: boolean) {\n    this.context = context;\n    this.isFeatureEnabled = isFeatureEnabled;\n  }\n\n  get PUBLISHER_ID(): string {\n    const defaultId = \"os!os\";\n\n    try {\n      const appId = this.context.appConfig.appId.value;\n      const truncatedAppId = appId.replace(/-/g, '').substr(0, 15).toLowerCase();\n      return `os!${truncatedAppId}`;\n    } catch (e) {\n      return defaultId;\n    }\n  }\n\n  static get SDK_URL(): URL {\n    const url = new URL(\"https://cdn.tynt.com/afx.js\");\n    url.protocol = window.location.protocol;\n    return url;\n  }\n\n  install() {\n    if (!this.isFeatureEnabled) {\n      log.debug('Cookie sync feature is disabled.');\n      return;\n    }\n    if (window.top !== window) {\n      /* This cookie integration can only be injected into the top frame, so that it's targeting the intended site. */\n      return;\n    }\n\n    (window as any).Tynt = (window as any).Tynt || [];\n    (window as any).Tynt.push(this.PUBLISHER_ID);\n\n    this.context.dynamicResourceLoader.loadIfNew(ResourceType.Script, CookieSyncer.SDK_URL);\n    log.debug('Enabled cookie sync feature.');\n  }\n}\n","\nimport * as log from 'loglevel';\nimport SdkEnvironment from './SdkEnvironment';\nimport { WindowEnvironmentKind } from '../models/WindowEnvironmentKind';\n\nexport class SessionManager {\n  private static SESSION_STORAGE_KEY_NAME = 'onesignal-pageview-count';\n  private incrementedPageViewCount: boolean;\n\n  getPageViewCount(): number {\n    try {\n      /*\n        sessionStorage may be supported by the browser but may not be available\n        as an API in incognito mode and in cases where the user disables\n        third-party cookies on some browsers.\n       */\n      const pageViewCountStr = sessionStorage.getItem(SessionManager.SESSION_STORAGE_KEY_NAME);\n      const pageViewCount = parseInt(pageViewCountStr);\n      if (isNaN(pageViewCount)) {\n        return 0;\n      } else {\n        return pageViewCount;\n      }\n    } catch (e) {\n      /*\n        If we're in incognito mode or sessionStorage is otherwise unsupported,\n        pretend we're starting our first session.\n       */\n      return 0;\n    }\n  }\n\n  setPageViewCount(sessionCount: number) {\n    try {\n      sessionStorage.setItem(SessionManager.SESSION_STORAGE_KEY_NAME, sessionCount.toString());\n\n      if (SdkEnvironment.getWindowEnv() === WindowEnvironmentKind.OneSignalSubscriptionPopup) {\n        // If we're setting sessionStorage and we're in an Popup, we need to also set sessionStorage on the\n        // main page\n        if (OneSignal.subscriptionPopup) {\n          OneSignal.subscriptionPopup.message(OneSignal.POSTMAM_COMMANDS.SET_SESSION_COUNT);\n        }\n      }\n    } catch (e) {\n      /*\n        If sessionStorage isn't available, don't error.\n       */\n    }\n  }\n\n  /**\n   * Increments the session count at most once for the current page view.\n   *\n   * A flag is set to prevent incrementing the session count more than once for\n   * the current page view. If the page is refreshed, this in-memory variable\n   * will be automatically reset. Because of this, regardless of the number of\n   * times this method is called on the current page view, the page view count\n   * will only be incremented once.\n   */\n  incrementPageViewCount() {\n    if (this.incrementedPageViewCount) {\n      // For this method, we don't want to increment the session count more than\n      // once per pageview\n      return;\n    }\n\n    const newCount = this.getPageViewCount() + 1;\n    this.setPageViewCount(newCount);\n    log.debug(`Incremented page view count to ${newCount}.`);\n    this.incrementedPageViewCount = true;\n  }\n\n  simulatePageNavigationOrRefresh() {\n    this.incrementedPageViewCount = false;\n  }\n\n  /**\n   * Returns true if this page is running OneSignal for the first time and has\n   * not been navigated or refreshed.\n   */\n  isFirstPageView() {\n    return this.getPageViewCount() === 1;\n  }\n}\n","import { awaitOneSignalInitAndSupported, redetectBrowserUserAgent } from '../utils';\nimport SubscriptionHelper from '../helpers/SubscriptionHelper';\nimport * as Browser from 'bowser';\nimport { InvalidArgumentError, InvalidArgumentReason } from '../errors/InvalidArgumentError';\nimport Database from '../services/Database';\nimport { NotificationPermission } from '../models/NotificationPermission';\nimport MainHelper from '../helpers/MainHelper';\n\n/**\n * A permission manager to consolidate the different quirks of obtaining and evaluating permissions\n * across Safari, Chrome, and Firefox.\n */\nexport default class PermissionManager {\n\n  static get STORED_PERMISSION_KEY() {\n    return 'storedNotificationPermission';\n  }\n\n  /**\n   * Returns an interpreted version of the browser's notification permission.\n   *\n   * On some environments, it isn't possible to obtain the actual notification\n   * permission. For example, starting with Chrome 62+, cross-origin iframes and\n   * insecure origins can no longer accurately detect the default notification\n   * permission state.\n   *\n   * For cross-origin iframes, returned permissions are correct except that\n   * \"denied\" is returned instead of \"default\".\n   *\n   * For insecure origins, returned permissions are always \"denied\". This\n   * differs from cross-origin iframes where the cross-origin iframes are\n   * acurrate if returning \"granted\", but insecure origins will always return\n   * \"denied\" regardless of the actual permission.\n   *\n   * This method therefore returns the notification permission best suited for\n   * our SDK, and it may not always be accurate. On most environments (i.e. not\n   * Chrome 62+), the returned permission will be accurate.\n   *\n   * @param safariWebId The Safari web ID necessary to access the permission\n   * state on Safari.\n   */\n  public async getNotificationPermission(safariWebId: string) {\n    const reportedPermission = await this.getReportedNotificationPermission(safariWebId);\n\n    if (await this.isPermissionEnvironmentAmbiguous(reportedPermission)) {\n      return this.getInterpretedAmbiguousPermission(reportedPermission);\n    } else {\n      return reportedPermission;\n    }\n  }\n\n  /**\n   * Returns the browser's actual notification permission as reported without any modifications.\n   *\n   * One challenge is determining the frame context our permission query needs to run in:\n   *\n   *   - For a regular top-level HTTPS site, query our current top-level frame\n   *\n   *   - For a custom web push setup in a child HTTPS iframe, query our current child iframe (even\n   *     though the returned permission is ambiguous on Chrome 62+ if our origin is different from\n   *     that of the top-level frame)\n   *\n   *   - For a regular HTTP site, query OneSignal's child subdomain.os.tc or subdomain.onesignal.com\n   *     iframe\n   *\n   *   - For a regular HTTP site embedded in a child iframe, still query the nested child's\n   *     OneSignal subdomain.os.tc or subdomain.onesignal.com iframe\n   *\n   * This simplifies into determining whether the web push setup is using OneSignal's subdomain. If\n   * not, we assume the current frame context, regardless of whether it is a child or top-level\n   * frame, is the current context to run the permission query in.\n   *\n   * @param safariWebId The Safari web ID necessary to access the permission state on Safari.\n   */\n  public async getReportedNotificationPermission(safariWebId: string) {\n    if (Browser.safari) {\n      return this.getSafariNotificationPermission(safariWebId);\n    } else {\n      // Is this web push setup using subdomain.os.tc or subdomain.onesignal.com?\n      const isUsingOneSignalSubdomain = await SubscriptionHelper.isUsingSubscriptionWorkaround();\n\n      if (isUsingOneSignalSubdomain) {\n        /*\n          Our target permission for HTTP sites lives on the subdomain.os.tc origin. To ask the iframe\n          for its notification permission state, it must first be loaded.\n         */\n        await awaitOneSignalInitAndSupported();\n\n        return this.getOneSignalSubdomainNotificationPermission(safariWebId);\n      } else {\n        return this.getW3cNotificationPermission();\n      }\n    }\n  }\n\n  /**\n   * Returns the Safari browser's notification permission as reported by the browser.\n   *\n   * @param safariWebId The Safari web ID necessary to access the permission state on Safari.\n   */\n  private getSafariNotificationPermission(safariWebId: string): NotificationPermission {\n    if (safariWebId) {\n      return window.safari.pushNotification.permission(safariWebId).permission as NotificationPermission;\n    } else {\n      throw new InvalidArgumentError('safariWebId', InvalidArgumentReason.Empty);\n    }\n  }\n\n  /**\n   * Returns the notification permission as reported by the browser for non-Safari browsers. This\n   * includes Chrome, Firefox, Opera, Yandex, and every browser following the Notification API\n   * standard.\n   */\n  private getW3cNotificationPermission(): NotificationPermission {\n    return window.Notification.permission as NotificationPermission;\n  }\n\n  /**\n   * Returns the notification permission as reported by the browser for the OneSignal subdomain\n   * iframe.\n   *\n   * @param safariWebId The Safari web ID necessary to access the permission state on Safari.\n   */\n  private getOneSignalSubdomainNotificationPermission(safariWebId: string): Promise<NotificationPermission> {\n    return new Promise<NotificationPermission>(resolve => {\n      OneSignal.proxyFrameHost.message(\n        OneSignal.POSTMAM_COMMANDS.REMOTE_NOTIFICATION_PERMISSION,\n        { safariWebId: safariWebId },\n        reply => {\n          let remoteNotificationPermission = reply.data;\n          resolve(remoteNotificationPermission);\n        }\n      );\n    });\n  }\n\n  /**\n   * To interpret the browser's reported notification permission, we need to know whether we're in\n   * an environment where the returned permission should be treated ambiguously.\n   *\n   * The reported permission should only be treated ambiguously if:\n   *\n   *   - We're not on Safari or Firefox (Chromium, Chrome, Opera, and Yandex will all eventually\n   *     share the same Chrome 62+ codebase)\n   *\n   *   - And the reported permission is \"denied\"\n   *\n   *   - And the current frame context is either a cross-origin iframe or insecure\n   */\n  public async isPermissionEnvironmentAmbiguous(permission: NotificationPermission): Promise<boolean> {\n    // For testing purposes, allows changing the browser user agent\n    const browser = redetectBrowserUserAgent();\n\n    return (!browser.safari &&\n            !browser.firefox &&\n            permission === NotificationPermission.Denied &&\n            (\n              this.isCurrentFrameContextCrossOrigin() ||\n              await SubscriptionHelper.isFrameContextInsecure() ||\n              SubscriptionHelper.isUsingSubscriptionWorkaround() ||\n              SubscriptionHelper.isInsecureOrigin()\n            )\n           );\n  }\n\n  /**\n   * Returns true if we're a cross-origin iframe.\n   *\n   * This means:\n   *\n   *   - We're not the top-level frame\n   *   - We're unable to access to the top-level frame's origin, or we can access the origin but it\n   *     is different. On most browsers, accessing the top-level origin should throw an exception.\n   */\n  public isCurrentFrameContextCrossOrigin(): boolean {\n    let topFrameOrigin: string;\n\n    try {\n      // Accessing a cross-origin top-level frame's origin should throw an error\n      topFrameOrigin = window.top.location.origin;\n    } catch (e) {\n      // We're in a cross-origin child iframe\n      return true;\n    }\n\n    return window.top !== window &&\n           topFrameOrigin !== window.location.origin;\n  }\n\n  /**\n   * To workaround Chrome 62+'s permission ambiguity for \"denied\" permissions,\n   * we assume the permission is \"default\" until we actually record the\n   * permission being \"denied\" or \"granted\".\n   *\n   * This allows our best-effort approach to subscribe new users, and upon\n   * subscribing, if we discover the actual permission to be denied, we record\n   * this for next time.\n   *\n   * @param reportedPermission The notification permission as reported by the\n   * browser without any modifications.\n   */\n  public async getInterpretedAmbiguousPermission(reportedPermission: NotificationPermission) {\n    switch (reportedPermission) {\n      case NotificationPermission.Denied:\n        const storedPermission = await this.getStoredPermission();\n\n        if (storedPermission) {\n          // If we've recorded the last known actual browser permission, return that\n          return storedPermission;\n        } else {\n          // If we don't have any stored permission, assume default\n          return NotificationPermission.Default;\n        }\n      default:\n        return reportedPermission;\n    }\n  }\n\n  public async getStoredPermission(): Promise<NotificationPermission> {\n    return await Database.get<NotificationPermission>('Options', PermissionManager.STORED_PERMISSION_KEY);\n  }\n\n  public async setStoredPermission(permission: NotificationPermission) {\n    await Database.put('Options', { key: PermissionManager.STORED_PERMISSION_KEY, value: permission });\n  }\n\n    public async updateStoredPermission() {\n      const permission = await this.getNotificationPermission(null);\n      return await this.setStoredPermission(permission);\n    }\n}\n","import Postmam from '../../Postmam';\nimport RemoteFrame from './RemoteFrame';\n\n/**\n * The actual OneSignal proxy frame contents / implementation, that is loaded\n * into the iFrame URL as subdomain.onesignal.com/webPushIFrame or\n * subdomain.os.tc/webPushIFrame. *\n */\nexport default class SubscriptionModal extends RemoteFrame {\n\n  constructor(initOptions: any) {\n    super(initOptions);\n  }\n\n  establishCrossOriginMessaging() {\n    if (this.messenger) {\n      this.messenger.destroy();\n    }\n    this.messenger = new Postmam(window.parent, this.options.origin, this.options.origin);\n  }\n}\n","import * as log from 'loglevel';\n\nimport SdkEnvironment from '../../managers/SdkEnvironment';\nimport { MessengerMessageEvent } from '../../models/MessengerMessageEvent';\nimport Postmam from '../../Postmam';\nimport RemoteFrame from './RemoteFrame';\n\n/**\n * The actual OneSignal proxy frame contents / implementation, that is loaded\n * into the iFrame URL as subdomain.onesignal.com/webPushIFrame or\n * subdomain.os.tc/webPushIFrame. *\n */\nexport default class SubscriptionPopup extends RemoteFrame {\n\n  constructor(initOptions: any) {\n    super(initOptions);\n  }\n\n  /**\n   * Loads the messenger on the iFrame to communicate with the host page and\n   * assigns init options to an iFrame-only initialization of OneSignal.\n   *\n   * Our main host page will wait for all iFrame scripts to complete since the\n   * host page uses the iFrame onload event to begin sending handshake messages\n   * to the iFrame.\n   *\n   * There is no load timeout here; the iFrame initializes it scripts and waits\n   * forever for the first handshake message.\n   */\n   // initialize() is implemented by base RemoteFrame class\n\n  establishCrossOriginMessaging() {\n    this.messenger = new Postmam(window.opener, this.options.origin, this.options.origin);\n    this.messenger.once(OneSignal.POSTMAM_COMMANDS.CONNECTED, this.onMessengerConnected.bind(this));\n    // The host page will receive this event, and then call connect()\n    this.messenger.postMessage(OneSignal.POSTMAM_COMMANDS.POPUP_BEGIN_MESSAGEPORT_COMMS, null);\n    this.messenger.listen();\n  }\n\n  onMessengerConnected(_: MessengerMessageEvent) {\n    log.debug(`(${SdkEnvironment.getWindowEnv().toString()}) The host page is now ready to receive commands from the HTTP popup.`);\n    this.finishInitialization();\n  }\n}\n","import { AppConfig } from '../models/AppConfig';\nimport { BuildEnvironmentKind } from '../models/BuildEnvironmentKind';\nimport ProxyFrameHost from '../modules/frames/ProxyFrameHost';\nimport { contains } from '../utils';\nimport SdkEnvironment from './SdkEnvironment';\n\nexport default class AltOriginManager {\n\n  constructor() {\n\n  }\n\n  static async discoverAltOrigin(appConfig): Promise<ProxyFrameHost> {\n    const iframeUrls = AltOriginManager.getOneSignalProxyIframeUrls(appConfig);\n    const allProxyFrameHosts: ProxyFrameHost[] = [];\n    let targetProxyFrameHost;\n    for (const iframeUrl of iframeUrls) {\n      const proxyFrameHost = new ProxyFrameHost(iframeUrl);\n      // A TimeoutError could happen here; it gets rejected out of this entire loop\n      await proxyFrameHost.load();\n      allProxyFrameHosts.push(proxyFrameHost);\n    }\n    const nonDuplicatedAltOriginSubscriptions = await AltOriginManager.removeDuplicatedAltOriginSubscription(allProxyFrameHosts);\n\n    if (nonDuplicatedAltOriginSubscriptions) {\n      targetProxyFrameHost = nonDuplicatedAltOriginSubscriptions[0];\n    } else {\n      for (const proxyFrameHost of allProxyFrameHosts) {\n        if (await proxyFrameHost.isSubscribed()) {\n          // If we're subscribed, we're done searching for the iframe\n          targetProxyFrameHost = proxyFrameHost;\n        } else {\n          if (contains(proxyFrameHost.url.host, '.os.tc')) {\n            if (!targetProxyFrameHost) {\n              // We've already loaded .onesignal.com and they're not subscribed\n              // There's no other frames to check; the user is completely not subscribed\n              targetProxyFrameHost = proxyFrameHost;\n            } else {\n              // Already subscribed to .onesignal.com; remove os.tc frame\n            proxyFrameHost.dispose();\n            }\n          } else {\n            // We've just loaded .onesignal.com and they're not subscribed\n            // Load the .os.tc frame next to check\n            // Remove the .onesignal.com frame; there's no need to keep it around anymore\n            // Actually don't dispose it, so we can check for duplicate subscriptions\n            proxyFrameHost.dispose();\n            continue;\n          }\n        }\n      }\n    }\n\n    return targetProxyFrameHost;\n  }\n\n  static async removeDuplicatedAltOriginSubscription(proxyFrameHosts: ProxyFrameHost[]): Promise<void | ProxyFrameHost[]> {\n    const subscribedProxyFrameHosts = [];\n    for (const proxyFrameHost of proxyFrameHosts) {\n      if (await proxyFrameHost.isSubscribed()) {\n        subscribedProxyFrameHosts.push(proxyFrameHost);\n      }\n    }\n    if (subscribedProxyFrameHosts.length < 2) {\n      // If the user is only subscribed on one host, or not subscribed at all,\n      // they don't have duplicate subscriptions\n      return null;\n    }\n    if (SdkEnvironment.getBuildEnv() == BuildEnvironmentKind.Development) {\n      var hostToCheck = '.localhost:3001';\n    } else if (SdkEnvironment.getBuildEnv() == BuildEnvironmentKind.Production) {\n      var hostToCheck = '.onesignal.com';\n    }\n    var oneSignalComProxyFrameHost: ProxyFrameHost = (subscribedProxyFrameHosts as any).find(proxyFrameHost => contains(proxyFrameHost.url.host, hostToCheck));\n    if (!oneSignalComProxyFrameHost) {\n      // They aren't subscribed to the .onesignal.com frame; shouldn't happen\n      // unless we have 2 other frames in the future they can subscribe to\n      return null;\n    } else {\n      await oneSignalComProxyFrameHost.unsubscribeFromPush();\n      oneSignalComProxyFrameHost.dispose();\n\n      const indexToRemove = proxyFrameHosts.indexOf(oneSignalComProxyFrameHost);\n      proxyFrameHosts.splice(indexToRemove, 1);\n      return proxyFrameHosts;\n    }\n  }\n\n  /**\n   * Returns the array of possible URL in which the push subscription and\n   * IndexedDb site data will be stored.\n   *\n   * For native HTTPS sites not using a subdomain of our service, this is the\n   * top-level URL.\n   *\n   * For sites using a subdomain of our service, this URL was typically\n   * subdomain.onesignal.com, until we switched to subdomain.os.tc for a shorter\n   * origin to fit into Mac's native notifications on Chrome 59+.\n   *\n   * Because a user may be subscribed to subdomain.onesignal.com or\n   * subdomain.os.tc, we have to load both in certain scenarios to determine\n   * which the user is subscribed to; hence, this method returns an array of\n   * possible URLs.\n   */\n  static getCanonicalSubscriptionUrls(config: AppConfig,\n                                      buildEnv: BuildEnvironmentKind = SdkEnvironment.getBuildEnv()\n                                     ): Array<URL> {\n    let urls = [];\n\n    if (config.httpUseOneSignalCom) {\n      let legacyDomainUrl = SdkEnvironment.getOneSignalApiUrl(buildEnv);\n      // Add subdomain.onesignal.com\n      legacyDomainUrl.host = [config.subdomain, legacyDomainUrl.host].join('.');\n      urls.push(legacyDomainUrl);\n    }\n\n    let osTcDomainUrl = SdkEnvironment.getOneSignalApiUrl(buildEnv);\n    // Always add subdomain.os.tc\n    osTcDomainUrl.host = [config.subdomain, 'os.tc'].join('.');\n    urls.push(osTcDomainUrl);\n\n    for (const url of urls) {\n      url.pathname = '';\n    }\n\n    return urls;\n  }\n\n  /**\n   * Returns the URL of the OneSignal proxy iFrame helper.\n   */\n  static getOneSignalProxyIframeUrls(config: AppConfig): Array<URL> {\n    const urls = AltOriginManager.getCanonicalSubscriptionUrls(config);\n\n    for (const url of urls) {\n      url.pathname = 'webPushIframe';\n    }\n\n    return urls;\n  }\n\n  /**\n   * Returns the URL of the OneSignal subscription popup.\n   */\n  static getOneSignalSubscriptionPopupUrls(config: AppConfig): Array<URL> {\n    const urls = AltOriginManager.getCanonicalSubscriptionUrls(config);\n\n    for (const url of urls) {\n      url.pathname = 'subscribe';\n    }\n\n    return urls;\n  }\n}\n","import * as log from 'loglevel';\n\nimport Environment from '../../Environment';\nimport Event from '../../Event';\nimport EventHelper from '../../helpers/EventHelper';\nimport { MessengerMessageEvent } from '../../models/MessengerMessageEvent';\nimport Postmam from '../../Postmam';\nimport { timeoutPromise } from '../../utils';\nimport Context from '../../models/Context';\nimport { ServiceWorkerActiveState } from \"../../managers/ServiceWorkerManager\";\n\n/**\n * Manager for an instance of the OneSignal proxy frame, for use from the main\n * page (not the iFrame itself).\n *\n * This is loaded as subdomain.onesignal.com/webPushIFrame or\n * subdomain.os.tc/webPushIFrame. *\n */\nexport default class ProxyFrameHost implements Disposable {\n\n  public url: URL;\n  private element: HTMLIFrameElement;\n  private messenger: Postmam;\n\n  // Promise to track whether the frame has finished loading\n  private loadPromise: {\n    promise: Promise<void>,\n    resolver: Function,\n    rejector: Function\n  }\n\n  /**\n   * How long to wait to load the proxy frame before timing out.\n   */\n  static get LOAD_TIMEOUT_MS() {\n    return 15000;\n  }\n\n  /**\n   *\n   * @param origin The URL object describing the origin to load.\n   */\n  constructor(origin: URL) {\n    this.url = origin;\n    this.url.pathname = 'webPushIframe';\n  }\n\n  /**\n   * Creates and loads an iFrame on the DOM, replacing any existing iFrame of\n   * the same URL.\n   *\n   * Rejects with a TimeoutError if the frame doesn't load within a specified time.\n   */\n  async load(): Promise<void> {\n    /*\n      This class removes existing iFrames with the same URL. This prevents\n      multiple iFrames to the same origin, which can cause issues with\n      cross-origin messaging.\n    */\n    log.debug('Opening an iFrame to', this.url.toString());\n    this.removeFrame();\n\n    const iframe = document.createElement(\"iframe\");\n    iframe.style.display = \"none\";\n    iframe.src = this.url.toString();\n    (iframe as any).sandbox = 'allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation';\n    (this as any).loadPromise = {};\n    (this as any).loadPromise.promise = new Promise((resolve, reject) => {\n        this.loadPromise.resolver = resolve;\n        this.loadPromise.rejector = reject;\n    });\n    document.body.appendChild(iframe);\n    iframe.onload = this.onFrameLoad.bind(this);\n\n    this.element = iframe;\n    // Display a timeout warning if frame doesn't load in time, but don't prevent it from loading if the network is just slow\n    timeoutPromise(this.loadPromise.promise, ProxyFrameHost.LOAD_TIMEOUT_MS).catch(() => {\n      if (window === window.top) {\n        log.warn(`OneSignal: Loading the required iFrame ${this.url.toString()} timed out. Check that the Site URL onesignal.com dashboard web config is ${location.origin}. Only the Site URL specified there is allowed to use load the iFrame.`);\n      }\n    });\n    return this.loadPromise.promise;\n  }\n\n  removeFrame() {\n    // Unit tests may not have access to document\n    if (Environment.isBrowser()) {\n      const existingInstance = document.querySelector(`iFrame[src='${this.url.toString()}'`);\n      if (existingInstance) {\n        existingInstance.remove();\n      }\n    }\n  }\n\n  onFrameLoad(_: UIEvent): void {\n    this.establishCrossOriginMessaging();\n  }\n\n  establishCrossOriginMessaging() {\n    if (this.messenger) {\n      // Remove all previous events; window message events should not go to any previous listeners\n      this.messenger.destroy();\n    }\n    this.messenger = new Postmam(this.element.contentWindow, this.url.toString(), this.url.toString());\n    this.messenger.on(OneSignal.POSTMAM_COMMANDS.CONNECTED, this.onMessengerConnect.bind(this));\n    this.messenger.on(OneSignal.POSTMAM_COMMANDS.REMOTE_RETRIGGER_EVENT, this.onRemoteRetriggerEvent.bind(this));\n    this.messenger.on(OneSignal.POSTMAM_COMMANDS.REMOTE_NOTIFICATION_PERMISSION_CHANGED, this.onRemoteNotificationPermissionChanged.bind(this));\n    this.messenger.on(OneSignal.POSTMAM_COMMANDS.REQUEST_HOST_URL, this.onRequestHostUrl.bind(this));\n    this.messenger.on(OneSignal.POSTMAM_COMMANDS.SERVICEWORKER_COMMAND_REDIRECT, this.onServiceWorkerCommandRedirect.bind(this));\n    this.messenger.on(OneSignal.POSTMAM_COMMANDS.GET_EVENT_LISTENER_COUNT, this.onGetEventListenerCount.bind(this));\n    this.messenger.connect();\n  }\n\n  dispose() {\n    // Removes all events\n    if (this.messenger) {\n      this.messenger.destroy();\n    }\n    this.removeFrame();\n  }\n\n  async onMessengerConnect(_: MessengerMessageEvent) {\n    log.debug(`Successfully established cross-origin communication for iFrame at ${this.url.toString()}`);\n\n    this.messenger.message(OneSignal.POSTMAM_COMMANDS.IFRAME_POPUP_INITIALIZE, {\n      hostInitOptions: JSON.parse(JSON.stringify(OneSignal.config)), // Removes functions and unmessageable objects\n      pageUrl: window.location.href,\n      pageTitle: document.title,\n    }, reply => {\n      if (reply.data === OneSignal.POSTMAM_COMMANDS.REMOTE_OPERATION_COMPLETE) {\n        this.loadPromise.resolver();\n        // This needs to be initialized so that isSubscribed() can be called to\n        // determine whether the user is subscribed to Frame A or B\n        //Event.trigger(OneSignal.EVENTS.SDK_INITIALIZED);\n      }\n      return false;\n    });\n  }\n\n  onRemoteRetriggerEvent(message: MessengerMessageEvent) {\n    // e.g. { eventName: 'subscriptionChange', eventData: true}\n    let {eventName, eventData} = (message.data as any);\n    Event.trigger(eventName, eventData, message.source);\n    return false;\n  }\n\n  onRemoteNotificationPermissionChanged(message: MessengerMessageEvent) {\n    let {forceUpdatePermission} = (message.data as any);\n    EventHelper.triggerNotificationPermissionChanged(forceUpdatePermission);\n    return false;\n  }\n\n  onRequestHostUrl(message: MessengerMessageEvent) {\n    message.reply(location.href);\n    return false;\n  }\n\n  onServiceWorkerCommandRedirect(message: MessengerMessageEvent) {\n    const url = (message.data as any);\n    if (url && url.startsWith(\"http\")) {\n      window.location.href = url;\n    }\n    return false;\n  }\n\n  onGetEventListenerCount(message: MessengerMessageEvent) {\n    const eventName: string = message.data;\n    log.debug('(Reposted from iFrame -> Host) Getting event listener count for ', eventName);\n    const listenerEventCount = OneSignal.getListeners(eventName).length;\n    message.reply(listenerEventCount);\n    return false;\n  }\n\n  isSubscribed(): Promise<boolean> {\n    return new Promise(resolve => {\n      this.messenger.message(OneSignal.POSTMAM_COMMANDS.IS_SUBSCRIBED, null, reply => {\n        resolve(reply.data);\n      });\n    });\n  }\n\n  unsubscribeFromPush(): Promise<void> {\n    return new Promise<void>(resolve => {\n      this.messenger.message(OneSignal.POSTMAM_COMMANDS.UNSUBSCRIBE_PROXY_FRAME, null, _ => {\n        resolve();\n      });\n    });\n  }\n\n  getProxyServiceWorkerActiveState() {\n    return new Promise<ServiceWorkerActiveState>((resolve, reject) => {\n      this.message(OneSignal.POSTMAM_COMMANDS.SERVICE_WORKER_STATE, null, reply => {\n        resolve(reply.data);\n      });\n    });\n  }\n\n  async runCommand<T>(command: string): Promise<T> {\n    const result = await new Promise<T>((resolve, reject) => {\n      this.message(command, null, reply => {\n        resolve(reply.data);\n      });\n    });\n    return result;\n  }\n\n  /**\n   * Shortcut method to messenger.message().\n   */\n  message(..._) {\n    this.messenger.message.apply(this.messenger, arguments);\n  }\n}\n","import * as log from 'loglevel';\nimport * as objectAssign from 'object-assign';\n\nimport Event from '../../Event';\nimport EventHelper from '../../helpers/EventHelper';\nimport MainHelper from '../../helpers/MainHelper';\nimport SdkEnvironment from '../../managers/SdkEnvironment';\nimport { MessengerMessageEvent } from '../../models/MessengerMessageEvent';\nimport Postmam from '../../Postmam';\nimport SubscriptionHelper from '../../helpers/SubscriptionHelper';\nimport { RawPushSubscription } from '../../models/RawPushSubscription';\nimport { SubscriptionManager } from '../../managers/SubscriptionManager';\nimport Database from '../../services/Database';\nimport Context from '../../models/Context';\nimport { IntegrationKind } from '../../models/IntegrationKind';\n\n/**\n * Manager for an instance of the OneSignal proxy frame, for use from the main\n * page (not the iFrame itself).\n *\n * This is loaded as subdomain.onesignal.com/webPushIFrame or\n * subdomain.os.tc/webPushIFrame. *\n */\nexport default class SubscriptionPopupHost implements Disposable {\n\n  public url: URL;\n  private popupWindow: Window;\n  private messenger: Postmam;\n  private options: SubscriptionPopupHostOptions;\n\n  // Promise to track whether the frame has finished loading\n  private loadPromise: {\n    promise: Promise<void>,\n    resolver: Function,\n    rejector: Function\n  }\n\n  /**\n   *\n   * @param origin The URL object describing the origin to load.\n   */\n  constructor(origin: URL, options: SubscriptionPopupHostOptions) {\n    this.url = origin;\n    this.url.pathname = 'subscribe';\n    this.options = options || {\n      autoAccept: false,\n    };\n  }\n\n  /**\n   * Opens a new Window to subscribe the user.\n   */\n  load(): Promise<void> {\n    // Instead of using URL query parameters, which are confusing and unsightly,\n    // post the data invisible\n    let postData = objectAssign({}, MainHelper.getPromptOptionsPostHash(), {\n      promptType: 'popup',\n      parentHostname: encodeURIComponent(location.hostname)\n    });\n    if (this.options.autoAccept) {\n      postData['autoAccept'] = true;\n    }\n    log.info(`Opening a popup to ${this.url.toString()} with POST data:`, postData);\n    this.popupWindow = this.openWindowViaPost(this.url.toString(), postData, null);\n\n    this.establishCrossOriginMessaging();\n    (this as any).loadPromise = {};\n    (this as any).loadPromise.promise = new Promise((resolve, reject) => {\n        this.loadPromise.resolver = resolve;\n        this.loadPromise.rejector = reject;\n    });\n\n    // This can throw a TimeoutError, which should go up the stack\n    return this.loadPromise.promise;\n  }\n\n  // Arguments :\n  //  verb : 'GET'|'POST'\n  //  target : an optional opening target (a name, or \"_blank\"), defaults to \"_self\"\n  openWindowViaPost(url, data, overrides) {\n    var form = document.createElement(\"form\");\n    form.action = url;\n    form.method = 'POST';\n    form.target = \"onesignal-http-popup\";\n\n    var dualScreenLeft = window.screenLeft != undefined ? window.screenLeft : (screen as any).left;\n    var dualScreenTop = window.screenTop != undefined ? window.screenTop : (screen as any).top;\n    var thisWidth = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;\n    var thisHeight = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;\n    var childWidth = OneSignal._windowWidth;\n    var childHeight = OneSignal._windowHeight;\n    var left = ((thisWidth / 2) - (childWidth / 2)) + dualScreenLeft;\n    var top = ((thisHeight / 2) - (childHeight / 2)) + dualScreenTop;\n\n    if (overrides) {\n      if (overrides.childWidth) {\n        childWidth = overrides.childWidth;\n      }\n      if (overrides.childHeight) {\n        childHeight = overrides.childHeight;\n      }\n      if (overrides.left) {\n        left = overrides.left;\n      }\n      if (overrides.top) {\n        top = overrides.top;\n      }\n    }\n    const windowRef = window.open('about:blank', \"onesignal-http-popup\", `'scrollbars=yes, width=${childWidth}, height=${childHeight}, top=${top}, left=${left}`);\n\n    if (data) {\n      for (var key in data) {\n        var input = document.createElement(\"textarea\");\n        input.name = key;\n        input.value = typeof data[key] === \"object\" ? JSON.stringify(data[key]) : data[key];\n        form.appendChild(input);\n      }\n    }\n    form.style.display = 'none';\n    document.body.appendChild(form);\n    form.submit();\n    document.body.removeChild(form);\n\n    return windowRef;\n  }\n\n  establishCrossOriginMessaging() {\n    this.messenger = new Postmam(this.popupWindow, this.url.toString(), this.url.toString());\n    this.messenger.on(OneSignal.POSTMAM_COMMANDS.POPUP_BEGIN_MESSAGEPORT_COMMS, this.onBeginMessagePortCommunications.bind(this));\n    this.messenger.once(OneSignal.POSTMAM_COMMANDS.POPUP_LOADED, this.onPopupLoaded.bind(this));\n    this.messenger.once(OneSignal.POSTMAM_COMMANDS.POPUP_ACCEPTED, this.onPopupAccepted.bind(this));\n    this.messenger.once(OneSignal.POSTMAM_COMMANDS.POPUP_REJECTED, this.onPopupRejected.bind(this));\n    this.messenger.once(OneSignal.POSTMAM_COMMANDS.POPUP_CLOSING, this.onPopupClosing.bind(this));\n    this.messenger.once(OneSignal.POSTMAM_COMMANDS.SET_SESSION_COUNT, this.onSetSessionCount.bind(this));\n    this.messenger.once(OneSignal.POSTMAM_COMMANDS.WINDOW_TIMEOUT, this.onWindowTimeout.bind(this));\n    this.messenger.once(OneSignal.POSTMAM_COMMANDS.FINISH_REMOTE_REGISTRATION, this.onFinishingRegistrationRemotely.bind(this));\n    this.messenger.on(OneSignal.POSTMAM_COMMANDS.REMOTE_RETRIGGER_EVENT, this.onRemoteRetriggerEvent.bind(this));\n    this.messenger.startPostMessageReceive();\n  }\n\n  dispose() {\n    // Removes all events\n    this.messenger.destroy();\n  }\n\n  async onBeginMessagePortCommunications(_: MessengerMessageEvent) {\n    log.debug(`(${SdkEnvironment.getWindowEnv().toString()}) Successfully established cross-origin messaging with the popup window.`);\n    this.messenger.connect();\n    return false;\n  }\n\n  async onPopupLoaded(_: MessengerMessageEvent) {\n    this.loadPromise.resolver();\n    Event.trigger('popupLoad');\n  }\n\n  async onPopupAccepted(_: MessengerMessageEvent) {\n    MainHelper.triggerCustomPromptClicked('granted');\n  }\n\n  async onPopupRejected(_: MessengerMessageEvent) {\n    MainHelper.triggerCustomPromptClicked('denied');\n  }\n\n  async onPopupClosing(_: MessengerMessageEvent) {\n    log.info('Popup window is closing, running cleanup events.');\n    Event.trigger(OneSignal.EVENTS.POPUP_CLOSING);\n    this.dispose();\n  }\n\n  async onSetSessionCount(message: MessengerMessageEvent) {\n    log.debug(SdkEnvironment.getWindowEnv().toString() + \" Marking current session as a continuing browsing session.\");\n    const { sessionCount }: { sessionCount: number } = message.data;\n    const context: Context = OneSignal.context;\n    context.sessionManager.setPageViewCount(sessionCount);\n  }\n\n  async onWindowTimeout(_: MessengerMessageEvent) {\n    log.debug(SdkEnvironment.getWindowEnv().toString() + \" Popup window timed out and was closed.\");\n    Event.trigger(OneSignal.EVENTS.POPUP_WINDOW_TIMEOUT);\n  }\n\n  async onFinishingRegistrationRemotely(message: MessengerMessageEvent) {\n    log.debug(location.origin, SdkEnvironment.getWindowEnv().toString() + \" Finishing HTTP popup registration inside the iFrame, sent from popup.\");\n\n    message.reply({ progress: true });\n\n    const { rawPushSubscription }: { rawPushSubscription: RawPushSubscription } = message.data;\n\n    const appId = await MainHelper.getAppId()\n    this.messenger.stopPostMessageReceive();\n\n    const subscriptionManager: SubscriptionManager = OneSignal.context.subscriptionManager;\n    const subscription = await subscriptionManager.registerSubscription(rawPushSubscription);\n\n    await EventHelper.checkAndTriggerSubscriptionChanged();\n    await MainHelper.checkAndTriggerNotificationPermissionChanged();\n  }\n\n  onRemoteRetriggerEvent(message: MessengerMessageEvent) {\n    // e.g. { eventName: 'subscriptionChange', eventData: true}\n    let {eventName, eventData} = (message.data as any);\n    Event.trigger(eventName, eventData, message.source);\n    return false;\n  }\n\n  /**\n   * Shortcut method to messenger.message().\n   */\n  message() {\n    this.messenger.message.apply(this.messenger, arguments);\n  }\n}\n","import * as Browser from 'bowser';\nimport * as objectAssign from 'object-assign';\n\nimport Event from '../Event';\nimport MainHelper from '../helpers/MainHelper';\nimport { addCssClass, addDomElement, once, removeDomElement, isChromeLikeBrowser } from '../utils';\nimport { AppUserConfigPromptOptions } from '../models/AppConfig';\n\nexport interface SlidedownPermissionMessageOptions {\n  autoPrompt: boolean;\n  actionMessage: string;\n  acceptButtonText: string;\n  cancelButtonText: string;\n}\n\nexport default class Popover {\n\n    public options: AppUserConfigPromptOptions;\n    public notificationIcons: any;\n\n    static get EVENTS() {\n        return {\n            ALLOW_CLICK: 'popoverAllowClick',\n            CANCEL_CLICK: 'popoverCancelClick',\n            SHOWN: 'popoverShown',\n            CLOSED: 'popoverClosed',\n        };\n    }\n\n    constructor(options: AppUserConfigPromptOptions) {\n        if (!options) {\n            (this.options as any) = {};\n        } else {\n            this.options = objectAssign({}, options);\n        }\n        if (!this.options['actionMessage'] || typeof this.options['actionMessage'] !== \"string\")\n            this.options['actionMessage'] = \"We'd like to show you notifications for the latest news and updates.\";\n        if (!this.options['acceptButtonText'] || typeof this.options['acceptButtonText'] !== \"string\")\n            this.options['acceptButtonText'] = \"Allow\";\n        if (!this.options['cancelButtonText'] || typeof this.options['cancelButtonText'] !== \"string\")\n            this.options['cancelButtonText'] = \"No Thanks\";\n        this.options['actionMessage'] = this.options['actionMessage'].substring(0, 90);\n        this.options['acceptButtonText'] = this.options['acceptButtonText'].substring(0, 15);\n        this.options['cancelButtonText'] = this.options['cancelButtonText'].substring(0, 15);\n\n        this.notificationIcons = null;\n    }\n\n    async create() {\n        if (this.notificationIcons === null) {\n            const icons = await MainHelper.getNotificationIcons();\n\n            this.notificationIcons = icons;\n\n            // Remove any existing container\n            if (this.container) {\n                removeDomElement('#onesignal-popover-container');\n            }\n\n            let icon = this.getPlatformNotificationIcon();\n            let defaultIcon = `data:image/svg+xml;charset=utf-8,%3Csvg%20width%3D%2239.5%22%20height%3D%2240.5%22%20viewBox%3D%220%200%2079%2081%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Ctitle%3EOneSignal-Bell%3C%2Ftitle%3E%3Cg%20fill%3D%22%23BBB%22%20fill-rule%3D%22evenodd%22%3E%3Cpath%20d%3D%22M39.96%2067.12H4.12s-3.2-.32-3.2-3.36%202.72-3.2%202.72-3.2%2010.72-5.12%2010.72-8.8c0-3.68-1.76-6.24-1.76-21.28%200-15.04%209.6-26.56%2021.12-26.56%200%200%201.6-3.84%206.24-3.84%204.48%200%206.08%203.84%206.08%203.84%2011.52%200%2021.12%2011.52%2021.12%2026.56s-1.6%2017.6-1.6%2021.28c0%203.68%2010.72%208.8%2010.72%208.8s2.72.16%202.72%203.2c0%202.88-3.36%203.36-3.36%203.36H39.96zM27%2070.8h24s-1.655%2010.08-11.917%2010.08S27%2070.8%2027%2070.8z%22%2F%3E%3C%2Fg%3E%3C%2Fsvg%3E`;\n\n            let dialogHtml = `<div id=\"normal-popover\"><div class=\"popover-body\"><div class=\"popover-body-icon\"><img class=\"${icon === 'default-icon' ? 'default-icon' : ''}\" src=\"${icon === 'default-icon' ? defaultIcon : icon}\"></div><div class=\"popover-body-message\">${this.options['actionMessage']}</div><div class=\"clearfix\"></div></div><div class=\"popover-footer\"><button id=\"onesignal-popover-allow-button\" class=\"align-right primary popover-button\">${this.options['acceptButtonText']}</button><button id=\"onesignal-popover-cancel-button\" class=\"align-right secondary popover-button\">${this.options['cancelButtonText']}</button><div class=\"clearfix\"></div></div></div>`;\n\n            // Insert the container\n            addDomElement('body', 'beforeend',\n              '<div id=\"onesignal-popover-container\" class=\"onesignal-popover-container onesignal-reset\"></div>');\n            // Insert the dialog\n            addDomElement(this.container, 'beforeend',\n              `<div id=\"onesignal-popover-dialog\" class=\"onesignal-popover-dialog\">${dialogHtml}</div>`);\n            // Animate it in depending on environment\n            addCssClass(this.container, Browser.mobile ? 'slide-up' : 'slide-down');\n            // Add click event handlers\n            this.allowButton.addEventListener('click', this.onPopoverAllowed.bind(this));\n            this.cancelButton.addEventListener('click', this.onPopoverCanceled.bind(this));\n            Event.trigger(Popover.EVENTS.SHOWN);\n        }\n    }\n\n    onPopoverAllowed(_) {\n        Event.trigger(Popover.EVENTS.ALLOW_CLICK);\n    }\n\n    onPopoverCanceled(_) {\n        Event.trigger(Popover.EVENTS.CANCEL_CLICK);\n        this.close();\n    }\n\n    close() {\n        addCssClass(this.container, 'close-popover');\n        once(this.dialog, 'animationend', (event, destroyListenerFn) => {\n            if (event.target === this.dialog &&\n                (event.animationName === 'slideDownExit' || event.animationName === 'slideUpExit')) {\n                // Uninstall the event listener for animationend\n                removeDomElement('#onesignal-popover-container');\n                destroyListenerFn();\n                Event.trigger(Popover.EVENTS.CLOSED);\n            }\n        }, true);\n    }\n\n    getPlatformNotificationIcon() {\n        if (this.notificationIcons) {\n            if (isChromeLikeBrowser() || Browser.firefox || Browser.msedge) {\n                if (this.notificationIcons.chrome) {\n                    return this.notificationIcons.chrome;\n                } else if (this.notificationIcons.firefox) {\n                    return this.notificationIcons.firefox;\n                } else {\n                    return 'default-icon';\n                }\n            }\n            else if (Browser.safari) {\n                if (this.notificationIcons.safari) {\n                    return this.notificationIcons.safari;\n                } else if (this.notificationIcons.chrome) {\n                    return this.notificationIcons.chrome;\n                } else {\n                    return 'default-icon';\n                }\n            }\n        }\n        else return 'default-icon';\n    }\n\n    get container() {\n        return document.querySelector('#onesignal-popover-container');\n    }\n\n    get dialog() {\n        return document.querySelector('#onesignal-popover-dialog');\n    }\n\n    get allowButton() {\n        return document.querySelector('#onesignal-popover-allow-button');\n    }\n\n    get cancelButton() {\n        return document.querySelector('#onesignal-popover-cancel-button');\n    }\n}\n","\nvar sjcl = null as any;\nsjcl = {\n  /**\n   * Symmetric ciphers.\n   * @namespace\n   */\n  cipher: {},\n\n  /**\n   * Hash functions.  Right now only SHA256 is implemented.\n   * @namespace\n   */\n  hash: {},\n\n  /**\n   * Key exchange functions.  Right now only SRP is implemented.\n   * @namespace\n   */\n  keyexchange: {},\n\n  /**\n   * Cipher modes of operation.\n   * @namespace\n   */\n  mode: {},\n\n  /**\n   * Miscellaneous.  HMAC and PBKDF2.\n   * @namespace\n   */\n  misc: {},\n\n  /**\n   * Bit array encoders and decoders.\n   * @namespace\n   *\n   * @description\n   * The members of this namespace are functions which translate between\n   * SJCL's bitArrays and other objects (usually strings).  Because it\n   * isn't always clear which direction is encoding and which is decoding,\n   * the method names are \"fromBits\" and \"toBits\".\n   */\n  codec: {},\n\n  /**\n   * Exceptions.\n   * @namespace\n   */\n  exception: {\n    /**\n     * Ciphertext is corrupt.\n     * @constructor\n     */\n    corrupt: function(message) {\n      this.toString = function() { return \"CORRUPT: \"+(this as any).message; };\n      (this as any).message = message;\n    },\n\n    /**\n     * Invalid parameter.\n     * @constructor\n     */\n    invalid: function(message) {\n      this.toString = function() { return \"INVALID: \"+(this as any).message; };\n      (this as any).message = message;\n    },\n\n    /**\n     * Bug or missing feature in SJCL.\n     * @constructor\n     */\n    bug: function(message) {\n      this.toString = function() { return \"BUG: \"+(this as any).message; };\n      (this as any).message = message;\n    },\n\n    /**\n     * Something isn't ready.\n     * @constructor\n     */\n    notReady: function(message) {\n      this.toString = function() { return \"NOT READY: \"+(this as any).message; };\n      (this as any).message = message;\n    }\n  }\n};\n/** @fileOverview Arrays of bits, encoded as arrays of Numbers.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * Arrays of bits, encoded as arrays of Numbers.\n * @namespace\n * @description\n * <p>\n * These objects are the currency accepted by SJCL's crypto functions.\n * </p>\n *\n * <p>\n * Most of our crypto primitives operate on arrays of 4-byte words internally,\n * but many of them can take arguments that are not a multiple of 4 bytes.\n * This library encodes arrays of bits (whose size need not be a multiple of 8\n * bits) as arrays of 32-bit words.  The bits are packed, big-endian, into an\n * array of words, 32 bits at a time.  Since the words are double-precision\n * floating point numbers, they fit some extra data.  We use this (in a private,\n * possibly-changing manner) to encode the number of bits actually  present\n * in the last word of the array.\n * </p>\n *\n * <p>\n * Because bitwise ops clear this out-of-band data, these arrays can be passed\n * to ciphers like AES which want arrays of words.\n * </p>\n */\n(sjcl as any).bitArray = {\n  /**\n   * Array slices in units of bits.\n   * @param {bitArray} a The array to slice.\n   * @param {Number} bstart The offset to the start of the slice, in bits.\n   * @param {Number} bend The offset to the end of the slice, in bits.  If this is undefined,\n   * slice until the end of the array.\n   * @return {bitArray} The requested slice.\n   */\n  bitSlice: function (a, bstart, bend) {\n    a = (sjcl as any).bitArray._shiftRight(a.slice(bstart/32), 32 - (bstart & 31)).slice(1);\n    return (bend === undefined) ? a : (sjcl as any).bitArray.clamp(a, bend-bstart);\n  },\n\n  /**\n   * Extract a number packed into a bit array.\n   * @param {bitArray} a The array to slice.\n   * @param {Number} bstart The offset to the start of the slice, in bits.\n   * @param {Number} blength The length of the number to extract.\n   * @return {Number} The requested slice.\n   */\n  extract: function(a, bstart, blength) {\n    // FIXME: this Math.floor is not necessary at all, but for some reason\n    // seems to suppress a bug in the Chromium JIT.\n    var x, sh = Math.floor((-bstart-blength) & 31);\n    if ((bstart + blength - 1 ^ bstart) & -32) {\n      // it crosses a boundary\n      x = (a[bstart/32|0] << (32 - sh)) ^ (a[bstart/32+1|0] >>> sh);\n    } else {\n      // within a single word\n      x = a[bstart/32|0] >>> sh;\n    }\n    return x & ((1<<blength) - 1);\n  },\n\n  /**\n   * Concatenate two bit arrays.\n   * @param {bitArray} a1 The first array.\n   * @param {bitArray} a2 The second array.\n   * @return {bitArray} The concatenation of a1 and a2.\n   */\n  concat: function (a1, a2) {\n    if (a1.length === 0 || a2.length === 0) {\n      return a1.concat(a2);\n    }\n\n    var last = a1[a1.length-1], shift = sjcl.bitArray.getPartial(last);\n    if (shift === 32) {\n      return a1.concat(a2);\n    } else {\n      return sjcl.bitArray._shiftRight(a2, shift, last|0, a1.slice(0,a1.length-1));\n    }\n  },\n\n  /**\n   * Find the length of an array of bits.\n   * @param {bitArray} a The array.\n   * @return {Number} The length of a, in bits.\n   */\n  bitLength: function (a) {\n    var l = a.length, x;\n    if (l === 0) { return 0; }\n    x = a[l - 1];\n    return (l-1) * 32 + sjcl.bitArray.getPartial(x);\n  },\n\n  /**\n   * Truncate an array.\n   * @param {bitArray} a The array.\n   * @param {Number} len The length to truncate to, in bits.\n   * @return {bitArray} A new array, truncated to len bits.\n   */\n  clamp: function (a, len) {\n    if (a.length * 32 < len) { return a; }\n    a = a.slice(0, Math.ceil(len / 32));\n    var l = a.length;\n    len = len & 31;\n    if (l > 0 && len) {\n      a[l-1] = sjcl.bitArray.partial(len, a[l-1] & 0x80000000 >> (len-1), 1);\n    }\n    return a;\n  },\n\n  /**\n   * Make a partial word for a bit array.\n   * @param {Number} len The number of bits in the word.\n   * @param {Number} x The bits.\n   * @param {Number} [_end=0] Pass 1 if x has already been shifted to the high side.\n   * @return {Number} The partial word.\n   */\n  partial: function (len, x, _end) {\n    if (len === 32) { return x; }\n    return (_end ? x|0 : x << (32-len)) + len * 0x10000000000;\n  },\n\n  /**\n   * Get the number of bits used by a partial word.\n   * @param {Number} x The partial word.\n   * @return {Number} The number of bits used by the partial word.\n   */\n  getPartial: function (x) {\n    return Math.round(x/0x10000000000) || 32;\n  },\n\n  /**\n   * Compare two arrays for equality in a predictable amount of time.\n   * @param {bitArray} a The first array.\n   * @param {bitArray} b The second array.\n   * @return {boolean} true if a == b; false otherwise.\n   */\n  equal: function (a, b) {\n    if (sjcl.bitArray.bitLength(a) !== sjcl.bitArray.bitLength(b)) {\n      return false;\n    }\n    var x = 0, i;\n    for (i=0; i<a.length; i++) {\n      x |= a[i]^b[i];\n    }\n    return (x === 0);\n  },\n\n  /** Shift an array right.\n   * @param {bitArray} a The array to shift.\n   * @param {Number} shift The number of bits to shift.\n   * @param {Number} [carry=0] A byte to carry in\n   * @param {bitArray} [out=[]] An array to prepend to the output.\n   * @private\n   */\n  _shiftRight: function (a, shift, carry, out) {\n    var i, last2=0, shift2;\n    if (out === undefined) { out = []; }\n\n    for (; shift >= 32; shift -= 32) {\n      out.push(carry);\n      carry = 0;\n    }\n    if (shift === 0) {\n      return out.concat(a);\n    }\n\n    for (i=0; i<a.length; i++) {\n      out.push(carry | a[i]>>>shift);\n      carry = a[i] << (32-shift);\n    }\n    last2 = a.length ? a[a.length-1] : 0;\n    shift2 = sjcl.bitArray.getPartial(last2);\n    out.push(sjcl.bitArray.partial(shift+shift2 & 31, (shift + shift2 > 32) ? carry : out.pop(),1));\n    return out;\n  },\n\n  /** xor a block of 4 words together.\n   * @private\n   */\n  _xor4: function(x,y) {\n    return [x[0]^y[0],x[1]^y[1],x[2]^y[2],x[3]^y[3]];\n  },\n\n  /** byteswap a word array inplace.\n   * (does not handle partial words)\n   * @param {sjcl.bitArray} a word array\n   * @return {sjcl.bitArray} byteswapped array\n   */\n  byteswapM: function(a) {\n    var i, v, m = 0xff00;\n    for (i = 0; i < a.length; ++i) {\n      v = a[i];\n      a[i] = (v >>> 24) | ((v >>> 8) & m) | ((v & m) << 8) | (v << 24);\n    }\n    return a;\n  }\n};\n/** @fileOverview Bit array codec implementations.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * UTF-8 strings\n * @namespace\n */\nsjcl.codec.utf8String = {\n  /** Convert from a bitArray to a UTF-8 string. */\n  fromBits: function (arr) {\n    var out = \"\", bl = sjcl.bitArray.bitLength(arr), i, tmp;\n    for (i=0; i<bl/8; i++) {\n      if ((i&3) === 0) {\n        tmp = arr[i/4];\n      }\n      out += String.fromCharCode(tmp >>> 24);\n      tmp <<= 8;\n    }\n    return decodeURIComponent((window as any).escape(out));\n  },\n\n  /** Convert from a UTF-8 string to a bitArray. */\n  toBits: function (str) {\n    str = (window as any).unescape(encodeURIComponent(str));\n    var out = [], i, tmp=0;\n    for (i=0; i<str.length; i++) {\n      tmp = tmp << 8 | str.charCodeAt(i);\n      if ((i&3) === 3) {\n        out.push(tmp);\n        tmp = 0;\n      }\n    }\n    if (i&3) {\n      out.push(sjcl.bitArray.partial(8*(i&3), tmp));\n    }\n    return out;\n  }\n};\n/** @fileOverview Bit array codec implementations.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * Hexadecimal\n * @namespace\n */\nsjcl.codec.hex = {\n  /** Convert from a bitArray to a hex string. */\n  fromBits: function (arr) {\n    var out = \"\", i;\n    for (i=0; i<arr.length; i++) {\n      out += ((arr[i]|0)+0xF00000000000).toString(16).substr(4);\n    }\n    return out.substr(0, sjcl.bitArray.bitLength(arr)/4);//.replace(/(.{8})/g, \"$1 \");\n  },\n  /** Convert from a hex string to a bitArray. */\n  toBits: function (str) {\n    var i, out=[], len;\n    str = str.replace(/\\s|0x/g, \"\");\n    len = str.length;\n    str = str + \"00000000\";\n    for (i=0; i<str.length; i+=8) {\n      out.push(parseInt(str.substr(i,8),16)^0);\n    }\n    return sjcl.bitArray.clamp(out, len*4);\n  }\n};\n\n/** @fileOverview Javascript MD5 implementation.\n *\n * Based on the implementation in RFC 1321, and on the SJCL\n * SHA-1 implementation.\n *\n * @author Brandon Smith\n */\n\n/**\n * Context for a MD5 operation in progress.\n * @constructor\n * @class MD5, 128 bits.\n */\nsjcl.hash.md5 = function (hash) {\n  if (!this._T[0]) { this._precompute(); }\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 5 big-endian words.\n */\nsjcl.hash.md5.hash = function (data) {\n  return (new sjcl.hash.md5()).update(data).finalize();\n};\n\nsjcl.hash.md5.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 512,\n\n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n\n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    for (i = this.blockSize+ol & -this.blockSize; i <= nl;\n         i+= this.blockSize) {\n      this._block(b.splice(0,16), true);\n    }\n    return this;\n  },\n\n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 4 big-endian words.\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n    // Round out the buffer to a multiple of 16 words, less the 2 length words.\n    for (i = b.length + 2; i & 15; i++) {\n      b.push(0);\n    }\n\n    // append the length\n    b.push(this._length | 0);\n    b.push((this._length / 0x100000000)|0);\n\n    while (b.length) {\n      // b.length is passed to avoid swapping and reswapping length bytes\n      this._block(b.splice(0,16), b.length);\n    }\n\n    this.reset();\n    this._BS(h, 4);\n    return h;\n  },\n\n  /**\n   * The MD5 initialization vector.\n   * @private\n   */\n  _init:[0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476],\n\n  /**\n   * Byte swap\n   * @private\n   */\n  _BS:function(w, n) {\n    var i, x;\n    for (i=0; i<n; i++) {\n      x = w[i];\n      w[i] = (x>>>24) | (x>>8&0xff00) | ((x&0xff00)<<8) | ((x&0xff)<<24);\n    }\n  },\n\n  /* Will be precomputed */\n  _T:[],\n  /*\n   * 0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,\n   * 0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,\n   * 0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be,\n   * 0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,\n   * 0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa,\n   * 0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,\n   * 0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed,\n   * 0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,\n   * 0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c,\n   * 0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,\n   * 0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05,\n   * 0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,\n   * 0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039,\n   * 0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,\n   * 0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,\n   * 0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391\n   * @private\n   */\n  _precompute:function() {\n    var i;\n    for (i=0; i<64; i++) {\n      this._T[i] = ((0xffffffff+1) * Math.abs(Math.sin(i+1)))|0;\n    }\n  },\n\n  /**\n   * Perform one cycle of MD5.\n   * @param {bitArray} words one block of words.\n   * @private\n   */\n  _block:function (words, notlast) {\n    var i, a, b, c, d,\n    w = words.slice(0),\n    h = this._h,\n    T = this._T;\n\n    a = h[0]; b = h[1]; c = h[2]; d = h[3];\n\n    this._BS(w, notlast?16:14);\n    for (i=0; i<64; i++) {\n      var f, x, s, t;\n      if (i < 32) {\n        if (i < 16) {\n          f = (b & c) | ((~b) & d);\n          x = i;\n          s = [7, 12, 17, 22];\n        } else {\n          f = (d & b) | ((~d) & c);\n          x = (5 * i + 1) % 16;\n          s = [5, 9, 14, 20];\n        }\n      } else {\n        if (i < 48) {\n          f = b ^ c ^ d;\n          x = (3 * i + 5) % 16;\n          s = [4, 11, 16, 23];\n        } else {\n          f = c ^ (b | (~d));\n          x = (7 * i) % 16;\n          s = [6, 10, 15, 21];\n        }\n      }\n      t = a + f + w[x] + T[i];\n      a = d;\n      d = c;\n      c = b;\n      b = (((t << s[i%4]) | (t >>> 32-s[i%4])) + b)|0;\n    }\n\n    h[0] += a;\n    h[1] += b;\n    h[2] += c;\n    h[3] += d;\n  }\n};\n/** @fileOverview Javascript SHA-256 implementation.\n *\n * An older version of this implementation is available in the public\n * domain, but this one is (c) Emily Stark, Mike Hamburg, Dan Boneh,\n * Stanford University 2008-2010 and BSD-licensed for liability\n * reasons.\n *\n * Special thanks to Aldo Cortesi for pointing out several bugs in\n * this code.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * Context for a SHA-256 operation in progress.\n * @constructor\n */\nsjcl.hash.sha256 = function (hash) {\n  if (!this._key[0]) { this._precompute(); }\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 16 big-endian words.\n */\nsjcl.hash.sha256.hash = function (data) {\n  return (new sjcl.hash.sha256()).update(data).finalize();\n};\n\nsjcl.hash.sha256.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 512,\n\n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n\n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    if (nl > 9007199254740991){\n      throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    if (typeof Uint32Array !== 'undefined') {\n\tvar c = new Uint32Array(b);\n    \tvar j = 0;\n    \tfor (i = 512+ol - ((512+ol) & 511); i <= nl; i+= 512) {\n      \t    this._block(c.subarray(16 * j, 16 * (j+1)));\n      \t    j += 1;\n    \t}\n    \tb.splice(0, 16 * j);\n    } else {\n\tfor (i = 512+ol - ((512+ol) & 511); i <= nl; i+= 512) {\n      \t    this._block(b.splice(0,16));\n      \t}\n    }\n    return this;\n  },\n\n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 8 big-endian words.\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n\n    // Round out the buffer to a multiple of 16 words, less the 2 length words.\n    for (i = b.length + 2; i & 15; i++) {\n      b.push(0);\n    }\n\n    // append the length\n    b.push(Math.floor(this._length / 0x100000000));\n    b.push(this._length | 0);\n\n    while (b.length) {\n      this._block(b.splice(0,16));\n    }\n\n    this.reset();\n    return h;\n  },\n\n  /**\n   * The SHA-256 initialization vector, to be precomputed.\n   * @private\n   */\n  _init:[],\n  /*\n  _init:[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19],\n  */\n\n  /**\n   * The SHA-256 hash key, to be precomputed.\n   * @private\n   */\n  _key:[],\n  /*\n  _key:\n    [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n     0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n     0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n     0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n     0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n     0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n     0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n     0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2],\n  */\n\n\n  /**\n   * Function to precompute _init and _key.\n   * @private\n   */\n  _precompute: function () {\n    var i = 0, prime = 2, factor, isPrime;\n\n    function frac(x) { return (x-Math.floor(x)) * 0x100000000 | 0; }\n\n    for (; i<64; prime++) {\n      isPrime = true;\n      for (factor=2; factor*factor <= prime; factor++) {\n        if (prime % factor === 0) {\n          isPrime = false;\n          break;\n        }\n      }\n      if (isPrime) {\n        if (i<8) {\n          this._init[i] = frac(Math.pow(prime, 1/2));\n        }\n        this._key[i] = frac(Math.pow(prime, 1/3));\n        i++;\n      }\n    }\n  },\n\n  /**\n   * Perform one cycle of SHA-256.\n   * @param {Uint32Array|bitArray} w one block of words.\n   * @private\n   */\n  _block:function (w) {\n    var i, tmp, a, b,\n      h = this._h,\n      k = this._key,\n      h0 = h[0], h1 = h[1], h2 = h[2], h3 = h[3],\n      h4 = h[4], h5 = h[5], h6 = h[6], h7 = h[7];\n\n    /* Rationale for placement of |0 :\n     * If a value can overflow is original 32 bits by a factor of more than a few\n     * million (2^23 ish), there is a possibility that it might overflow the\n     * 53-bit mantissa and lose precision.\n     *\n     * To avoid this, we clamp back to 32 bits by |'ing with 0 on any value that\n     * propagates around the loop, and on the hash state h[].  I don't believe\n     * that the clamps on h4 and on h0 are strictly necessary, but it's close\n     * (for h4 anyway), and better safe than sorry.\n     *\n     * The clamps on h[] are necessary for the output to be correct even in the\n     * common case and for short inputs.\n     */\n    for (i=0; i<64; i++) {\n      // load up the input word for this round\n      if (i<16) {\n        tmp = w[i];\n      } else {\n        a   = w[(i+1 ) & 15];\n        b   = w[(i+14) & 15];\n        tmp = w[i&15] = ((a>>>7  ^ a>>>18 ^ a>>>3  ^ a<<25 ^ a<<14) +\n                         (b>>>17 ^ b>>>19 ^ b>>>10 ^ b<<15 ^ b<<13) +\n                         w[i&15] + w[(i+9) & 15]) | 0;\n      }\n\n      tmp = (tmp + h7 + (h4>>>6 ^ h4>>>11 ^ h4>>>25 ^ h4<<26 ^ h4<<21 ^ h4<<7) +  (h6 ^ h4&(h5^h6)) + k[i]); // | 0;\n\n      // shift register\n      h7 = h6; h6 = h5; h5 = h4;\n      h4 = h3 + tmp | 0;\n      h3 = h2; h2 = h1; h1 = h0;\n\n      h0 = (tmp +  ((h1&h2) ^ (h3&(h1^h2))) + (h1>>>2 ^ h1>>>13 ^ h1>>>22 ^ h1<<30 ^ h1<<19 ^ h1<<10)) | 0;\n    }\n\n    h[0] = h[0]+h0 | 0;\n    h[1] = h[1]+h1 | 0;\n    h[2] = h[2]+h2 | 0;\n    h[3] = h[3]+h3 | 0;\n    h[4] = h[4]+h4 | 0;\n    h[5] = h[5]+h5 | 0;\n    h[6] = h[6]+h6 | 0;\n    h[7] = h[7]+h7 | 0;\n  }\n};\n\n\n/** @fileOverview Javascript SHA-1 implementation.\n *\n * Based on the implementation in RFC 3174, method 1, and on the SJCL\n * SHA-256 implementation.\n *\n * @author Quinn Slack\n */\n\n/**\n * Context for a SHA-1 operation in progress.\n * @constructor\n */\nsjcl.hash.sha1 = function (hash) {\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 5 big-endian words.\n */\nsjcl.hash.sha1.hash = function (data) {\n  return (new sjcl.hash.sha1()).update(data).finalize();\n};\n\nsjcl.hash.sha1.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 512,\n\n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n\n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    if (nl > 9007199254740991){\n      throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    if (typeof Uint32Array !== 'undefined') {\n\tvar c = new Uint32Array(b);\n    \tvar j = 0;\n    \tfor (i = this.blockSize+ol - ((this.blockSize+ol) & (this.blockSize-1)); i <= nl;\n\t\ti+= this.blockSize) {\n      \t    this._block(c.subarray(16 * j, 16 * (j+1)));\n      \t    j += 1;\n    \t}\n    \tb.splice(0, 16 * j);\n    } else {\n    \tfor (i = this.blockSize+ol - ((this.blockSize+ol) & (this.blockSize-1)); i <= nl;\n             i+= this.blockSize) {\n      \t     this._block(b.splice(0,16));\n      \t}\n    }\n    return this;\n  },\n\n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 5 big-endian words. TODO\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n    // Round out the buffer to a multiple of 16 words, less the 2 length words.\n    for (i = b.length + 2; i & 15; i++) {\n      b.push(0);\n    }\n\n    // append the length\n    b.push(Math.floor(this._length / 0x100000000));\n    b.push(this._length | 0);\n\n    while (b.length) {\n      this._block(b.splice(0,16));\n    }\n\n    this.reset();\n    return h;\n  },\n\n  /**\n   * The SHA-1 initialization vector.\n   * @private\n   */\n  _init:[0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0],\n\n  /**\n   * The SHA-1 hash key.\n   * @private\n   */\n  _key:[0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6],\n\n  /**\n   * The SHA-1 logical functions f(0), f(1), ..., f(79).\n   * @private\n   */\n  _f:function(t, b, c, d) {\n    if (t <= 19) {\n      return (b & c) | (~b & d);\n    } else if (t <= 39) {\n      return b ^ c ^ d;\n    } else if (t <= 59) {\n      return (b & c) | (b & d) | (c & d);\n    } else if (t <= 79) {\n      return b ^ c ^ d;\n    } else return undefined;\n  },\n\n  /**\n   * Circular left-shift operator.\n   * @private\n   */\n  _S:function(n, x) {\n    return (x << n) | (x >>> 32-n);\n  },\n\n  /**\n   * Perform one cycle of SHA-1.\n   * @param {Uint32Array|bitArray} words one block of words.\n   * @private\n   */\n  _block:function (words) {\n    var t, tmp, a, b, c, d, e,\n    h = this._h;\n    var w;\n    if (typeof Uint32Array !== 'undefined') {\n        // When words is passed to _block, it has 16 elements. SHA1 _block\n        // function extends words with new elements (at the end there are 80 elements).\n        // The problem is that if we use Uint32Array instead of Array,\n        // the length of Uint32Array cannot be changed. Thus, we replace words with a\n        // normal Array here.\n        w = Array(80); // do not use Uint32Array here as the instantiation is slower\n        for (var j=0; j<16; j++){\n            w[j] = words[j];\n        }\n    } else {\n        w = words;\n    }\n\n    a = h[0]; b = h[1]; c = h[2]; d = h[3]; e = h[4];\n\n    for (t=0; t<=79; t++) {\n      if (t >= 16) {\n        w[t] = this._S(1, w[t-3] ^ w[t-8] ^ w[t-14] ^ w[t-16]);\n      }\n      tmp = (this._S(5, a) + this._f(t, b, c, d) + e + w[t] +\n             this._key[Math.floor(t/20)]) | 0;\n      e = d;\n      d = c;\n      c = this._S(30, b);\n      b = a;\n      a = tmp;\n   }\n\n   h[0] = (h[0]+a) |0;\n   h[1] = (h[1]+b) |0;\n   h[2] = (h[2]+c) |0;\n   h[3] = (h[3]+d) |0;\n   h[4] = (h[4]+e) |0;\n  }\n};\n\nexport default class Crypto {\n  static md5(text): string {\n    return sjcl.codec.hex.fromBits(sjcl.hash.md5.hash(text));\n  }\n\n  static sha1(text): string {\n    return sjcl.codec.hex.fromBits(sjcl.hash.sha1.hash(text));\n  }\n  static sha256(text): string {\n    return sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(text));\n  }\n}\n","export interface ValidatorOptions {\r\n  allowNull?: boolean;\r\n  allowEmpty?: boolean;\r\n  /**\r\n   * For validating URLs, requires that the URL begins with https://.\r\n   */\r\n  requireHttps?: boolean;\r\n}\r\n\r\nexport class ValidatorUtils {\r\n  static isValidUrl(url: any, options?: ValidatorOptions) {\r\n    if (options && options.allowNull && url === null)\r\n        return true;\r\n    else if (options && options.allowEmpty && (url === null || url === undefined))\r\n      return true;\r\n    else {\r\n      try {\r\n        const parsedUrl = new URL(url);\r\n        if (options && options.requireHttps) {\r\n          return parsedUrl.protocol === 'https:';\r\n        } else\r\n          return true;\r\n      } catch (e) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  static isValidBoolean(bool: any, options?: ValidatorOptions) {\r\n    if (options && options.allowNull && bool === null)\r\n      return true;\r\n    else\r\n      return bool === true || bool === false;\r\n  }\r\n\r\n  static isValidArray(array: any, options?: ValidatorOptions) {\r\n    if (options && options.allowNull && array === null)\r\n      return true;\r\n    else if (options && options.allowEmpty && (array === null || array === undefined))\r\n      return true;\r\n    else\r\n      return array instanceof Array;\r\n  }\r\n}\r\n\r\n","import OneSignalError from './OneSignalError';\nimport OneSignal from '../OneSignal';\nimport { ApiUsageMetricEvent, ApiUsageMetricKind } from '../managers/MetricsManager';\n\nexport enum DeprecatedApiReason {\n  HttpPermissionRequest\n}\n\nexport class DeprecatedApiError extends OneSignalError {\n  constructor(reason: DeprecatedApiReason) {\n    switch (reason) {\n      case DeprecatedApiReason.HttpPermissionRequest:\n        super('The HTTP permission request has been deprecated. Please remove any custom popups from your code.');\n        this.reportUsage();\n        break;\n    }\n  }\n\n  reportUsage() {\n    if (typeof OneSignal !== 'undefined' && OneSignal.context && OneSignal.context.metricsManager) {\n      OneSignal.context.metricsManager.reportEvent(new ApiUsageMetricEvent(ApiUsageMetricKind.HttpPermissionRequest));\n    }\n  }\n}\n","import Environment from './Environment';\n\nexport default class OneSignalStub {\n\n  static promiseStub() {\n    return {\n      then: OneSignalStub.promiseStub,\n      catch: OneSignalStub.promiseStub\n    }\n  }\n\n  static get log() {\n    return {\n      setLevel: function() {}\n    }\n  }\n\n  static isPushNotificationsSupported() {\n    return false;\n  }\n\n  static push(item) {\n    if (typeof(item) == \"function\")\n      item();\n    else {\n      var functionName = item.shift();\n      OneSignal[functionName].apply(null, item);\n    }\n  }\n\n  static VERSION() {\n    return Environment.version();\n  }\n}\n\nvar untypedOneSignalStub = OneSignalStub as any;\n\nuntypedOneSignalStub.init = untypedOneSignalStub.showHttpPrompt\n  = untypedOneSignalStub.registerForPushNotifications\n  = untypedOneSignalStub.showHttpPermissionRequest\n  = untypedOneSignalStub.getNotificationPermission\n  = untypedOneSignalStub.on\n  = untypedOneSignalStub.off\n  = untypedOneSignalStub.once\n  = untypedOneSignalStub.config\n  = untypedOneSignalStub.SERVICE_WORKER_PATH\n  = untypedOneSignalStub.SERVICE_WORKER_UPDATER_PATH\n  = untypedOneSignalStub.checkAndWipeUserSubscription\n  = untypedOneSignalStub.subscriptionBell\n  = untypedOneSignalStub.notifyButton\n  = function() { };\n\nuntypedOneSignalStub.setDefaultNotificationUrl = untypedOneSignalStub.setDefaultTitle\n  = untypedOneSignalStub.syncHashedEmail\n  = untypedOneSignalStub.getTags\n  = untypedOneSignalStub.sendTag\n  = untypedOneSignalStub.sendTags\n  = untypedOneSignalStub.deleteTag\n  = untypedOneSignalStub.deleteTags\n  = untypedOneSignalStub.addListenerForNotificationOpened\n  = untypedOneSignalStub.getIdsAvailable\n  = untypedOneSignalStub.isPushNotificationsEnabled\n  = untypedOneSignalStub.setSubscription\n  = untypedOneSignalStub.getUserId\n  = untypedOneSignalStub.getRegistrationId\n  = untypedOneSignalStub.getSubscription\n  = untypedOneSignalStub.sendSelfNotification\n  = untypedOneSignalStub.setEmail\n  = untypedOneSignalStub.logoutEmail\n  = untypedOneSignalStub.promiseStub;\n"],"names":["__webpack_require__","moduleId","installedModules","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","__extends","b","__","this","constructor","extendStatics","create","__rest","e","t","indexOf","getOwnPropertySymbols","length","__decorate","decorators","target","key","desc","arguments","r","getOwnPropertyDescriptor","Reflect","decorate","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","rejected","throw","result","done","then","apply","__generator","body","verb","v","op","f","TypeError","_","y","label","ops","pop","trys","push","g","sent","return","Symbol","iterator","__exportStar","__values","__read","ar","error","__spread","concat","__await","__asyncGenerator","a","q","resume","settle","fulfill","shift","asyncIterator","__asyncDelegator","__asyncValues","setPrototypeOf","__proto__","Array","__assign","assign","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","root","definition","undefined","realMethod","methodName","console","undefinedType","bindMethod","log","noop","obj","method","bind","Function","enableLoggingWhenConsoleArrives","level","loggerName","replaceLoggingMethods","logMethods","methodFactory","defaultMethodFactory","Logger","defaultLevel","factory","persistLevelIfPossible","levelNum","levelName","toUpperCase","window","localStorage","storageKey","ignore","document","cookie","encodeURIComponent","getPersistedLevel","storedLevel","location","exec","slice","self","levels","currentLevel","TRACE","DEBUG","INFO","WARN","ERROR","SILENT","getLevel","setLevel","persist","setDefaultLevel","enableAll","disableAll","initialLevel","defaultLogger","_loggersByName","getLogger","logger","_log","noConflict","BuildEnvironmentKind_1","TestEnvironmentKind_1","WindowEnvironmentKind_1","InvalidArgumentError_1","SubscriptionHelper_1","IntegrationKind_1","SdkEnvironment","getBuildEnv","BuildEnvironmentKind","Production","getIntegration","usingProxyOrigin","isTopFrame","top","isHttpsProtocol","protocol","OneSignal","InvalidArgumentError","InvalidArgumentReason","Empty","context","appConfig","subdomain","IntegrationKind","SecureProxy","Secure","InsecureProxy","default","isFrameContextInsecure","_a","getWindowEnv","registration","WindowEnvironmentKind","ServiceWorker","Unknown","href","pathname","search","hostname","endsWith","Development","OneSignalSubscriptionPopup","Host","OneSignalProxyFrame","OneSignalSubscriptionModal","CustomIframe","getTestEnv","TestEnvironmentKind","None","getBuildEnvPrefix","buildEnv","Staging","EnumOutOfRange","getOneSignalApiUrl","URL","global","isArray","variable","toString","decodeHtmlEntities","text","Environment_1","isBrowser","decodeTextArea","createElement","innerHTML","redetectBrowserUserAgent","Browser","version","browser","_detect","navigator","userAgent","isPushNotificationsSupported","safari","serviceWorker","ios","ipod","iphone","ipad","msie","msedge","Number","appVersion","match","firefox","mobile","tablet","samsungBrowser","chrome","chromium","yandexbrowser","opera","vivaldi","isChromeLikeBrowser","removeDomElement","selector","els","querySelectorAll","parentNode","removeChild","awaitOneSignalInitAndSupported","initialized","once","EVENTS","SDK_INITIALIZED","stringify","JSON","executeCallback","callback","args","_i","logMethodCall","debug","map","join","getConsoleStyle","isValidEmail","email","addDomElement","targetSelectorOrElement","addOrder","elementHtml","querySelector","insertAdjacentHTML","Error","clearDomElementChildren","element","firstChild","addCssClass","cssClass","classList","add","removeCssClass","remove","hasCssClass","contains","style","delay","durationMs","setTimeout","nothing","timeoutPromise","promise","milliseconds","TimeoutError_1","race","when","condition","promiseIfTrue","promiseIfFalse","indexOfAble","trimUndefined","getRandomUuid","crypto","msCrypto","replace","getRandomValues","Uint8Array","Math","random","isValidUuid","uuid","test","getUrlQueryParam","url","toLowerCase","regex","RegExp","results","decodeURIComponent","wipeIndexedDb","warn","all","Database_1","capitalize","charAt","unsubscribeFromPush","SdkEnvironment_1","pushManager","getSubscription","subscription","unsubscribe","isUsingSubscriptionWorkaround","proxyFrameHost","message","POSTMAM_COMMANDS","UNSUBSCRIBE_FROM_PUSH","reply","data","REMOTE_OPERATION_COMPLETE","controller","ready","wipeServiceWorker","unregister","wipeServiceWorkerAndUnsubscribe","wait","substringAfter","string","substr","event","task","manualDestroy","taskWrapper","destroyEventListener","removeEventListener","type","addEventListener","getSdkLoadCount","__oneSignalSdkLoadCount","awaitSdkEvent","eventName","predicate","incrementSdkLoadCount","prepareEmailForHashing","encodeHashAsUriComponent","hash","uriComponent","keys","keys_1","utils_1","SILENT_EVENTS","RETRIGGER_REMOTE_EVENTS","LEGACY_EVENT_MAP","notificationPermissionChange","subscriptionChange","customPromptClick","Event","trigger","remoteTriggerEnv","displayData","env","emit","legacyEventName","_triggerLegacy","opener","parent","subscriptionPopup","REMOTE_RETRIGGER_EVENT","eventData","proxyFrame","retriggerRemoteEvent","CustomEvent","bubbles","cancelable","detail","dispatchEvent","Environment","getLanguage","languageTag","language","languageSubtags","split","TRADITIONAL_CHINESE_LANGUAGE_TAG","traditionalSubtag","_b","_c","SIMPLIFIED_CHINESE_LANGUAGE_TAG","simpleSubtag","substring","supportsServiceWorkers","getSdkStylesVersionHash","toObject","val","propIsEnumerable","propertyIsEnumerable","test1","String","getOwnPropertyNames","test2","fromCharCode","test3","forEach","letter","source","from","symbols","to","ExtendableError","OneSignalError","_super","tslib_1","PushPermissionNotGrantedError_1","PushPermissionNotGrantedError_2","EventHelper_1","InvalidStateError_1","NotificationPermission_1","SubscriptionHelper","registerForPush","isPushNotificationsEnabled","isPushEnabled","sessionManager","isFirstPageView","_isRegisteringForPush","subscriptionManager","subscribe","rawSubscription_1","registerSubscription","incrementPageViewCount","triggerNotificationPermissionChanged","checkAndTriggerSubscriptionChanged","info","e_1","windowCreator_1","rawSubscription","permissionManager","updateStoredPermission","e_2","reason","PushPermissionNotGrantedErrorReason","Blocked","Dismissed","REMOTE_NOTIFICATION_PERMISSION_CHANGED","permission","NotificationPermission","Denied","forceUpdatePermission","Default","close","FINISH_REMOTE_REGISTRATION","rawPushSubscription","serialize","progress","InvalidStateError","InvalidStateReason","UnsupportedEnvironment","config","isLocalhostAllowedAsSecureOrigin","getRegistration","isInsecureOrigin","userConfig","allowLocalhostAsSecureOrigin","detect","ua","getFirstMatch","iosdevice","likeAndroid","android","nexusMobile","nexusTablet","chromeos","silk","sailfish","tizen","webos","windowsphone","windows","mac","linux","edgeVersion","versionIdentifier","xbox","coast","ucbrowser","maxthon","epiphany","puffin","sleipnir","kMeleon","chromeBook","seamonkey","firefoxos","phantom","slimer","blackberry","touchpad","bada","qupzilla","googlebot","blink","webkit","gecko","osVersion","osversion","osMajorVersion","x","getVersionPrecision","arr","compareVersions","versions","precision","max","chunks","delta","chunk","reverse","isUnsupportedBrowser","minVersions","strictMode","_bowser","bowser","check","browserList","browserItem","DatabaseEventName","Emitter_1","AppState_1","ServiceWorkerState_1","Subscription_1","IndexedDb_1","EmailProfile_1","Database","databaseName","emitter","database","applyDbResultFilter","table","id","timestamp","_this","REMOTE_DATABASE_GET","cleanResult","put","keypath","REMOTE_DATABASE_PUT","SET","REMOTE_DATABASE_REMOVE","getAppConfig","appIdStr","_d","appId","vapidPublicKey","emailAuthRequired","setAppConfig","httpUseOneSignalCom","getAppState","state","AppState","defaultNotificationUrl","_e","defaultNotificationTitle","lastKnownPushEnabled","clickedNotifications","setAppState","appState","clickedNotificationUrls","clickedNotificationUrls_1","notificationDetails","getServiceWorkerState","ServiceWorkerState","workerVersion","updaterWorkerVersion","backupNotification","setServiceWorkerState","Subscription","deviceId","subscriptionToken","dbOptedOut","dbNotOptedOut","createdAt","expirationTime","optedOut","setSubscription","getEmailProfile","profileJson","EmailProfile","deserialize","setEmailProfile","emailProfile","rebuild","ensureSingletonInstance","databaseInstance","databaseInstanceName","on","workerState","objectAssign","Bell_1","Event_1","WorkerMessenger_1","TimedLocalStorage_1","MainHelper","fixWordpressManifestIfMisplaced","manifests","manifest","insertBefore","children","getNotificationTypeFromOptIn","isOptedIn","wasHttpsNativePromptDismissed","getItem","markHttpPopoverShown","sessionStorage","setItem","isHttpPromptAlreadyShown","checkAndTriggerNotificationPermissionChanged","previousPermission","getNotificationPermission","currentPermission","showNotifyButton","notifyButton","bell","displayPredicate","predicateValue","getNotificationIcons","getAppId","MissingAppId","fetch","response","json","errors","establishServiceWorkerChannel","workerMessenger","off","WorkerMessengerCommand","NotificationDisplayed","origin","NOTIFICATION_DISPLAYED","NotificationClicked","messenger","GET_EVENT_LISTENER_COUNT","NOTIFICATION_CLICKED","callbackCount","clickedListenerCallbackCount","getListeners","Date","now","RedirectPage","SERVICEWORKER_COMMAND_REDIRECT","NotificationDismissed","NOTIFICATION_DISMISSED","getSlidedownPermissionMessageOptions","promptOptions","slidedown","actionMessage","acceptButtonText","cancelButtonText","getFullscreenPermissionMessageOptions","fullscreen","autoAcceptTitle","exampleNotificationTitleDesktop","title","exampleNotificationTitleMobile","exampleNotificationMessageDesktop","exampleNotificationMessageMobile","exampleNotificationCaption","caption","acceptButton","cancelButton","getPromptOptionsQueryString","promptOptionsStr","getPromptOptionsPostHash","legacyParams","legacyParamKey","legacyParamValue","allowedPromptOptions","encoded_value","triggerCustomPromptClicked","clickResult","CUSTOM_PROMPT_CLICKED","OneSignalError_1","PushPermissionNotGrantedError","LimitStore_1","OneSignalApi_1","MainHelper_1","EventHelper","onNotificationPermissionChange","onInternalSubscriptionSet","getSubscriptionState","subscriptionState","didStateChange","subscribed","triggerSubscriptionChanged","_onSubscriptionChanged","newSubscriptionState","onSubscriptionChanged_showWelcomeNotification","onSubscriptionChanged_evaluateNotifyButtonDisplayPredicate","isSubscribed","__doNotShowWelcomeNotification","welcome_notification_opts","welcomeNotification","welcome_notification_disabled","unopenableWelcomeNotificationUrl","sendNotification","en","__isOneSignalWelcomeNotification","WELCOME_NOTIFICATION_SENT","predicateResult","launcher","show","hide","updateIfIdentical","newPermission","isUpdating","NATIVE_PROMPT_PERMISSIONCHANGED","SUBSCRIPTION_CHANGED","fireStoredNotificationClicks","fireEventWithNotification","clickedNotificationInfo","notification","minutesSinceNotificationClicked","notificationClickHandlerMatch","clickedNotificationUrl","clickedNotification","pageClickedNotifications","urlWithoutTrailingSlash","PermissionPromptType_1","extra","RedundantPermissionMessage","extraInfo","permissionPromptType","PermissionPromptType","PushPermissionAlreadyGranted","ServiceWorkerNotActivated","NoProxyFrame","description","JSONP","OneSignalApiError_1","SubscriptionStateKind_1","OneSignalApi","action","headers","post","delete","callHeaders","Headers","append","contents","cache","status","identifyError","getUserIdFromSubscriptionIdentifier","deviceType","identifier","app_id","device_type","notification_types","SubscriptionStateKind","TemporaryWebRecord","catch","getPlayer","playerId","updatePlayer","options","playerIds","titles","icon","buttons","params","include_player_ids","isAnyWeb","web_buttons","headings","chrome_web_icon","firefox_icon","downloadServerAppConfig","err","success","serverConfig","createUser","deviceRecord","createEmailRecord","pushId","emailAddress","device_player_id","email_auth_hash","emailAuthHash","updateEmailRecord","emailId","logoutEmail","parent_player_id","updateUserSession","userId","OneSignalApiError","OneSignalApiErrorKind","heir","EventEmitter","Postmam","windowReference","sendToOrigin","receiveFromOrigin","postMessage","merge","channel","MessageChannel","messagePort","isListening","isConnected","replies","listen","onWindowMessagePostmanConnectReceived","startPostMessageReceive","onWindowPostMessageReceived","stopPostMessageReceive","destroy","removeEvent","isSafeOrigin","messageId","messageCommand","command","messageData","messageSource","CONNECTED_MESSAGE","messageBundle","messageBundleWithReply","handshake","HANDSHAKE_MESSAGE","ports","onMessageReceived","start","connect","port1","port2","originalMessageBundle","onReply","isReply","generateSafeOrigins","inputOrigin","safeOrigins","reducedHost","host","ex","messageOrigin","otherAllowedOrigins","argName","Malformed","argument","ServiceWorkerManager_1","WorkerMessengerReplyBuffer","addListener","onceListenerOnly","record","findListenersForMessage","deleteListenerRecords","deleteAllListenerRecords","deleteListenerRecord","targetRecord","listenersForCommand","listenerRecordIndex","splice","WorkerMessenger","broadcast","payload","clients","matchAll","includeUncontrolled","clients_1","client","unicast","windowClient","isWorkerControllingPage","waitUntilWorkerControlsPage","listenIfPageUncontrolled","onWorkerMessageReceivedFromPage","listenForPage","onPageMessageReceivedFromServiceWorker","listenerRecords","listenersToRemove","listenersToCall","listenerRecords_1","listenerRecord","listenersToCall_1","listenerRecords_2","listenersToCall_2","active","serviceWorkerManager","getActiveState","ServiceWorkerActiveState","WorkerA","WorkerB","NotImplementedError","LimitStore","store","LIMIT","getFirst","getLast","isEmpty","values","Badge_1","Button_1","Dialog_1","Launcher_1","Message_1","Bell","enable","size","position","_f","theme","_g","showLauncherAfter","_h","showBadgeAfter","_j","_k","prenotify","_l","showCredit","_m","colors","_o","offset","_p","_launcher","substituteText","STATES","UNINITIALIZED","_ignoreSubscriptionState","SUBSCRIBE_CLICK","dialog","subscribeButton","disabled","display","TYPES","MESSAGE","TIMEOUT","clearIfWasInactive","inactivate","updateState","UNSUBSCRIBE_CLICK","unsubscribeButton","activate","HOVERING","hovering","activateIfInactive","shown","contentType","queued","dequeue","msg","content","QUEUED","getTipForState","TIP","HOVERED","hidden","waitUntilShown","wasInactive","badge","notificationIcons","icons","setState","SUBSCRIBED","BLOCKED","UNSUBSCRIBED","STATE_CHANGED","LAUNCHER_CLICK","BELL_CLICK","prompt.native.grant","browserName","tKey","TEXT_SUBS","tValue","zValue","showDialogProcedure","inactivateIfWasInactive","dynamicResourceLoader","loadSdkStylesheet","sdkStylesLoadResult","container","button","notOptedOut","doNotPrompt","resizeTo","resize","applyOffsetIfSpecified","setCustomColorsIfSpecified","patchSafariSvgFilterBug","isNotOptedOut","autoRegister","_isNewVisitor","enqueue","bellShadow","badgeShadow","dialogShadow","graphic","setAttribute","cssText","bottom","right","left","dialogButton","pulseRing","foregroundElements","foregroundElements_1","addCssToHead","css","getElementById","styleDom","appendChild","createTextNode","head","isEnabled","newState","silent","lastState","_button","_badge","_message","_dialog","serializeAppConfig","deserializeAppConfig","bundle","ConfigIntegrationKind","NotificationClickMatchBehavior","NotificationClickActionBehavior","SdkInitErrorKind","SdkInitError","InvalidAppId","AppNotConfiguredForWebPush","MissingSubdomain","WrongSiteUrl","siteUrl","MultipleInitialization","MissingSafariWebId","AnimatedElement_1","ActiveAnimatedElement","showClass","hideClass","activeClass","inactiveClass","activeState","targetTransitionEvents","nestedContentSelector","inactive","ACTIVATING","ACTIVE","timerId","transitionCheckTimeout","destroyListenerFn","propertyName","clearTimeout","INACTIVATING","INACTIVE","waitUntilActive","waitUntilInactive","AnimatedElement","SHOWING","SHOWN","HIDING","HIDDEN","waitUntilHidden","set","Path_1","AppConfig_1","NotImplementedError_1","TimedLocalStorage","isLocalStorageSupported","expirationInMinutes","expirationInMilliseconds","getTime","parsedRecord","parse","removeItem","parsedRecordValue","DeviceRecord_1","PushDeviceRecord","serializedBundle","safariDeviceToken","w3cEndpoint","web_auth","w3cAuth","web_p256","w3cP256dh","createFromPushSubscription","pushRegistration","Subscribed","NotSubscribed","DeviceRecord","DeliveryPlatformKind_1","DevicePlatformKind_1","timezone","getTimezoneOffset","browserVersion","NaN","parseInt","operatingSystem","getBrowserOperatingSystem","operatingSystemVersion","devicePlatform","getDevicePlatform","deviceModel","platform","sdkVersion","deliveryPlatform","getDeliveryPlatform","isMobile","isTablet","DevicePlatformKind","Mobile","Tablet","Desktop","isSafari","pushNotification","DeliveryPlatformKind","Safari","Firefox","Edge","ChromeLike","device_os","sdk","delivery_platform","browser_name","browser_version","operating_system","operating_system_version","device_platform","device_model","Context_1","ConfigManager_1","RemoteFrame","initOptions","subdomainName","metrics","mixpanelReportingToken","initialize","creator","write","rasterizedOptions","loadPromise","resolver","rejector","establishCrossOriginMessaging","dispose","finishInitialization","windowCreator","SubscriptionManager_1","DynamicResourceLoader_1","CookieSyncer_1","SessionManager_1","PermissionManager_1","MetricsManager_1","Context","cookieSyncer","cookieSyncEnabled","SubscriptionManager","safariWebId","onesignalVapidPublicKey","serviceWorkerManagerConfig","workerAPath","workerBPath","registrationOptions","scope","path","serviceWorkerPath","serviceWorkerUpdaterPath","serviceWorkerParam","ServiceWorkerManager","DynamicResourceLoader","SessionManager","metricsManager","ObjectType","SdkInitError_1","IntegrationConfigurationKind","ConfigManager","getMergedConfig","restrictedOriginEnabled","doesCurrentOriginMatchConfigOrigin","code","configOrigin","getIntegrationCapabilities","integration","Custom","WordPress","configuration","JavaScript","Dashboard","configIntegrationKind","getConfigIntegrationKind","getSubdomainForConfigIntegrationKind","http_use_onesignal_com","features","cookie_sync","restrict_origin","mixpanel_reporting_token","safari_web_id","vapid_public_key","onesignal_vapid_public_key","require_auth","getUserConfigForConfigIntegrationKind","kind","workerName","updaterWorkerName","registrationScope","siteInfo","proxyOrigin","autoPrompt","staticPrompts","enabled","disable","hideWhenSubscribed","circle.background","color","main","circle.foreground","accent","badge.background","badge.foreground","badge.bordercolor","pulse.color","dialog.button.background.hovering","dialog.button.background.active","dialog.button.background","dialog.button.foreground","tip.state.unsubscribed","tooltip","unsubscribed","tip.state.subscribed","tip.state.blocked","blocked","message.prenotify","message.action.subscribed","subscribing","message.action.resubscribed","message.action.unsubscribed","unsubscribing","dialog.main.title","dialog.main.button.subscribe","dialog.main.button.unsubscribe","dialog.blocked.title","dialog.blocked.message","persistNotification","notificationBehavior","webhooks","cors","corsEnable","notification.displayed","notificationDisplayedHook","notification.clicked","notificationClickedHook","notification.dismissed","notificationDismissedHook","click","notificationClickHandlerAction","setupBehavior","SERVICE_WORKER_PARAM","SERVICE_WORKER_PATH","SERVICE_WORKER_UPDATER_PATH","integrationCapabilities","userValue","serverValue","proxyOriginEnabled","shouldUseServerConfigSubdomain","userProvidedSubdomain","capabilities","eval","Emitter","_events","listener","fn","that","listeners","j","removeAllListeners","len","IndexedDb","open","request","indexedDB","onerror","onDatabaseOpenError","onblocked","onDatabaseOpenBlocked","onupgradeneeded","onDatabaseUpgradeNeeded","onsuccess","onDatabaseError","onversionchange","onDatabaseVersionChange","ensureDatabaseOpen","openLock","preventDefault","errorCode","db","createObjectStore","keyPath","transaction","objectStore","jsonResult","cursor","openCursor","cursorResult","cursorResultKey","continue","Message","duration","increment","dequeuedMessage","decrement","numMessagesLeft","Path","trim","getQueryString","indexOfDelimiter","getWithoutQueryString","QUERY_STRING","getFileName","getFileNameWithQuery","getFullPath","getPathWithoutFileName","newPath","fileNameIndex","lastIndexOf","pathWithoutFileName","AlreadySubscribedError_1","NotSubscribedError_1","PermissionMessageDismissedError_1","HttpHelper_1","InitHelper_1","TestHelper_1","AltOriginManager_1","LegacyManager_1","SubscriptionPopupHost_1","Popover_1","Crypto_1","ValidatorUtils_1","DeprecatedApiError_1","EmailDeviceRecord_1","setDefaultNotificationUrl","ValidatorUtils","isValidUrl","allowNull","setDefaultTitle","syncHashedEmail","sanitizedEmail","NotSubscribedError","NotSubscribedReason","NoDeviceId","em_m","md5","em_s","sha1","em_s256","sha256","setEmail","existingEmailProfile","newEmailProfile","isExistingEmailSaved","isExistingPushRecordSaved","NoEmailSet","init","__init","__initAlreadyCalled","onSdkInitialized","discoverAltOrigin","initSaveState","saveInitOptions","internalInit","ponyfillSafariFetch","errorIfInitAlreadyCalled","readyState","onreadystatechange","showHttpPermissionRequest","showHttpPrompt","__isPopoverShowing","SlidedownPermissionMessage","force","OptedOut","popover","CLOSED","ALLOW_CLICK","markHttpsNativePromptDismissed","_sessionInitAlreadyRunning","registerForPushNotifications","autoAccept","CANCEL_CLICK","__registerForPushNotifications","httpPermissionRequest","DeprecatedApiError","DeprecatedApiReason","HttpPermissionRequest","subscriptionPopupHost","load","fromRegisterFor","sessionInit","onComplete","getTags","tags","sendTag","tag","sendTags","REGISTERED","newDeviceId","deleteTag","deleteTags","isValidArray","tagsToSend","tags_1","deletedTags","deletedTagKeys","addListenerForNotificationOpened","pageUrl","getIdsAvailable","registrationId","newSubscription","isValidBoolean","isOptedOut","optOut","doOptOut","getEmailId","getUserId","getRegistrationId","subscriptionStatus","sendSelfNotification","allowEmpty","requireHttps","item","VERSION","_VERSION","sdkEnvironment","_notificationOpenedCallbacks","_idsAvailable_callback","_defaultLaunchURL","_isNotificationEnabledCallback","_subscriptionSet","modalUrl","_windowWidth","_windowHeight","_channel","timedLocalStorage","environment","api","indexedDb","mainHelper","subscriptionHelper","httpHelper","eventHelper","initHelper","testHelper","_LOGGING","LOGGING","_usingNativePermissionHook","_initCalled","checkAndWipeUserSubscription","EmailDeviceRecord","notificationPermission","_initHttp","initHttp","_initPopup","CONNECTED","REMOTE_NOTIFICATION_PERMISSION","MODAL_LOADED","MODAL_PROMPT_ACCEPTED","MODAL_PROMPT_REJECTED","POPUP_LOADED","POPUP_ACCEPTED","POPUP_REJECTED","POPUP_CLOSING","IFRAME_POPUP_INITIALIZE","SET_SESSION_COUNT","REQUEST_HOST_URL","WINDOW_TIMEOUT","FINISH_REMOTE_REGISTRATION_IN_PROGRESS","POPUP_BEGIN_MESSAGEPORT_COMMS","MARK_PROMPT_DISMISSED","IS_SUBSCRIBED","UNSUBSCRIBE_PROXY_FRAME","SERVICE_WORKER_STATE","GET_WORKER_VERSION","SUBSCRIPTION_EXPIRATION_STATE","PROCESS_EXPIRING_SUBSCRIPTIONS","GET_SUBSCRIPTION_STATE","SDK_INITIALIZED_PUBLIC","PERMISSION_PROMPT_DISPLAYED","TEST_INIT_OPTION_DISABLED","TEST_WOULD_DISPLAY","POPUP_WINDOW_TIMEOUT","NOTIFICATION_TYPES","logLevel","ensureBackwardsCompatibility","inherit","destination","addSuper","createObject","mixin","hasOwn","indexOfListener","alias","isValidListener","proto","originalGlobalValue","evt","events","_getEvents","flattenListeners","flatListeners","getListenersAsObject","listenerIsWrapped","addOnceListener","defineEvent","defineEvents","evts","removeListener","index","addListeners","manipulateListeners","removeListeners","single","multiple","emitEvent","listenersMap","_getOnceReturnValue","setOnceReturnValue","_onceReturnValue","AlreadySubscribedError","PermissionMessageDismissedError","LegacyManager","oneSignal","environmentPolyfill","postmams","getEnv","isPopup","isIframe","assignPostmamLegacyFunctions","postmamLikeObject","postmamMessageFunc","postmamPostMessageFunc","iframePostmam","popupPostmam","subscriptionModal","modalPostmam","SubscriptionModalHost_1","PushDeviceRecord_1","InitHelper","storeInitialValues","processExpiringSubscriptions","isSubscriptionExpiring","integrationKind","windowEnv","SubscribeNew","runCommand","installNativePromptPermissionChangedHook","Granted","__sdkCall","context_1","updateEmailSessionCount","install","showPromptsFromWebConfigEditor","permissions","query","permissionStatus","onchange","opPromises","webhookOptions","updateWorker","Notification","visibilityState","overridingPageTitle","initialPageTitle","modalPrompt","subscriptionModalHost","loadFetchPolyfill","getCache","originForEnv","loadIfNew","domElement","onload","TestHelper","dismissCount","dismissDays","dismissMinutes","SubscriptionErrorReason","SubscriptionError","InvalidSafariSetup","RawPushSubscription","isNewSubscription","existingW3cPushSubscription","existingSafariDeviceToken","setFromW3cSubscription","pushSubscription","endpoint","getKey","p256dh","auth","p256dh_base64encoded","btoa","auth_base64encoded","setFromSafariSubscription","existingPushSubscription","base64ToUint8Array","base64String","padding","repeat","base64","rawData","atob","outputArray","charCodeAt","arrayBufferToBase64","arrayBuffer","encodings","bytes","byteLength","byteRemainder","mainLength","base64Encode","str","p1","base64Decode","Encoding_1","MetricEvent","getPropertiesAsJson","MetricEngagement","ApiUsageMetricKind","ApiUsageMetricEvent","apiName","getEventName","PageViewMetricEngagement","getProfileName","getDateUtc","date","getUTCMonth","getUTCDate","getUTCFullYear","getOperationData","$add","$ignore_time","MetricsManager","isFeatureEnabled","reportEvent","queryParamsData","properties","token","queryParams","requestOptions","MIXPANEL_REPORTING_URL","reportEngagement","engagement","$token","$distinct_id","shouldCollectPageView","reportPageView","oneSignalSdkInit","predefinedOneSignalPushes","_classCallCheck","instance","Constructor","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","writable","_extendableBuiltin2","getPrototypeOf","captureStackTrace","stack","cls","ExtendableBuiltin","TimeoutError","jsonp","opts","cleanup","script","timer","cancel","prefix","count","param","timeout","enc","getElementsByTagName","src","ActiveAnimatedElement_1","Badge","isNaN","badgeNumber","Button","mouse","onHovering","onTap","passive","onHovered","onEndTap","onClick","pulse","Dialog","subscribeButtonId","unsubscribeButtonId","getPlatformNotificationIcon","updateBellLauncherDialogBody","subscribeButtonSelectorId","unsubscribeButtonSelectorId","currentSetSubscription","footer","notificationIconHtml","imageUrl","buttonHtml","instructionsHtml","Launcher","MissingDomElement","ProxyFrame_1","SubscriptionModal_1","SubscriptionPopup_1","HttpHelper","Postmam_1","RemoteFrame_1","ProxyFrame","onMessengerConnect","onProxyFrameInitializing","onRemoteNotificationPermission","onRemoteDatabaseGet","onRemoteDatabasePut","onRemoteDatabaseRemove","onUnsubscribeFromPush","onMarkPromptDismissed","onIsSubscribed","onUnsubscribeProxyFrame","onServiceWorkerState","onWorkerVersion","onSubscriptionExpirationState","onProcessExpiringSubscriptions","onGetSubscriptionState","hostInitOptions","pageTitle","defaultUrl","getReportedNotificationPermission","retrievals","retrievalOpPromises","retrievals_1","retrieval","insertions","insertionOpPromises","insertions_1","insertion","removals","removalOpPromises","removals_1","removal","getWorkerVersion","SubscriptionModalHost","modal","createHiddenSubscriptionDomModal","iframeContainer","iframeContainerStyle","iframe","className","width","height","removeFrame","existingInstance","showSubscriptionDomModal","onModalLoaded","onModalAccepted","onModalRejected","onModalClosing","SubscriptionError_1","SubscriptionError_2","RawPushSubscription_1","subscriptionStrategy","subscribeFcmFromWorker","subscribeSafari","subscribeFcmFromPage","isAlreadyRegisteredWithOneSignal","associateSubscriptionWithEmail","requestPresubscribeNotificationPermission","requestNotificationPermission","strategy","MutedByApi","requestPermission","subscribeSafariPromptPermission","deviceToken","pushSubscriptionDetails","existingDeviceToken","shouldInstallWorker","installWorker","workerRegistration","subscribeFcmVapidOrLegacyKey","permissionState","userVisibleOnly","pushPermission","getVapidKeyForBrowser","buffer","subscriptionOptions","applicationServerKey","shouldRecordSubscriptionCreatedAt","newPushSubscription","isSubscriptionExpiringForSecureIntegration","serviceWorkerState","serviceWorkerRegistration","subscriptionCreatedAt","ONE_YEAR","midpointExpirationTime","getSubscriptionStateForSecure","pushSubscriptionState","getSubscriptionStateForInsecure","isWorkerActive","CookieSyncer","Tynt","PUBLISHER_ID","SDK_URL","getPageViewCount","pageViewCountStr","SESSION_STORAGE_KEY_NAME","pageViewCount","setPageViewCount","sessionCount","incrementedPageViewCount","newCount","simulatePageNavigationOrRefresh","PermissionManager","reportedPermission","isPermissionEnvironmentAmbiguous","getInterpretedAmbiguousPermission","getSafariNotificationPermission","isUsingOneSignalSubdomain","getOneSignalSubdomainNotificationPermission","getW3cNotificationPermission","remoteNotificationPermission","isCurrentFrameContextCrossOrigin","topFrameOrigin","getStoredPermission","storedPermission","STORED_PERMISSION_KEY","setStoredPermission","SubscriptionModal","SubscriptionPopup","onMessengerConnected","ProxyFrameHost_1","AltOriginManager","iframeUrls","getOneSignalProxyIframeUrls","allProxyFrameHosts","iframeUrls_1","iframeUrl","removeDuplicatedAltOriginSubscription","nonDuplicatedAltOriginSubscriptions","targetProxyFrameHost","allProxyFrameHosts_1","proxyFrameHosts","subscribedProxyFrameHosts","proxyFrameHosts_1","hostToCheck","oneSignalComProxyFrameHost","find","indexToRemove","getCanonicalSubscriptionUrls","urls","legacyDomainUrl","osTcDomainUrl","urls_1","urls_2","getOneSignalSubscriptionPopupUrls","urls_3","ProxyFrameHost","SubscriptionPopupHost","postData","promptType","parentHostname","popupWindow","openWindowViaPost","overrides","form","dualScreenLeft","screenLeft","screen","dualScreenTop","screenTop","thisWidth","innerWidth","documentElement","clientWidth","thisHeight","innerHeight","clientHeight","childWidth","childHeight","windowRef","input","submit","onBeginMessagePortCommunications","onPopupLoaded","onPopupAccepted","onPopupRejected","onPopupClosing","onSetSessionCount","onWindowTimeout","onFinishingRegistrationRemotely","onRemoteRetriggerEvent","Popover","sjcl","cipher","keyexchange","mode","misc","codec","exception","corrupt","invalid","bug","notReady","bitArray","bitSlice","bstart","bend","_shiftRight","clamp","extract","blength","sh","floor","a1","a2","last","getPartial","bitLength","ceil","partial","_end","round","equal","carry","out","shift2","last2","_xor4","byteswapM","utf8String","fromBits","tmp","bl","escape","toBits","unescape","hex","_T","_precompute","_buffer","_length","reset","update","finalize","blockSize","_init","ol","nl","_block","h","_BS","w","abs","sin","words","notlast","T","_key","Uint32Array","subarray","frac","factor","isPrime","prime","pow","k","h0","h1","h2","h3","h4","h5","h6","h7","_S","Crypto","parsedUrl","bool","array","OneSignal_1","reportUsage","OneSignalStub","promiseStub","functionName","untypedOneSignalStub","subscriptionBell","run","onPushReceived","onNotificationClosed","waitUntil","onNotificationClicked","onServiceWorkerInstalled","onServiceWorkerActivated","onPushSubscriptionChange","setupMessageListeners","WorkerVersion","Subscribe","appConfigBundle","AmpSubscriptionState","AmpSubscribe","AmpUnsubscribe","parseOrFetchNotifications","notifications","displayBackupNotification","notificationEventPromiseFns","notifications_1","rawNotification","buildStructuredNotificationObject","notif","displayNotification","updateBackupNotification","executeWebhooks","reduce","UNSUBSCRIBED_FROM_NOTIFICATIONS","isServerCorsEnabled","webhookTargetUrl","heading","fetchOptions","X-OneSignal-Event","Content-Type","getActiveClients","windowClients","activeClients","windowClients_1","frameType","isSubdomainIframe","custom","alert","u","image","vibrate","rawButton","ensureImageResourceHttps","parsedImageUrl","ensureNotificationResourcesHttps","_getTitle","defaultTitle","defaultIcon","notificationOptions","actions","requireInteraction","renotify","filterNotificationOptions","showNotification","forcePersistNotifications","clone","isWelcomeNotification","__isOneSignalBackupNotification","shouldOpenNotificationUrl","getNotificationUrlToOpen","launchUrl","dbDefaultNotificationUrl","matchPreference","actionPreference","notificationOpensLink","doNotOpenLink","activeClients_1","clientUrl","lastKnownHostUrl","clientOrigin","launchOrigin","focus","navigate","e_3","e_4","openUrl","player_id","opened","openWindow","e_5","skipWaiting","claim","deviceIdExists","oldSubscription","providedNewSubscription","hasNewSubscription","PermissionRevoked","PushSubscriptionRevoked","isValidPushPayload","retrieveNotifications","recoveredUserId","unsubscriptionResult","OneSignalWorker"],"mappings":"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"}